
Freqref.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000022a  00800200  0000164c  000016e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000164c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000455  0080042a  0080042a  0000190a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000190a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  000019a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000526b  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a4e  00000000  00000000  000070ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002171  00000000  00000000  00008af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c2c  00000000  00000000  0000ac6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a01  00000000  00000000  0000b898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002883  00000000  00000000  0000d299  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0000fb1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	81 c3       	rjmp	.+1794   	; 0x764 <__vector_24>
      62:	00 00       	nop
      64:	f9 c3       	rjmp	.+2034   	; 0x858 <__vector_25>
      66:	00 00       	nop
      68:	1f c4       	rjmp	.+2110   	; 0x8a8 <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	0a c3       	rjmp	.+1556   	; 0x68e <__vector_30>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5a c4       	rjmp	.+2228   	; 0x946 <__vector_36>
      92:	00 00       	nop
      94:	81 c4       	rjmp	.+2306   	; 0x998 <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	73 c6       	rjmp	.+3302   	; 0xd90 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	99 c6       	rjmp	.+3378   	; 0xdf0 <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f3 c4       	rjmp	.+2534   	; 0xab4 <__vector_51>
      ce:	00 00       	nop
      d0:	1a c5       	rjmp	.+2612   	; 0xb06 <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	84 c5       	rjmp	.+2824   	; 0xbe2 <__vector_54>
      da:	00 00       	nop
      dc:	ab c5       	rjmp	.+2902   	; 0xc34 <__vector_55>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e4       	ldi	r30, 0x4C	; 76
      fc:	f6 e1       	ldi	r31, 0x16	; 22
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 32       	cpi	r26, 0x2A	; 42
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	28 e0       	ldi	r18, 0x08	; 8
     110:	aa e2       	ldi	r26, 0x2A	; 42
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 37       	cpi	r26, 0x7F	; 127
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	b6 d6       	rcall	.+3436   	; 0xe8c <main>
     120:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     126:	30 c2       	rjmp	.+1120   	; 0x588 <system_init>
     128:	08 95       	ret

0000012a <printPacket>:
			0x00,0x00,0x00,0x80,0x96,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
			0x00,0x00,0x00,0x00,0x6F,0x00,0x00,0x00,0x29,0xA8
		};

		sendPacket(packet, sizeof(packet));
	}
     12a:	8f 92       	push	r8
     12c:	9f 92       	push	r9
     12e:	af 92       	push	r10
     130:	bf 92       	push	r11
     132:	cf 92       	push	r12
     134:	df 92       	push	r13
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	00 d0       	rcall	.+0      	; 0x144 <printPacket+0x1a>
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	06 2f       	mov	r16, r22
     14a:	66 23       	and	r22, r22
     14c:	99 f1       	breq	.+102    	; 0x1b4 <printPacket+0x8a>
     14e:	e8 2e       	mov	r14, r24
     150:	f9 2e       	mov	r15, r25
     152:	10 e0       	ldi	r17, 0x00	; 0
     154:	0f 2e       	mov	r0, r31
     156:	f7 e9       	ldi	r31, 0x97	; 151
     158:	8f 2e       	mov	r8, r31
     15a:	f3 e0       	ldi	r31, 0x03	; 3
     15c:	9f 2e       	mov	r9, r31
     15e:	f0 2d       	mov	r31, r0
     160:	0f 2e       	mov	r0, r31
     162:	f9 ee       	ldi	r31, 0xE9	; 233
     164:	af 2e       	mov	r10, r31
     166:	f2 e0       	ldi	r31, 0x02	; 2
     168:	bf 2e       	mov	r11, r31
     16a:	f0 2d       	mov	r31, r0
     16c:	ce 01       	movw	r24, r28
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	6c 01       	movw	r12, r24
     172:	81 2f       	mov	r24, r17
     174:	8f 70       	andi	r24, 0x0F	; 15
     176:	31 f4       	brne	.+12     	; 0x184 <printPacket+0x5a>
     178:	9f 92       	push	r9
     17a:	8f 92       	push	r8
     17c:	42 d7       	rcall	.+3716   	; 0x1002 <printf>
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	03 c0       	rjmp	.+6      	; 0x18a <printPacket+0x60>
     184:	80 e2       	ldi	r24, 0x20	; 32
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	4f d7       	rcall	.+3742   	; 0x1028 <putchar>
     18a:	f7 01       	movw	r30, r14
     18c:	81 91       	ld	r24, Z+
     18e:	7f 01       	movw	r14, r30
     190:	1f 92       	push	r1
     192:	8f 93       	push	r24
     194:	bf 92       	push	r11
     196:	af 92       	push	r10
     198:	df 92       	push	r13
     19a:	cf 92       	push	r12
     19c:	7a d7       	rcall	.+3828   	; 0x1092 <sprintf>
     19e:	df 92       	push	r13
     1a0:	cf 92       	push	r12
     1a2:	2f d7       	rcall	.+3678   	; 0x1002 <printf>
     1a4:	1f 5f       	subi	r17, 0xFF	; 255
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	cd bf       	out	0x3d, r28	; 61
     1b0:	01 13       	cpse	r16, r17
     1b2:	df cf       	rjmp	.-66     	; 0x172 <printPacket+0x48>
     1b4:	87 e9       	ldi	r24, 0x97	; 151
     1b6:	93 e0       	ldi	r25, 0x03	; 3
     1b8:	9f 93       	push	r25
     1ba:	8f 93       	push	r24
     1bc:	22 d7       	rcall	.+3652   	; 0x1002 <printf>
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	df 90       	pop	r13
     1d6:	cf 90       	pop	r12
     1d8:	bf 90       	pop	r11
     1da:	af 90       	pop	r10
     1dc:	9f 90       	pop	r9
     1de:	8f 90       	pop	r8
     1e0:	08 95       	ret

000001e2 <sendPacket>:
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	7c 01       	movw	r14, r24
     1f2:	d6 2e       	mov	r13, r22
     1f4:	66 23       	and	r22, r22
     1f6:	69 f0       	breq	.+26     	; 0x212 <sendPacket+0x30>
     1f8:	ec 01       	movw	r28, r24
     1fa:	0f ef       	ldi	r16, 0xFF	; 255
     1fc:	06 0f       	add	r16, r22
     1fe:	10 e0       	ldi	r17, 0x00	; 0
     200:	0f 5f       	subi	r16, 0xFF	; 255
     202:	1f 4f       	sbci	r17, 0xFF	; 255
     204:	08 0f       	add	r16, r24
     206:	19 1f       	adc	r17, r25
     208:	89 91       	ld	r24, Y+
     20a:	18 d4       	rcall	.+2096   	; 0xa3c <USART_1_write>
     20c:	c0 17       	cp	r28, r16
     20e:	d1 07       	cpc	r29, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <sendPacket+0x26>
     212:	6d 2d       	mov	r22, r13
     214:	c7 01       	movw	r24, r14
     216:	89 df       	rcall	.-238    	; 0x12a <printPacket>
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	1f 91       	pop	r17
     21e:	0f 91       	pop	r16
     220:	ff 90       	pop	r15
     222:	ef 90       	pop	r14
     224:	df 90       	pop	r13
     226:	08 95       	ret

00000228 <disableNmea>:
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	e3 97       	sbiw	r28, 0x33	; 51
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	de bf       	out	0x3e, r29	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	cd bf       	out	0x3d, r28	; 61
     248:	88 e2       	ldi	r24, 0x28	; 40
     24a:	ed e2       	ldi	r30, 0x2D	; 45
     24c:	f2 e0       	ldi	r31, 0x02	; 2
     24e:	de 01       	movw	r26, r28
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	01 90       	ld	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	8a 95       	dec	r24
     258:	e1 f7       	brne	.-8      	; 0x252 <disableNmea+0x2a>
     25a:	8b e0       	ldi	r24, 0x0B	; 11
     25c:	e5 e5       	ldi	r30, 0x55	; 85
     25e:	f2 e0       	ldi	r31, 0x02	; 2
     260:	de 01       	movw	r26, r28
     262:	99 96       	adiw	r26, 0x29	; 41
     264:	01 90       	ld	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	8a 95       	dec	r24
     26a:	e1 f7       	brne	.-8      	; 0x264 <disableNmea+0x3c>
     26c:	ce 01       	movw	r24, r28
     26e:	01 96       	adiw	r24, 0x01	; 1
     270:	7c 01       	movw	r14, r24
     272:	6e 01       	movw	r12, r28
     274:	99 e2       	ldi	r25, 0x29	; 41
     276:	c9 0e       	add	r12, r25
     278:	d1 1c       	adc	r13, r1
     27a:	8e 01       	movw	r16, r28
     27c:	0e 5c       	subi	r16, 0xCE	; 206
     27e:	1f 4f       	sbci	r17, 0xFF	; 255
     280:	14 c0       	rjmp	.+40     	; 0x2aa <disableNmea+0x82>
     282:	91 91       	ld	r25, Z+
     284:	8a a9       	ldd	r24, Y+50	; 0x32
     286:	89 0f       	add	r24, r25
     288:	8a ab       	std	Y+50, r24	; 0x32
     28a:	9b a9       	ldd	r25, Y+51	; 0x33
     28c:	89 0f       	add	r24, r25
     28e:	8b ab       	std	Y+51, r24	; 0x33
     290:	e0 17       	cp	r30, r16
     292:	f1 07       	cpc	r31, r17
     294:	b1 f7       	brne	.-20     	; 0x282 <disableNmea+0x5a>
     296:	6b e0       	ldi	r22, 0x0B	; 11
     298:	ce 01       	movw	r24, r28
     29a:	89 96       	adiw	r24, 0x29	; 41
     29c:	a2 df       	rcall	.-188    	; 0x1e2 <sendPacket>
     29e:	e2 e0       	ldi	r30, 0x02	; 2
     2a0:	ee 0e       	add	r14, r30
     2a2:	f1 1c       	adc	r15, r1
     2a4:	ce 14       	cp	r12, r14
     2a6:	df 04       	cpc	r13, r15
     2a8:	51 f0       	breq	.+20     	; 0x2be <disableNmea+0x96>
     2aa:	f7 01       	movw	r30, r14
     2ac:	80 81       	ld	r24, Z
     2ae:	8f a7       	std	Y+47, r24	; 0x2f
     2b0:	81 81       	ldd	r24, Z+1	; 0x01
     2b2:	88 ab       	std	Y+48, r24	; 0x30
     2b4:	1a aa       	std	Y+50, r1	; 0x32
     2b6:	1b aa       	std	Y+51, r1	; 0x33
     2b8:	fe 01       	movw	r30, r28
     2ba:	bb 96       	adiw	r30, 0x2b	; 43
     2bc:	e2 cf       	rjmp	.-60     	; 0x282 <disableNmea+0x5a>
     2be:	e3 96       	adiw	r28, 0x33	; 51
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	ef 90       	pop	r14
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	08 95       	ret

000002dc <changeFrequency>:
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	2e 97       	sbiw	r28, 0x0e	; 14
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	8e e0       	ldi	r24, 0x0E	; 14
     2f2:	ec e7       	ldi	r30, 0x7C	; 124
     2f4:	f2 e0       	ldi	r31, 0x02	; 2
     2f6:	de 01       	movw	r26, r28
     2f8:	11 96       	adiw	r26, 0x01	; 1
     2fa:	01 90       	ld	r0, Z+
     2fc:	0d 92       	st	X+, r0
     2fe:	8a 95       	dec	r24
     300:	e1 f7       	brne	.-8      	; 0x2fa <changeFrequency+0x1e>
     302:	6e e0       	ldi	r22, 0x0E	; 14
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	6c df       	rcall	.-296    	; 0x1e2 <sendPacket>
     30a:	2e 96       	adiw	r28, 0x0e	; 14
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <disableUnnecessaryChannels>:
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	ac 97       	sbiw	r28, 0x2c	; 44
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	de bf       	out	0x3e, r29	; 62
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	8c e2       	ldi	r24, 0x2C	; 44
     332:	ea e8       	ldi	r30, 0x8A	; 138
     334:	f2 e0       	ldi	r31, 0x02	; 2
     336:	de 01       	movw	r26, r28
     338:	11 96       	adiw	r26, 0x01	; 1
     33a:	01 90       	ld	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	8a 95       	dec	r24
     340:	e1 f7       	brne	.-8      	; 0x33a <disableUnnecessaryChannels+0x1e>
     342:	6c e2       	ldi	r22, 0x2C	; 44
     344:	ce 01       	movw	r24, r28
     346:	01 96       	adiw	r24, 0x01	; 1
     348:	4c df       	rcall	.-360    	; 0x1e2 <sendPacket>
     34a:	ac 96       	adiw	r28, 0x2c	; 44
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <enableNavPvt>:
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	2b 97       	sbiw	r28, 0x0b	; 11
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	8b e0       	ldi	r24, 0x0B	; 11
     372:	e6 eb       	ldi	r30, 0xB6	; 182
     374:	f2 e0       	ldi	r31, 0x02	; 2
     376:	de 01       	movw	r26, r28
     378:	11 96       	adiw	r26, 0x01	; 1
     37a:	01 90       	ld	r0, Z+
     37c:	0d 92       	st	X+, r0
     37e:	8a 95       	dec	r24
     380:	e1 f7       	brne	.-8      	; 0x37a <enableNavPvt+0x1e>
     382:	6b e0       	ldi	r22, 0x0B	; 11
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	2c df       	rcall	.-424    	; 0x1e2 <sendPacket>
     38a:	2b 96       	adiw	r28, 0x0b	; 11
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <isGoodChecksum>:
			}
		}
	}

	bool isGoodChecksum()
	{
     39c:	ef e1       	ldi	r30, 0x1F	; 31
     39e:	f8 e0       	ldi	r31, 0x08	; 8
     3a0:	47 e7       	ldi	r20, 0x77	; 119
     3a2:	58 e0       	ldi	r21, 0x08	; 8
		unsigned char CK_A = 0;
		unsigned char CK_B = 0;
     3a4:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	bool isGoodChecksum()
	{
		unsigned char CK_A = 0;
     3a6:	80 e0       	ldi	r24, 0x00	; 0
		unsigned char CK_B = 0;

		for (int i=2; i<(2 + 4 + 84); i++)		// skip sync bytes
		{
			CK_A = CK_A + PACKETstore[i];
     3a8:	21 91       	ld	r18, Z+
     3aa:	82 0f       	add	r24, r18
			CK_B = CK_B + CK_A;
     3ac:	98 0f       	add	r25, r24
	bool isGoodChecksum()
	{
		unsigned char CK_A = 0;
		unsigned char CK_B = 0;

		for (int i=2; i<(2 + 4 + 84); i++)		// skip sync bytes
     3ae:	e4 17       	cp	r30, r20
     3b0:	f5 07       	cpc	r31, r21
     3b2:	d1 f7       	brne	.-12     	; 0x3a8 <isGoodChecksum+0xc>
		{
			CK_A = CK_A + PACKETstore[i];
			CK_B = CK_B + CK_A;
		}
		return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
     3b4:	20 91 77 08 	lds	r18, 0x0877	; 0x800877 <PACKETstore+0x5a>
     3b8:	82 13       	cpse	r24, r18
     3ba:	07 c0       	rjmp	.+14     	; 0x3ca <isGoodChecksum+0x2e>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	20 91 78 08 	lds	r18, 0x0878	; 0x800878 <PACKETstore+0x5b>
     3c2:	29 17       	cp	r18, r25
     3c4:	19 f0       	breq	.+6      	; 0x3cc <isGoodChecksum+0x30>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <isGoodChecksum+0x30>
     3ca:	80 e0       	ldi	r24, 0x00	; 0
	}
     3cc:	81 70       	andi	r24, 0x01	; 1
     3ce:	08 95       	ret

000003d0 <IsPacketReady>:

	// start/complete filling in the current packet
	int IsPacketReady(unsigned char c)
	{
		// get current position in packet
		unsigned char p = UbxGpsv.carriagePosition;
     3d0:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <__data_start+0x3>
		if (p < 4)     // this looks for PVT messages
     3d4:	e4 30       	cpi	r30, 0x04	; 4
     3d6:	70 f4       	brcc	.+28     	; 0x3f4 <IsPacketReady+0x24>
		{
			// are we starting a packet?
			if (c == UBXGPS_HEADER[p])
     3d8:	2e 2f       	mov	r18, r30
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	d9 01       	movw	r26, r18
     3de:	a6 56       	subi	r26, 0x66	; 102
     3e0:	bc 4f       	sbci	r27, 0xFC	; 252
     3e2:	9c 91       	ld	r25, X
     3e4:	89 13       	cpse	r24, r25
     3e6:	17 c0       	rjmp	.+46     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			{
				PACKETstore[p++] = c;
     3e8:	ef 5f       	subi	r30, 0xFF	; 255
     3ea:	d9 01       	movw	r26, r18
     3ec:	a3 5e       	subi	r26, 0xE3	; 227
     3ee:	b7 4f       	sbci	r27, 0xF7	; 247
     3f0:	8c 93       	st	X, r24
     3f2:	14 c0       	rjmp	.+40     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			}
		}
		else  // found a packet header, start filling
		{
			//if we are here, we've got some of the right packet.  Lets just try getting all the bytes
			if (p < (2 + 4 + 84 + 2))
     3f4:	ec 35       	cpi	r30, 0x5C	; 92
     3f6:	90 f4       	brcc	.+36     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			{
				PACKETstore[p++] = c;
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	9e 0f       	add	r25, r30
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	e3 5e       	subi	r30, 0xE3	; 227
     400:	f7 4f       	sbci	r31, 0xF7	; 247
     402:	80 83       	st	Z, r24
				if (p == (2 + 4 + 84 + 2))
     404:	9c 35       	cpi	r25, 0x5C	; 92
     406:	49 f4       	brne	.+18     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				{
					p = 0;
					UbxGpsv.carriagePosition = p;
     408:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_start+0x3>
					if(isGoodChecksum())
     40c:	c7 df       	rcall	.-114    	; 0x39c <isGoodChecksum>
     40e:	81 11       	cpse	r24, r1
			if (p < (2 + 4 + 84 + 2))
			{
				PACKETstore[p++] = c;
				if (p == (2 + 4 + 84 + 2))
				{
					p = 0;
     410:	0a c0       	rjmp	.+20     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     412:	e0 e0       	ldi	r30, 0x00	; 0
			{
				PACKETstore[p++] = c;
			}
			else
			{
				p = 0;
     414:	03 c0       	rjmp	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     416:	e0 e0       	ldi	r30, 0x00	; 0
		else  // found a packet header, start filling
		{
			//if we are here, we've got some of the right packet.  Lets just try getting all the bytes
			if (p < (2 + 4 + 84 + 2))
			{
				PACKETstore[p++] = c;
     418:	01 c0       	rjmp	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
						return true;
					}
				}
			}
		}
		UbxGpsv.carriagePosition = p;
     41a:	e9 2f       	mov	r30, r25
     41c:	e0 93 03 02 	sts	0x0203, r30	; 0x800203 <__data_start+0x3>
		return false;
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
				{
					p = 0;
					UbxGpsv.carriagePosition = p;
					if(isGoodChecksum())
					{
						return true;
     424:	08 95       	ret
     426:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}
		UbxGpsv.carriagePosition = p;
		return false;
	}
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	08 95       	ret

0000042c <processgps>:

	// Read chars from the GPS port
	// If there is a PVT packet ready, copy it to the global strct
	// **** NOTE ****  This is called from within Timer 4 Interrupt Service Routine every 4.096mS
	void processgps(void)
	{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	c1 e7       	ldi	r28, 0x71	; 113
     432:	d8 e0       	ldi	r29, 0x08	; 8
				unsigned char ch;
				ch = USART_3_read();
				USART_1_write(ch);
			}
			#endif
			if(IsPacketReady(data))
     434:	0d c0       	rjmp	.+26     	; 0x450 <processgps+0x24>
     436:	e9 d2       	rcall	.+1490   	; 0xa0a <USART_1_read>
     438:	cb df       	rcall	.-106    	; 0x3d0 <IsPacketReady>
     43a:	89 2b       	or	r24, r25
     43c:	49 f0       	breq	.+18     	; 0x450 <processgps+0x24>
     43e:	e3 e2       	ldi	r30, 0x23	; 35
     440:	f8 e0       	ldi	r31, 0x08	; 8
     442:	ad e6       	ldi	r26, 0x6D	; 109
			{
				for(unsigned int i = offset; i<sizeof(NavPvt); i++)
				{
					*((char*)(&NavPvt) + (i-offset)) = PACKETstore[i];		// copy into global struct
     444:	b7 e0       	ldi	r27, 0x07	; 7
     446:	81 91       	ld	r24, Z+
				USART_1_write(ch);
			}
			#endif
			if(IsPacketReady(data))
			{
				for(unsigned int i = offset; i<sizeof(NavPvt); i++)
     448:	8d 93       	st	X+, r24
     44a:	ec 17       	cp	r30, r28
	// **** NOTE ****  This is called from within Timer 4 Interrupt Service Routine every 4.096mS
	void processgps(void)
	{
		const unsigned char offset =6;
		unsigned char data;
		while (USART_1_is_rx_ready())
     44c:	fd 07       	cpc	r31, r29
     44e:	d9 f7       	brne	.-10     	; 0x446 <processgps+0x1a>
     450:	d5 d2       	rcall	.+1450   	; 0x9fc <USART_1_is_rx_ready>
     452:	81 11       	cpse	r24, r1
				{
					*((char*)(&NavPvt) + (i-offset)) = PACKETstore[i];		// copy into global struct
				}
			}
		}
	}
     454:	f0 cf       	rjmp	.-32     	; 0x436 <processgps+0xa>
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <setupneo>:

	void setupneo()
	{
		
		// Disabling NMEA messages by sending appropriate packets
		printf("Disabling NMEA messages...\n\r");
     45c:	8e ee       	ldi	r24, 0xEE	; 238
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	9f 93       	push	r25
     462:	8f 93       	push	r24
		disableNmea();
     464:	ce d5       	rcall	.+2972   	; 0x1002 <printf>
     466:	e0 de       	rcall	.-576    	; 0x228 <disableNmea>

			fastdelay_ms(100); // Little delay before flushing
		}
		#endif
		// 	Set reporting frequency to 1 Sec
		printf("Changing receiving frequency to 1 Sec...\n\r");
     468:	8b e0       	ldi	r24, 0x0B	; 11
     46a:	93 e0       	ldi	r25, 0x03	; 3
     46c:	9f 93       	push	r25
		changeFrequency();

		// Disabling unnecessary channels like SBAS or QZSS
		printf("Disabling unnecessary channels...\r\n");
     46e:	8f 93       	push	r24
     470:	c8 d5       	rcall	.+2960   	; 0x1002 <printf>
     472:	34 df       	rcall	.-408    	; 0x2dc <changeFrequency>
		disableUnnecessaryChannels();

		// Enabling NAV-PVT messages
		printf("Enabling NAV-PVT messages...\n\r");
     474:	86 e3       	ldi	r24, 0x36	; 54
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	dc d5       	rcall	.+3000   	; 0x1032 <puts>
     47a:	50 df       	rcall	.-352    	; 0x31c <disableUnnecessaryChannels>
     47c:	89 e5       	ldi	r24, 0x59	; 89
		enableNavPvt();
     47e:	93 e0       	ldi	r25, 0x03	; 3

		printf("Auto-configuration is complete!\n\r");
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	be d5       	rcall	.+2940   	; 0x1002 <printf>
     486:	6a df       	rcall	.-300    	; 0x35c <enableNavPvt>
     488:	88 e7       	ldi	r24, 0x78	; 120
     48a:	93 e0       	ldi	r25, 0x03	; 3

		fastdelay_ms(100); // Little delay before flushing
     48c:	9f 93       	push	r25
     48e:	8f 93       	push	r24
     490:	b8 d5       	rcall	.+2928   	; 0x1002 <printf>
     492:	84 e6       	ldi	r24, 0x64	; 100
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	4c d4       	rcall	.+2200   	; 0xd30 <fastdelay_ms>
     498:	8d b7       	in	r24, 0x3d	; 61
     49a:	9e b7       	in	r25, 0x3e	; 62
     49c:	08 96       	adiw	r24, 0x08	; 8
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	9e bf       	out	0x3e, r25	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	8d bf       	out	0x3d, r24	; 61
     4a8:	08 95       	ret

000004aa <setndig>:
	return(i);
}

// write a number digit on the LCD to a num object
void setndig(char *id, uint8_t val)
{
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	60 97       	sbiw	r28, 0x10	; 16
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
	int i;
	char msg[16];
	
	sprintf(msg,"%s.val=%1d\xff\xff\xff",id,val);
     4c2:	1f 92       	push	r1
     4c4:	6f 93       	push	r22
     4c6:	9f 93       	push	r25
     4c8:	8f 93       	push	r24
     4ca:	8e e9       	ldi	r24, 0x9E	; 158
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	9f 93       	push	r25
     4d0:	8f 93       	push	r24
     4d2:	ce 01       	movw	r24, r28
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	9f 93       	push	r25
     4d8:	8f 93       	push	r24
     4da:	db d5       	rcall	.+2998   	; 0x1092 <sprintf>
	for (i=0; msg[i]; i++)
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	88 23       	and	r24, r24
     4ea:	49 f0       	breq	.+18     	; 0x4fe <setndig+0x54>
     4ec:	8e 01       	movw	r16, r28
     4ee:	0e 5f       	subi	r16, 0xFE	; 254
	{
		USART_2_write(msg[i]);
     4f0:	1f 4f       	sbci	r17, 0xFF	; 255
     4f2:	3b d3       	rcall	.+1654   	; 0xb6a <USART_2_write>
{
	int i;
	char msg[16];
	
	sprintf(msg,"%s.val=%1d\xff\xff\xff",id,val);
	for (i=0; msg[i]; i++)
     4f4:	f8 01       	movw	r30, r16
     4f6:	81 91       	ld	r24, Z+
     4f8:	8f 01       	movw	r16, r30
     4fa:	81 11       	cpse	r24, r1
     4fc:	fa cf       	rjmp	.-12     	; 0x4f2 <setndig+0x48>
	{
		USART_2_write(msg[i]);
	}
}
     4fe:	60 96       	adiw	r28, 0x10	; 16
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	08 95       	ret

00000514 <SPI_0_initialization>:
}

void TIMER_1_initialization(void)
{

	TIMER_1_init();
     514:	23 98       	cbi	0x04, 3	; 4
     516:	2b 98       	cbi	0x05, 3	; 5
     518:	22 9a       	sbi	0x04, 2	; 4
     51a:	2a 98       	cbi	0x05, 2	; 5
     51c:	21 9a       	sbi	0x04, 1	; 4
     51e:	29 98       	cbi	0x05, 1	; 5
     520:	20 9a       	sbi	0x04, 0	; 4
     522:	28 98       	cbi	0x05, 0	; 5
     524:	12 c1       	rjmp	.+548    	; 0x74a <SPI_0_init>
     526:	08 95       	ret

00000528 <USART_0_initialization>:
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
     528:	68 98       	cbi	0x0d, 0	; 13
		DDRE &= ~(1 << pin);

		PORTE |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTE &= ~(1 << pin);
     52a:	70 98       	cbi	0x0e, 0	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
     52c:	69 9a       	sbi	0x0d, 1	; 13
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     52e:	71 98       	cbi	0x0e, 1	; 14
     530:	ed c1       	rjmp	.+986    	; 0x90c <USART_0_init>
     532:	08 95       	ret

00000534 <USART_1_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     534:	52 98       	cbi	0x0a, 2	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     536:	5a 98       	cbi	0x0b, 2	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     538:	53 9a       	sbi	0x0a, 3	; 10
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_1_init();
     53a:	5b 98       	cbi	0x0b, 3	; 11
     53c:	9e c2       	rjmp	.+1340   	; 0xa7a <USART_1_init>
     53e:	08 95       	ret

00000540 <USART_2_initialization>:
 */
static inline void PORTH_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
     540:	a1 e0       	ldi	r26, 0x01	; 1
     542:	b1 e0       	ldi	r27, 0x01	; 1
     544:	8c 91       	ld	r24, X
     546:	8e 7f       	andi	r24, 0xFE	; 254
     548:	8c 93       	st	X, r24
		DDRH &= ~(1 << pin);

		PORTH |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTH &= ~(1 << pin);
     54a:	e2 e0       	ldi	r30, 0x02	; 2
     54c:	f1 e0       	ldi	r31, 0x01	; 1
     54e:	80 81       	ld	r24, Z
     550:	8e 7f       	andi	r24, 0xFE	; 254
     552:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRH |= 1 << pin;
     554:	8c 91       	ld	r24, X
     556:	82 60       	ori	r24, 0x02	; 2
     558:	8c 93       	st	X, r24
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
     55a:	80 81       	ld	r24, Z
     55c:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_2_init();
     55e:	80 83       	st	Z, r24
     560:	23 c3       	rjmp	.+1606   	; 0xba8 <USART_2_init>
     562:	08 95       	ret

00000564 <USART_3_initialization>:
 */
static inline void PORTJ_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
     564:	a4 e0       	ldi	r26, 0x04	; 4
     566:	b1 e0       	ldi	r27, 0x01	; 1
     568:	8c 91       	ld	r24, X
     56a:	8e 7f       	andi	r24, 0xFE	; 254
     56c:	8c 93       	st	X, r24
		DDRJ &= ~(1 << pin);

		PORTJ |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTJ &= ~(1 << pin);
     56e:	e5 e0       	ldi	r30, 0x05	; 5
     570:	f1 e0       	ldi	r31, 0x01	; 1
     572:	80 81       	ld	r24, Z
     574:	8e 7f       	andi	r24, 0xFE	; 254
     576:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRJ |= 1 << pin;
     578:	8c 91       	ld	r24, X
     57a:	82 60       	ori	r24, 0x02	; 2
     57c:	8c 93       	st	X, r24
static inline void PORTJ_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTJ |= 1 << pin;
	} else {
		PORTJ &= ~(1 << pin);
     57e:	80 81       	ld	r24, Z
     580:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_3_init();
     582:	80 83       	st	Z, r24
     584:	a8 c3       	rjmp	.+1872   	; 0xcd6 <USART_3_init>
     586:	08 95       	ret

00000588 <system_init>:
     588:	8f e3       	ldi	r24, 0x3F	; 63
     58a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
     58e:	8f ee       	ldi	r24, 0xEF	; 239
     590:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     594:	81 b1       	in	r24, 0x01	; 1
     596:	11 b8       	out	0x01, r1	; 1
     598:	82 b1       	in	r24, 0x02	; 2
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	82 b9       	out	0x02, r24	; 2
     59e:	94 b1       	in	r25, 0x04	; 4
     5a0:	14 b8       	out	0x04, r1	; 4
     5a2:	95 b1       	in	r25, 0x05	; 5
     5a4:	85 b9       	out	0x05, r24	; 5
     5a6:	97 b1       	in	r25, 0x07	; 7
     5a8:	17 b8       	out	0x07, r1	; 7
     5aa:	98 b1       	in	r25, 0x08	; 8
     5ac:	88 b9       	out	0x08, r24	; 8
     5ae:	9a b1       	in	r25, 0x0a	; 10
     5b0:	1a b8       	out	0x0a, r1	; 10
     5b2:	9b b1       	in	r25, 0x0b	; 11
     5b4:	8b b9       	out	0x0b, r24	; 11
     5b6:	9d b1       	in	r25, 0x0d	; 13
     5b8:	1d b8       	out	0x0d, r1	; 13
     5ba:	9e b1       	in	r25, 0x0e	; 14
     5bc:	8e b9       	out	0x0e, r24	; 14
     5be:	90 b3       	in	r25, 0x10	; 16
     5c0:	10 ba       	out	0x10, r1	; 16
     5c2:	91 b3       	in	r25, 0x11	; 17
     5c4:	81 bb       	out	0x11, r24	; 17
     5c6:	93 b3       	in	r25, 0x13	; 19
     5c8:	90 7c       	andi	r25, 0xC0	; 192
     5ca:	93 bb       	out	0x13, r25	; 19
     5cc:	94 b3       	in	r25, 0x14	; 20
     5ce:	9f 63       	ori	r25, 0x3F	; 63
     5d0:	94 bb       	out	0x14, r25	; 20
     5d2:	e1 e0       	ldi	r30, 0x01	; 1
     5d4:	f1 e0       	ldi	r31, 0x01	; 1
     5d6:	90 81       	ld	r25, Z
     5d8:	10 82       	st	Z, r1
     5da:	e2 e0       	ldi	r30, 0x02	; 2
     5dc:	f1 e0       	ldi	r31, 0x01	; 1
     5de:	90 81       	ld	r25, Z
     5e0:	80 83       	st	Z, r24
     5e2:	e4 e0       	ldi	r30, 0x04	; 4
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	90 81       	ld	r25, Z
     5e8:	10 82       	st	Z, r1
     5ea:	e5 e0       	ldi	r30, 0x05	; 5
     5ec:	f1 e0       	ldi	r31, 0x01	; 1
     5ee:	90 81       	ld	r25, Z
     5f0:	80 83       	st	Z, r24
     5f2:	e7 e0       	ldi	r30, 0x07	; 7
     5f4:	f1 e0       	ldi	r31, 0x01	; 1
     5f6:	90 81       	ld	r25, Z
     5f8:	10 82       	st	Z, r1
     5fa:	e8 e0       	ldi	r30, 0x08	; 8
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	90 81       	ld	r25, Z
     600:	80 83       	st	Z, r24
     602:	aa e0       	ldi	r26, 0x0A	; 10
     604:	b1 e0       	ldi	r27, 0x01	; 1
     606:	9c 91       	ld	r25, X
     608:	1c 92       	st	X, r1
     60a:	eb e0       	ldi	r30, 0x0B	; 11
     60c:	f1 e0       	ldi	r31, 0x01	; 1
     60e:	90 81       	ld	r25, Z
     610:	80 83       	st	Z, r24
     612:	0a 9a       	sbi	0x01, 2	; 1
     614:	12 98       	cbi	0x02, 2	; 2
     616:	0b 9a       	sbi	0x01, 3	; 1
     618:	13 98       	cbi	0x02, 3	; 2
     61a:	0c 9a       	sbi	0x01, 4	; 1
     61c:	14 98       	cbi	0x02, 4	; 2
     61e:	0d 9a       	sbi	0x01, 5	; 1
     620:	15 98       	cbi	0x02, 5	; 2
     622:	0e 9a       	sbi	0x01, 6	; 1
     624:	16 98       	cbi	0x02, 6	; 2
     626:	0f 9a       	sbi	0x01, 7	; 1
     628:	17 98       	cbi	0x02, 7	; 2
     62a:	38 98       	cbi	0x07, 0	; 7
     62c:	40 98       	cbi	0x08, 0	; 8
     62e:	39 98       	cbi	0x07, 1	; 7
     630:	41 98       	cbi	0x08, 1	; 8
     632:	3a 98       	cbi	0x07, 2	; 7
     634:	42 98       	cbi	0x08, 2	; 8
     636:	3b 98       	cbi	0x07, 3	; 7
     638:	43 98       	cbi	0x08, 3	; 8
     63a:	3c 98       	cbi	0x07, 4	; 7
     63c:	44 98       	cbi	0x08, 4	; 8
     63e:	3d 98       	cbi	0x07, 5	; 7
     640:	45 98       	cbi	0x08, 5	; 8
     642:	3e 98       	cbi	0x07, 6	; 7
     644:	46 98       	cbi	0x08, 6	; 8
     646:	3f 98       	cbi	0x07, 7	; 7
     648:	47 98       	cbi	0x08, 7	; 8
     64a:	8c 91       	ld	r24, X
     64c:	81 60       	ori	r24, 0x01	; 1
     64e:	8c 93       	st	X, r24
     650:	80 81       	ld	r24, Z
     652:	8e 7f       	andi	r24, 0xFE	; 254
     654:	80 83       	st	Z, r24
     656:	8c 91       	ld	r24, X
     658:	82 60       	ori	r24, 0x02	; 2
     65a:	8c 93       	st	X, r24
     65c:	80 81       	ld	r24, Z
     65e:	82 60       	ori	r24, 0x02	; 2
     660:	80 83       	st	Z, r24
     662:	8c 91       	ld	r24, X
     664:	84 60       	ori	r24, 0x04	; 4
     666:	8c 93       	st	X, r24
     668:	80 81       	ld	r24, Z
     66a:	84 60       	ori	r24, 0x04	; 4
     66c:	80 83       	st	Z, r24
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	60 e8       	ldi	r22, 0x80	; 128
     672:	81 e6       	ldi	r24, 0x61	; 97
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	61 d0       	rcall	.+194    	; 0x73a <protected_write_io>
     678:	13 be       	out	0x33, r1	; 51
     67a:	15 be       	out	0x35, r1	; 53
     67c:	58 d0       	rcall	.+176    	; 0x72e <FLASH_0_init>
     67e:	4a df       	rcall	.-364    	; 0x514 <SPI_0_initialization>
     680:	cb d0       	rcall	.+406    	; 0x818 <TIMER_0_init>
     682:	d7 d0       	rcall	.+430    	; 0x832 <TIMER_1_init>
     684:	51 df       	rcall	.-350    	; 0x528 <USART_0_initialization>
     686:	56 df       	rcall	.-340    	; 0x534 <USART_1_initialization>
     688:	5b df       	rcall	.-330    	; 0x540 <USART_2_initialization>
     68a:	6c cf       	rjmp	.-296    	; 0x564 <USART_3_initialization>
     68c:	08 95       	ret

0000068e <__vector_30>:
 *
 * \return Nothing.
 */
void FLASH_0_register_callback(eeprom_write_done_cb_t f)
{
	FLASH_0_desc.cb = f;
     68e:	1f 92       	push	r1
     690:	0f 92       	push	r0
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	0f 92       	push	r0
     696:	11 24       	eor	r1, r1
     698:	0b b6       	in	r0, 0x3b	; 59
     69a:	0f 92       	push	r0
     69c:	2f 93       	push	r18
     69e:	3f 93       	push	r19
     6a0:	4f 93       	push	r20
     6a2:	5f 93       	push	r21
     6a4:	6f 93       	push	r22
     6a6:	7f 93       	push	r23
     6a8:	8f 93       	push	r24
     6aa:	9f 93       	push	r25
     6ac:	af 93       	push	r26
     6ae:	bf 93       	push	r27
     6b0:	ef 93       	push	r30
     6b2:	ff 93       	push	r31
     6b4:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <__data_end+0x5>
     6b8:	81 11       	cpse	r24, r1
     6ba:	0e c0       	rjmp	.+28     	; 0x6d8 <__vector_30+0x4a>
     6bc:	ea e2       	ldi	r30, 0x2A	; 42
     6be:	f4 e0       	ldi	r31, 0x04	; 4
     6c0:	10 82       	st	Z, r1
     6c2:	fb 98       	cbi	0x1f, 3	; 31
     6c4:	86 81       	ldd	r24, Z+6	; 0x06
     6c6:	97 81       	ldd	r25, Z+7	; 0x07
     6c8:	89 2b       	or	r24, r25
     6ca:	f1 f0       	breq	.+60     	; 0x708 <__vector_30+0x7a>
     6cc:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <__data_end+0x6>
     6d0:	f0 91 31 04 	lds	r31, 0x0431	; 0x800431 <__data_end+0x7>
     6d4:	19 95       	eicall
     6d6:	18 c0       	rjmp	.+48     	; 0x708 <__vector_30+0x7a>
     6d8:	ea e2       	ldi	r30, 0x2A	; 42
     6da:	f4 e0       	ldi	r31, 0x04	; 4
     6dc:	81 81       	ldd	r24, Z+1	; 0x01
     6de:	92 81       	ldd	r25, Z+2	; 0x02
     6e0:	9c 01       	movw	r18, r24
     6e2:	2f 5f       	subi	r18, 0xFF	; 255
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	32 83       	std	Z+2, r19	; 0x02
     6e8:	21 83       	std	Z+1, r18	; 0x01
     6ea:	92 bd       	out	0x22, r25	; 34
     6ec:	81 bd       	out	0x21, r24	; 33
     6ee:	a3 81       	ldd	r26, Z+3	; 0x03
     6f0:	b4 81       	ldd	r27, Z+4	; 0x04
     6f2:	cd 01       	movw	r24, r26
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	94 83       	std	Z+4, r25	; 0x04
     6f8:	83 83       	std	Z+3, r24	; 0x03
     6fa:	8c 91       	ld	r24, X
     6fc:	80 bd       	out	0x20, r24	; 32
     6fe:	85 81       	ldd	r24, Z+5	; 0x05
     700:	81 50       	subi	r24, 0x01	; 1
     702:	85 83       	std	Z+5, r24	; 0x05
     704:	fa 9a       	sbi	0x1f, 2	; 31
     706:	f9 9a       	sbi	0x1f, 1	; 31
     708:	ff 91       	pop	r31
     70a:	ef 91       	pop	r30
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	7f 91       	pop	r23
     716:	6f 91       	pop	r22
     718:	5f 91       	pop	r21
     71a:	4f 91       	pop	r20
     71c:	3f 91       	pop	r19
     71e:	2f 91       	pop	r18
     720:	0f 90       	pop	r0
     722:	0b be       	out	0x3b, r0	; 59
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <FLASH_0_init>:
	//		 | 0 << RWWSRE /* Read-While-Write Section Enable: disabled */
	//		 | 0 << SIGRD /* Signature Row Read: disabled */
	//		 | 0 << RWWSB /* Read-While-Write Busy: disabled */
	//		 | 0 << SPMIE; /* SPM Interrupt Enable: disabled */

	FLASH_0_desc.cb = NULL;
     72e:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__data_end+0x7>
     732:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__data_end+0x6>
	return 0;
}
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	08 95       	ret

0000073a <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     73a:	2f b7       	in	r18, 0x3f	; 63
	cli
     73c:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     73e:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     740:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     742:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     744:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     746:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     748:	08 95       	ret

0000074a <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
     74a:	e4 e6       	ldi	r30, 0x64	; 100
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	8b 7f       	andi	r24, 0xFB	; 251
     752:	80 83       	st	Z, r24
     754:	81 e5       	ldi	r24, 0x51	; 81
     756:	8c bd       	out	0x2c, r24	; 44
     758:	e2 e3       	ldi	r30, 0x32	; 50
     75a:	f4 e0       	ldi	r31, 0x04	; 4
     75c:	10 82       	st	Z, r1
     75e:	16 82       	std	Z+6, r1	; 0x06
     760:	15 82       	std	Z+5, r1	; 0x05
     762:	08 95       	ret

00000764 <__vector_24>:
}

ISR(SPI_STC_vect)
{
     764:	1f 92       	push	r1
     766:	0f 92       	push	r0
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	0f 92       	push	r0
     76c:	11 24       	eor	r1, r1
     76e:	0b b6       	in	r0, 0x3b	; 59
     770:	0f 92       	push	r0
     772:	2f 93       	push	r18
     774:	3f 93       	push	r19
     776:	4f 93       	push	r20
     778:	5f 93       	push	r21
     77a:	6f 93       	push	r22
     77c:	7f 93       	push	r23
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ef 93       	push	r30
     78c:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
     78e:	9e b5       	in	r25, 0x2e	; 46
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
     790:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <SPI_0_desc+0x4>
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	11 f1       	breq	.+68     	; 0x7dc <__vector_24+0x78>
		*SPI_0_desc.data = rdata;
     798:	c2 e3       	ldi	r28, 0x32	; 50
     79a:	d4 e0       	ldi	r29, 0x04	; 4
     79c:	a9 81       	ldd	r26, Y+1	; 0x01
     79e:	ba 81       	ldd	r27, Y+2	; 0x02
     7a0:	fd 01       	movw	r30, r26
     7a2:	91 93       	st	Z+, r25
	}

	SPI_0_desc.data++;
     7a4:	fa 83       	std	Y+2, r31	; 0x02
     7a6:	e9 83       	std	Y+1, r30	; 0x01

	if (SPI_0_desc.type != SPI_READ)
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	19 f0       	breq	.+6      	; 0x7b2 <__vector_24+0x4e>
		wdata = *SPI_0_desc.data;
     7ac:	11 96       	adiw	r26, 0x01	; 1
     7ae:	9c 91       	ld	r25, X
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <__vector_24+0x50>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
	uint8_t wdata = 0;
     7b2:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
     7b4:	e2 e3       	ldi	r30, 0x32	; 50
     7b6:	f4 e0       	ldi	r31, 0x04	; 4
     7b8:	83 81       	ldd	r24, Z+3	; 0x03
     7ba:	81 50       	subi	r24, 0x01	; 1
     7bc:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
     7be:	88 23       	and	r24, r24
     7c0:	11 f0       	breq	.+4      	; 0x7c6 <__vector_24+0x62>
		// more data to send, send a byte
		SPDR = wdata;
     7c2:	9e bd       	out	0x2e, r25	; 46
     7c4:	14 c0       	rjmp	.+40     	; 0x7ee <__vector_24+0x8a>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
     7c6:	e2 e3       	ldi	r30, 0x32	; 50
     7c8:	f4 e0       	ldi	r31, 0x04	; 4
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
     7ce:	05 80       	ldd	r0, Z+5	; 0x05
     7d0:	f6 81       	ldd	r31, Z+6	; 0x06
     7d2:	e0 2d       	mov	r30, r0
     7d4:	30 97       	sbiw	r30, 0x00	; 0
     7d6:	59 f0       	breq	.+22     	; 0x7ee <__vector_24+0x8a>
			SPI_0_desc.cb();
     7d8:	19 95       	eicall
		}
	}
}
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__vector_24+0x8a>
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
		*SPI_0_desc.data = rdata;
	}

	SPI_0_desc.data++;
     7dc:	e2 e3       	ldi	r30, 0x32	; 50
     7de:	f4 e0       	ldi	r31, 0x04	; 4
     7e0:	a1 81       	ldd	r26, Z+1	; 0x01
     7e2:	b2 81       	ldd	r27, Z+2	; 0x02
     7e4:	cd 01       	movw	r24, r26
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	92 83       	std	Z+2, r25	; 0x02
     7ea:	81 83       	std	Z+1, r24	; 0x01
     7ec:	df cf       	rjmp	.-66     	; 0x7ac <__vector_24+0x48>
		SPI_0_desc.status = SPI_DONE;
		if (SPI_0_desc.cb != NULL) {
			SPI_0_desc.cb();
		}
	}
}
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	bf 91       	pop	r27
     7f8:	af 91       	pop	r26
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	7f 91       	pop	r23
     800:	6f 91       	pop	r22
     802:	5f 91       	pop	r21
     804:	4f 91       	pop	r20
     806:	3f 91       	pop	r19
     808:	2f 91       	pop	r18
     80a:	0f 90       	pop	r0
     80c:	0b be       	out	0x3b, r0	; 59
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC4 */
	PRR1 &= ~(1 << PRTIM4);
     818:	e5 e6       	ldi	r30, 0x65	; 101
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	8f 7e       	andi	r24, 0xEF	; 239
     820:	80 83       	st	Z, r24

	// TCCR4A = (0 << COM4A1) | (0 << COM4A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM4B1) | (0 << COM4B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM41) | (0 << WGM40); /* TC16 Mode 0 Normal */

	TCCR4B = (0 << WGM43) | (0 << WGM42)                /* TC16 Mode 0 Normal */
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

	// OCR4A = 0; /* Output compare A: 0 */

	// OCR4B = 0; /* Output compare B: 0 */

	TIMSK4 = 0 << OCIE4B   /* Output Compare B Match Interrupt Enable: disabled */
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	         | 1 << OCIE4A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE4  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE4; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	08 95       	ret

00000832 <TIMER_1_init>:
 */
int8_t TIMER_1_init()
{

	/* Enable TC5 */
	PRR1 &= ~(1 << PRTIM5);
     832:	e5 e6       	ldi	r30, 0x65	; 101
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	8f 7d       	andi	r24, 0xDF	; 223
     83a:	80 83       	st	Z, r24

	// TCCR5A = (0 << COM5A1) | (0 << COM5A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM5B1) | (0 << COM5B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM51) | (0 << WGM50); /* TC16 Mode 0 Normal */

	TCCR5B = (0 << WGM53) | (0 << WGM52)                /* TC16 Mode 0 Normal */
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
	         | 0 << ICES5                               /* Input Capture Edge Select: disabled */
	         | (0 << CS52) | (0 << CS51) | (1 << CS50); /* No prescaling */

	// ICR5 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR5A = 16000; /* Output compare A: 16000 */
     842:	80 e8       	ldi	r24, 0x80	; 128
     844:	9e e3       	ldi	r25, 0x3E	; 62
     846:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     84a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

	// OCR5B = 0; /* Output compare B: 0 */

	TIMSK5 = 0 << OCIE5B   /* Output Compare B Match Interrupt Enable: disabled */
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
	         | 1 << OCIE5A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE5  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE5; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	08 95       	ret

00000858 <__vector_25>:
	USART_3_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_3_rxbuf[tmptail];
}
     858:	1f 92       	push	r1
     85a:	0f 92       	push	r0
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	0f 92       	push	r0
     860:	11 24       	eor	r1, r1
     862:	0b b6       	in	r0, 0x3b	; 59
     864:	0f 92       	push	r0
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
     86e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     872:	e0 91 60 06 	lds	r30, 0x0660	; 0x800660 <USART_0_rx_head>
     876:	ef 5f       	subi	r30, 0xFF	; 255
     878:	e0 93 60 06 	sts	0x0660, r30	; 0x800660 <USART_0_rx_head>
     87c:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <USART_0_rx_tail>
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	ef 59       	subi	r30, 0x9F	; 159
     884:	f9 4f       	sbci	r31, 0xF9	; 249
     886:	80 83       	st	Z, r24
     888:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <USART_0_rx_elements>
     88c:	8f 5f       	subi	r24, 0xFF	; 255
     88e:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <USART_0_rx_elements>
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	9f 91       	pop	r25
     898:	8f 91       	pop	r24
     89a:	0f 90       	pop	r0
     89c:	0b be       	out	0x3b, r0	; 59
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <__vector_26>:
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	0b b6       	in	r0, 0x3b	; 59
     8b4:	0f 92       	push	r0
     8b6:	8f 93       	push	r24
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31
     8bc:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <USART_0_tx_elements>
     8c0:	88 23       	and	r24, r24
     8c2:	89 f0       	breq	.+34     	; 0x8e6 <__vector_26+0x3e>
     8c4:	e0 91 4c 06 	lds	r30, 0x064C	; 0x80064c <USART_0_tx_tail>
     8c8:	ef 5f       	subi	r30, 0xFF	; 255
     8ca:	ef 70       	andi	r30, 0x0F	; 15
     8cc:	e0 93 4c 06 	sts	0x064C, r30	; 0x80064c <USART_0_tx_tail>
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	e2 5b       	subi	r30, 0xB2	; 178
     8d4:	f9 4f       	sbci	r31, 0xF9	; 249
     8d6:	80 81       	ld	r24, Z
     8d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     8dc:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <USART_0_tx_elements>
     8e0:	81 50       	subi	r24, 0x01	; 1
     8e2:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <USART_0_tx_elements>
     8e6:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <USART_0_tx_elements>
     8ea:	81 11       	cpse	r24, r1
     8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <__vector_26+0x50>
     8ee:	e1 ec       	ldi	r30, 0xC1	; 193
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	8f 7d       	andi	r24, 0xDF	; 223
     8f6:	80 83       	st	Z, r24
     8f8:	ff 91       	pop	r31
     8fa:	ef 91       	pop	r30
     8fc:	8f 91       	pop	r24
     8fe:	0f 90       	pop	r0
     900:	0b be       	out	0x3b, r0	; 59
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <USART_0_init>:
     90c:	e4 e6       	ldi	r30, 0x64	; 100
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	8d 7f       	andi	r24, 0xFD	; 253
     914:	80 83       	st	Z, r24
     916:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     91a:	87 e6       	ldi	r24, 0x67	; 103
     91c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     920:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     924:	88 e9       	ldi	r24, 0x98	; 152
     926:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     92a:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <USART_0_rx_tail>
     92e:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <USART_0_rx_head>
     932:	10 92 5e 06 	sts	0x065E, r1	; 0x80065e <USART_0_rx_elements>
     936:	10 92 4c 06 	sts	0x064C, r1	; 0x80064c <USART_0_tx_tail>
     93a:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <USART_0_tx_head>
     93e:	10 92 4b 06 	sts	0x064B, r1	; 0x80064b <USART_0_tx_elements>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	08 95       	ret

00000946 <__vector_36>:
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	0b b6       	in	r0, 0x3b	; 59
     952:	0f 92       	push	r0
     954:	8f 93       	push	r24
     956:	9f 93       	push	r25
     958:	ef 93       	push	r30
     95a:	ff 93       	push	r31
     95c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     960:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <USART_1_rx_head>
     964:	ef 5f       	subi	r30, 0xFF	; 255
     966:	ef 77       	andi	r30, 0x7F	; 127
     968:	e0 93 ca 05 	sts	0x05CA, r30	; 0x8005ca <USART_1_rx_head>
     96c:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <USART_1_rx_tail>
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	e5 53       	subi	r30, 0x35	; 53
     974:	fa 4f       	sbci	r31, 0xFA	; 250
     976:	80 83       	st	Z, r24
     978:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <USART_1_rx_elements>
     97c:	8f 5f       	subi	r24, 0xFF	; 255
     97e:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <USART_1_rx_elements>
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	0f 90       	pop	r0
     98c:	0b be       	out	0x3b, r0	; 59
     98e:	0f 90       	pop	r0
     990:	0f be       	out	0x3f, r0	; 63
     992:	0f 90       	pop	r0
     994:	1f 90       	pop	r1
     996:	18 95       	reti

00000998 <__vector_37>:
     998:	1f 92       	push	r1
     99a:	0f 92       	push	r0
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	0f 92       	push	r0
     9a0:	11 24       	eor	r1, r1
     9a2:	0b b6       	in	r0, 0x3b	; 59
     9a4:	0f 92       	push	r0
     9a6:	8f 93       	push	r24
     9a8:	ef 93       	push	r30
     9aa:	ff 93       	push	r31
     9ac:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <USART_1_tx_elements>
     9b0:	88 23       	and	r24, r24
     9b2:	89 f0       	breq	.+34     	; 0x9d6 <__vector_37+0x3e>
     9b4:	e0 91 b6 05 	lds	r30, 0x05B6	; 0x8005b6 <USART_1_tx_tail>
     9b8:	ef 5f       	subi	r30, 0xFF	; 255
     9ba:	ef 70       	andi	r30, 0x0F	; 15
     9bc:	e0 93 b6 05 	sts	0x05B6, r30	; 0x8005b6 <USART_1_tx_tail>
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	e8 54       	subi	r30, 0x48	; 72
     9c4:	fa 4f       	sbci	r31, 0xFA	; 250
     9c6:	80 81       	ld	r24, Z
     9c8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     9cc:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <USART_1_tx_elements>
     9d0:	81 50       	subi	r24, 0x01	; 1
     9d2:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <USART_1_tx_elements>
     9d6:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <USART_1_tx_elements>
     9da:	81 11       	cpse	r24, r1
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <__vector_37+0x50>
     9de:	e9 ec       	ldi	r30, 0xC9	; 201
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	8f 7d       	andi	r24, 0xDF	; 223
     9e6:	80 83       	st	Z, r24
     9e8:	ff 91       	pop	r31
     9ea:	ef 91       	pop	r30
     9ec:	8f 91       	pop	r24
     9ee:	0f 90       	pop	r0
     9f0:	0b be       	out	0x3b, r0	; 59
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <USART_1_is_rx_ready>:
     9fc:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <USART_1_rx_elements>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	91 11       	cpse	r25, r1
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <USART_1_is_rx_ready+0xc>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	08 95       	ret

00000a0a <USART_1_read>:
     a0a:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <USART_1_rx_elements>
     a0e:	88 23       	and	r24, r24
     a10:	e1 f3       	breq	.-8      	; 0xa0a <USART_1_read>
     a12:	e0 91 c9 05 	lds	r30, 0x05C9	; 0x8005c9 <USART_1_rx_tail>
     a16:	ef 5f       	subi	r30, 0xFF	; 255
     a18:	ef 77       	andi	r30, 0x7F	; 127
     a1a:	e0 93 c9 05 	sts	0x05C9, r30	; 0x8005c9 <USART_1_rx_tail>
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	0f 92       	push	r0
     a24:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <USART_1_rx_elements>
     a28:	81 50       	subi	r24, 0x01	; 1
     a2a:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <USART_1_rx_elements>
     a2e:	0f 90       	pop	r0
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	e5 53       	subi	r30, 0x35	; 53
     a36:	fa 4f       	sbci	r31, 0xFA	; 250
     a38:	80 81       	ld	r24, Z
     a3a:	08 95       	ret

00000a3c <USART_1_write>:
     a3c:	20 91 b7 05 	lds	r18, 0x05B7	; 0x8005b7 <USART_1_tx_head>
     a40:	2f 5f       	subi	r18, 0xFF	; 255
     a42:	2f 70       	andi	r18, 0x0F	; 15
     a44:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <USART_1_tx_elements>
     a48:	90 31       	cpi	r25, 0x10	; 16
     a4a:	e1 f3       	breq	.-8      	; 0xa44 <USART_1_write+0x8>
     a4c:	e2 2f       	mov	r30, r18
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	e8 54       	subi	r30, 0x48	; 72
     a52:	fa 4f       	sbci	r31, 0xFA	; 250
     a54:	80 83       	st	Z, r24
     a56:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <USART_1_tx_head>
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	0f 92       	push	r0
     a60:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <USART_1_tx_elements>
     a64:	8f 5f       	subi	r24, 0xFF	; 255
     a66:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <USART_1_tx_elements>
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	e9 ec       	ldi	r30, 0xC9	; 201
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	80 62       	ori	r24, 0x20	; 32
     a76:	80 83       	st	Z, r24
     a78:	08 95       	ret

00000a7a <USART_1_init>:
     a7a:	e5 e6       	ldi	r30, 0x65	; 101
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	8e 7f       	andi	r24, 0xFE	; 254
     a82:	80 83       	st	Z, r24
     a84:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     a88:	87 e6       	ldi	r24, 0x67	; 103
     a8a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     a8e:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     a92:	88 e9       	ldi	r24, 0x98	; 152
     a94:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     a98:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <USART_1_rx_tail>
     a9c:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <USART_1_rx_head>
     aa0:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <USART_1_rx_elements>
     aa4:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <USART_1_tx_tail>
     aa8:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <USART_1_tx_head>
     aac:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <USART_1_tx_elements>
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	08 95       	ret

00000ab4 <__vector_51>:
     ab4:	1f 92       	push	r1
     ab6:	0f 92       	push	r0
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	0f 92       	push	r0
     abc:	11 24       	eor	r1, r1
     abe:	0b b6       	in	r0, 0x3b	; 59
     ac0:	0f 92       	push	r0
     ac2:	8f 93       	push	r24
     ac4:	9f 93       	push	r25
     ac6:	ef 93       	push	r30
     ac8:	ff 93       	push	r31
     aca:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     ace:	e0 91 94 05 	lds	r30, 0x0594	; 0x800594 <USART_2_rx_head>
     ad2:	ef 5f       	subi	r30, 0xFF	; 255
     ad4:	ef 71       	andi	r30, 0x1F	; 31
     ad6:	e0 93 94 05 	sts	0x0594, r30	; 0x800594 <USART_2_rx_head>
     ada:	90 91 93 05 	lds	r25, 0x0593	; 0x800593 <USART_2_rx_tail>
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	eb 56       	subi	r30, 0x6B	; 107
     ae2:	fa 4f       	sbci	r31, 0xFA	; 250
     ae4:	80 83       	st	Z, r24
     ae6:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <USART_2_rx_elements>
     aea:	8f 5f       	subi	r24, 0xFF	; 255
     aec:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <USART_2_rx_elements>
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	9f 91       	pop	r25
     af6:	8f 91       	pop	r24
     af8:	0f 90       	pop	r0
     afa:	0b be       	out	0x3b, r0	; 59
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_52>:
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	0b b6       	in	r0, 0x3b	; 59
     b12:	0f 92       	push	r0
     b14:	8f 93       	push	r24
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USART_2_tx_elements>
     b1e:	88 23       	and	r24, r24
     b20:	89 f0       	breq	.+34     	; 0xb44 <__vector_52+0x3e>
     b22:	e0 91 80 05 	lds	r30, 0x0580	; 0x800580 <USART_2_tx_tail>
     b26:	ef 5f       	subi	r30, 0xFF	; 255
     b28:	ef 70       	andi	r30, 0x0F	; 15
     b2a:	e0 93 80 05 	sts	0x0580, r30	; 0x800580 <USART_2_tx_tail>
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	ee 57       	subi	r30, 0x7E	; 126
     b32:	fa 4f       	sbci	r31, 0xFA	; 250
     b34:	80 81       	ld	r24, Z
     b36:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     b3a:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USART_2_tx_elements>
     b3e:	81 50       	subi	r24, 0x01	; 1
     b40:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <USART_2_tx_elements>
     b44:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USART_2_tx_elements>
     b48:	81 11       	cpse	r24, r1
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__vector_52+0x50>
     b4c:	e1 ed       	ldi	r30, 0xD1	; 209
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	8f 7d       	andi	r24, 0xDF	; 223
     b54:	80 83       	st	Z, r24
     b56:	ff 91       	pop	r31
     b58:	ef 91       	pop	r30
     b5a:	8f 91       	pop	r24
     b5c:	0f 90       	pop	r0
     b5e:	0b be       	out	0x3b, r0	; 59
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	0f 90       	pop	r0
     b66:	1f 90       	pop	r1
     b68:	18 95       	reti

00000b6a <USART_2_write>:
     b6a:	20 91 81 05 	lds	r18, 0x0581	; 0x800581 <USART_2_tx_head>
     b6e:	2f 5f       	subi	r18, 0xFF	; 255
     b70:	2f 70       	andi	r18, 0x0F	; 15
     b72:	90 91 7f 05 	lds	r25, 0x057F	; 0x80057f <USART_2_tx_elements>
     b76:	90 31       	cpi	r25, 0x10	; 16
     b78:	e1 f3       	breq	.-8      	; 0xb72 <USART_2_write+0x8>
     b7a:	e2 2f       	mov	r30, r18
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	ee 57       	subi	r30, 0x7E	; 126
     b80:	fa 4f       	sbci	r31, 0xFA	; 250
     b82:	80 83       	st	Z, r24
     b84:	20 93 81 05 	sts	0x0581, r18	; 0x800581 <USART_2_tx_head>
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	0f 92       	push	r0
     b8e:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USART_2_tx_elements>
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <USART_2_tx_elements>
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	e1 ed       	ldi	r30, 0xD1	; 209
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	80 62       	ori	r24, 0x20	; 32
     ba4:	80 83       	st	Z, r24
     ba6:	08 95       	ret

00000ba8 <USART_2_init>:
     ba8:	e5 e6       	ldi	r30, 0x65	; 101
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	8d 7f       	andi	r24, 0xFD	; 253
     bb0:	80 83       	st	Z, r24
     bb2:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     bb6:	87 e6       	ldi	r24, 0x67	; 103
     bb8:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     bbc:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     bc0:	88 e9       	ldi	r24, 0x98	; 152
     bc2:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     bc6:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <USART_2_rx_tail>
     bca:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <USART_2_rx_head>
     bce:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <USART_2_rx_elements>
     bd2:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <USART_2_tx_tail>
     bd6:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <USART_2_tx_head>
     bda:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <USART_2_tx_elements>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	08 95       	ret

00000be2 <__vector_54>:
     be2:	1f 92       	push	r1
     be4:	0f 92       	push	r0
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	0f 92       	push	r0
     bea:	11 24       	eor	r1, r1
     bec:	0b b6       	in	r0, 0x3b	; 59
     bee:	0f 92       	push	r0
     bf0:	8f 93       	push	r24
     bf2:	9f 93       	push	r25
     bf4:	ef 93       	push	r30
     bf6:	ff 93       	push	r31
     bf8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     bfc:	e0 91 3e 05 	lds	r30, 0x053E	; 0x80053e <USART_3_rx_head>
     c00:	ef 5f       	subi	r30, 0xFF	; 255
     c02:	ef 73       	andi	r30, 0x3F	; 63
     c04:	e0 93 3e 05 	sts	0x053E, r30	; 0x80053e <USART_3_rx_head>
     c08:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <USART_3_rx_tail>
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	e1 5c       	subi	r30, 0xC1	; 193
     c10:	fa 4f       	sbci	r31, 0xFA	; 250
     c12:	80 83       	st	Z, r24
     c14:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <USART_3_rx_elements>
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <USART_3_rx_elements>
     c1e:	ff 91       	pop	r31
     c20:	ef 91       	pop	r30
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	0f 90       	pop	r0
     c28:	0b be       	out	0x3b, r0	; 59
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f 90       	pop	r0
     c30:	1f 90       	pop	r1
     c32:	18 95       	reti

00000c34 <__vector_55>:
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	0b b6       	in	r0, 0x3b	; 59
     c40:	0f 92       	push	r0
     c42:	8f 93       	push	r24
     c44:	ef 93       	push	r30
     c46:	ff 93       	push	r31
     c48:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <USART_3_tx_elements>
     c4c:	88 23       	and	r24, r24
     c4e:	81 f0       	breq	.+32     	; 0xc70 <__vector_55+0x3c>
     c50:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <USART_3_tx_tail>
     c54:	ef 5f       	subi	r30, 0xFF	; 255
     c56:	e0 93 3a 04 	sts	0x043A, r30	; 0x80043a <USART_3_tx_tail>
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	e4 5c       	subi	r30, 0xC4	; 196
     c5e:	fb 4f       	sbci	r31, 0xFB	; 251
     c60:	80 81       	ld	r24, Z
     c62:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     c66:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <USART_3_tx_elements>
     c6a:	81 50       	subi	r24, 0x01	; 1
     c6c:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <USART_3_tx_elements>
     c70:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <USART_3_tx_elements>
     c74:	81 11       	cpse	r24, r1
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <__vector_55+0x4e>
     c78:	e1 e3       	ldi	r30, 0x31	; 49
     c7a:	f1 e0       	ldi	r31, 0x01	; 1
     c7c:	80 81       	ld	r24, Z
     c7e:	8f 7d       	andi	r24, 0xDF	; 223
     c80:	80 83       	st	Z, r24
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	8f 91       	pop	r24
     c88:	0f 90       	pop	r0
     c8a:	0b be       	out	0x3b, r0	; 59
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	0f 90       	pop	r0
     c92:	1f 90       	pop	r1
     c94:	18 95       	reti

00000c96 <USART_3_write>:
void USART_3_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_3_tx_head + 1) & USART_3_TX_BUFFER_MASK;
     c96:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <USART_3_tx_head>
     c9a:	9f 5f       	subi	r25, 0xFF	; 255
	/* Wait for free space in buffer */
	while (USART_3_tx_elements == USART_3_TX_BUFFER_SIZE)
     c9c:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <USART_3_tx_elements>
		;
	/* Store data in buffer */
	USART_3_txbuf[tmphead] = data;
     ca0:	e9 2f       	mov	r30, r25
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	e4 5c       	subi	r30, 0xC4	; 196
     ca6:	fb 4f       	sbci	r31, 0xFB	; 251
     ca8:	80 83       	st	Z, r24
	/* Store new index */
	USART_3_tx_head = tmphead;
     caa:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <USART_3_tx_head>
	ENTER_CRITICAL(W);
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	0f 92       	push	r0
	USART_3_tx_elements++;
     cb4:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <USART_3_tx_elements>
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <USART_3_tx_elements>
	EXIT_CRITICAL(W);
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR3B |= (1 << UDRIE3);
     cc2:	e1 e3       	ldi	r30, 0x31	; 49
     cc4:	f1 e0       	ldi	r31, 0x01	; 1
     cc6:	80 81       	ld	r24, Z
     cc8:	80 62       	ori	r24, 0x20	; 32
     cca:	80 83       	st	Z, r24
     ccc:	08 95       	ret

00000cce <USART_3_printCHAR>:
     cce:	e3 df       	rcall	.-58     	; 0xc96 <USART_3_write>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	08 95       	ret

00000cd6 <USART_3_init>:
     cd6:	e5 e6       	ldi	r30, 0x65	; 101
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8b 7f       	andi	r24, 0xFB	; 251
     cde:	80 83       	st	Z, r24
     ce0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     ce4:	87 e6       	ldi	r24, 0x67	; 103
     ce6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     cea:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     cee:	88 e9       	ldi	r24, 0x98	; 152
     cf0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     cf4:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <USART_3_rx_tail>
     cf8:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <USART_3_rx_head>
     cfc:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <USART_3_rx_elements>
     d00:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <USART_3_tx_tail>
     d04:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <USART_3_tx_head>
     d08:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <USART_3_tx_elements>
     d0c:	8a e0       	ldi	r24, 0x0A	; 10
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	90 93 7c 08 	sts	0x087C, r25	; 0x80087c <__iob+0x3>
     d14:	80 93 7b 08 	sts	0x087B, r24	; 0x80087b <__iob+0x2>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	08 95       	ret

00000d1c <fastmsectime>:
			 {
				 return;
			 }
		 }
	 }
 }
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	0f 92       	push	r0
     d22:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <m4sectimer>
     d26:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <m4sectimer+0x1>
     d2a:	0f 90       	pop	r0
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	08 95       	ret

00000d30 <fastdelay_ms>:

 // Uses Hardware timer 4 which is set to 4.096mS interrupt
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	00 d0       	rcall	.+0      	; 0xd36 <fastdelay_ms+0x6>
     d36:	1f 92       	push	r1
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	0f 92       	push	r0
	 currentms = m4sectimer;
     d42:	20 91 6b 07 	lds	r18, 0x076B	; 0x80076b <m4sectimer>
     d46:	30 91 6c 07 	lds	r19, 0x076C	; 0x80076c <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
     d4e:	3c 83       	std	Y+4, r19	; 0x04
     d50:	2b 83       	std	Y+3, r18	; 0x03
		 k = j + (uint16_t)count;
     d52:	2b 81       	ldd	r18, Y+3	; 0x03
     d54:	3c 81       	ldd	r19, Y+4	; 0x04
     d56:	82 0f       	add	r24, r18
     d58:	93 1f       	adc	r25, r19
     d5a:	9a 83       	std	Y+2, r25	; 0x02
     d5c:	89 83       	std	Y+1, r24	; 0x01

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	0f 92       	push	r0
	 currentms = m4sectimer;
     d64:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <m4sectimer>
     d68:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
		 k = j + (uint16_t)count;
		 while(1) {
			 j = fastmsectime();
     d70:	9c 83       	std	Y+4, r25	; 0x04
     d72:	8b 83       	std	Y+3, r24	; 0x03
			 if (j >= k)
     d74:	2b 81       	ldd	r18, Y+3	; 0x03
     d76:	3c 81       	ldd	r19, Y+4	; 0x04
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	28 17       	cp	r18, r24
     d7e:	39 07       	cpc	r19, r25
     d80:	70 f3       	brcs	.-36     	; 0xd5e <fastdelay_ms+0x2e>
			 {
				 return;
			 }
		 }
	 }
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <__vector_42>:

volatile uint16_t m4sectimer = 0;		// global 4.096mS tick count (16 bits)
extern void processgps(void);

ISR(TIMER4_COMPA_vect)
{
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	0b b6       	in	r0, 0x3b	; 59
     d9c:	0f 92       	push	r0
     d9e:	2f 93       	push	r18
     da0:	3f 93       	push	r19
     da2:	4f 93       	push	r20
     da4:	5f 93       	push	r21
     da6:	6f 93       	push	r22
     da8:	7f 93       	push	r23
     daa:	8f 93       	push	r24
     dac:	9f 93       	push	r25
     dae:	af 93       	push	r26
     db0:	bf 93       	push	r27
     db2:	ef 93       	push	r30
     db4:	ff 93       	push	r31

	/* Insert your TIMER_0 compare channel A interrupt handling code here */
	m4sectimer++;
     db6:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <m4sectimer>
     dba:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <m4sectimer+0x1>
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	90 93 6c 07 	sts	0x076C, r25	; 0x80076c <m4sectimer+0x1>
     dc4:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <m4sectimer>

	processgps();		// see if gps receive packet available and copy to struct if so
}
     dc8:	31 db       	rcall	.-2462   	; 0x42c <processgps>
     dca:	ff 91       	pop	r31
     dcc:	ef 91       	pop	r30
     dce:	bf 91       	pop	r27
     dd0:	af 91       	pop	r26
     dd2:	9f 91       	pop	r25
     dd4:	8f 91       	pop	r24
     dd6:	7f 91       	pop	r23
     dd8:	6f 91       	pop	r22
     dda:	5f 91       	pop	r21
     ddc:	4f 91       	pop	r20
     dde:	3f 91       	pop	r19
     de0:	2f 91       	pop	r18
     de2:	0f 90       	pop	r0
     de4:	0b be       	out	0x3b, r0	; 59
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	0f 90       	pop	r0
     dec:	1f 90       	pop	r1
     dee:	18 95       	reti

00000df0 <__vector_47>:

volatile uint64_t m1sectimer = 0;		// global 1mS tick count (64 bits)

ISR(TIMER5_COMPA_vect)
{
     df0:	1f 92       	push	r1
     df2:	0f 92       	push	r0
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	0f 92       	push	r0
     df8:	11 24       	eor	r1, r1
     dfa:	2f 93       	push	r18
     dfc:	3f 93       	push	r19
     dfe:	4f 93       	push	r20
     e00:	5f 93       	push	r21
     e02:	6f 93       	push	r22
     e04:	7f 93       	push	r23
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	af 93       	push	r26
	/* Insert your TIMER_5 compare channel A interrupt handling code here */
	static uint16_t nextcmp = 0;

	nextcmp = nextcmp + 16000;		// 1mSec assuming 16MHz clock
     e0c:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <nextcmp.3024>
     e10:	90 91 62 07 	lds	r25, 0x0762	; 0x800762 <nextcmp.3024+0x1>
     e14:	80 58       	subi	r24, 0x80	; 128
     e16:	91 4c       	sbci	r25, 0xC1	; 193
     e18:	90 93 62 07 	sts	0x0762, r25	; 0x800762 <nextcmp.3024+0x1>
     e1c:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <nextcmp.3024>
	OCR5AH = nextcmp >> 8 ;
     e20:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
	OCR5AL = nextcmp & 0xff;
     e24:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <nextcmp.3024>
     e28:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	m1sectimer++;
     e2c:	20 91 63 07 	lds	r18, 0x0763	; 0x800763 <m1sectimer>
     e30:	30 91 64 07 	lds	r19, 0x0764	; 0x800764 <m1sectimer+0x1>
     e34:	40 91 65 07 	lds	r20, 0x0765	; 0x800765 <m1sectimer+0x2>
     e38:	50 91 66 07 	lds	r21, 0x0766	; 0x800766 <m1sectimer+0x3>
     e3c:	60 91 67 07 	lds	r22, 0x0767	; 0x800767 <m1sectimer+0x4>
     e40:	70 91 68 07 	lds	r23, 0x0768	; 0x800768 <m1sectimer+0x5>
     e44:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <m1sectimer+0x6>
     e48:	90 91 6a 07 	lds	r25, 0x076A	; 0x80076a <m1sectimer+0x7>
     e4c:	a1 e0       	ldi	r26, 0x01	; 1
     e4e:	cd d0       	rcall	.+410    	; 0xfea <__adddi3_s8>
     e50:	20 93 63 07 	sts	0x0763, r18	; 0x800763 <m1sectimer>
     e54:	30 93 64 07 	sts	0x0764, r19	; 0x800764 <m1sectimer+0x1>
     e58:	40 93 65 07 	sts	0x0765, r20	; 0x800765 <m1sectimer+0x2>
     e5c:	50 93 66 07 	sts	0x0766, r21	; 0x800766 <m1sectimer+0x3>
     e60:	60 93 67 07 	sts	0x0767, r22	; 0x800767 <m1sectimer+0x4>
     e64:	70 93 68 07 	sts	0x0768, r23	; 0x800768 <m1sectimer+0x5>
     e68:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <m1sectimer+0x6>
     e6c:	90 93 6a 07 	sts	0x076A, r25	; 0x80076a <m1sectimer+0x7>
}
     e70:	af 91       	pop	r26
     e72:	9f 91       	pop	r25
     e74:	8f 91       	pop	r24
     e76:	7f 91       	pop	r23
     e78:	6f 91       	pop	r22
     e7a:	5f 91       	pop	r21
     e7c:	4f 91       	pop	r20
     e7e:	3f 91       	pop	r19
     e80:	2f 91       	pop	r18
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	0f 90       	pop	r0
     e88:	1f 90       	pop	r1
     e8a:	18 95       	reti

00000e8c <main>:
	volatile unsigned char ch;

	now = fastmsectime();

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     e8c:	47 df       	rcall	.-370    	; 0xd1c <fastmsectime>
     e8e:	4b d9       	rcall	.-3434   	; 0x126 <atmel_start_init>
	sei();
     e90:	78 94       	sei

	printf("Hello World\n\r");
     e92:	84 eb       	ldi	r24, 0xB4	; 180
     e94:	93 e0       	ldi	r25, 0x03	; 3
     e96:	9f 93       	push	r25

	fastdelay_ms(5000/4);
     e98:	8f 93       	push	r24
     e9a:	b3 d0       	rcall	.+358    	; 0x1002 <printf>
     e9c:	82 ee       	ldi	r24, 0xE2	; 226

	setupneo();
	printf("Neo7 setup returned\n\r");
     e9e:	94 e0       	ldi	r25, 0x04	; 4
     ea0:	47 df       	rcall	.-370    	; 0xd30 <fastdelay_ms>
     ea2:	dc da       	rcall	.-2632   	; 0x45c <setupneo>
     ea4:	82 ec       	ldi	r24, 0xC2	; 194
     ea6:	93 e0       	ldi	r25, 0x03	; 3

	now = fastmsectime();
     ea8:	9f 93       	push	r25
     eaa:	8f 93       	push	r24
     eac:	aa d0       	rcall	.+340    	; 0x1002 <printf>
     eae:	36 df       	rcall	.-404    	; 0xd1c <fastmsectime>
     eb0:	8c 01       	movw	r16, r24
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
		// Update RealPacket

		if (fastmsectime() > (now + 990/4))		// timeout almost 1 sec
		{
			now = fastmsectime();
			setndig("n1",NavPvt.hour/10);
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cd e6       	ldi	r28, 0x6D	; 109
     ebc:	d7 e0       	ldi	r29, 0x07	; 7
     ebe:	0f 2e       	mov	r0, r31
     ec0:	fd ec       	ldi	r31, 0xCD	; 205
			setndig("n4",NavPvt.min%10);
			setndig("n5",NavPvt.sec/10);
			setndig("n6",NavPvt.sec%10);
#define PRINTDEBUG
#ifdef PRINTDEBUG
			printf("Date  %d %02d %02d  ", NavPvt.day, NavPvt.month,  NavPvt.year);
     ec2:	bf 2e       	mov	r11, r31
     ec4:	f0 2d       	mov	r31, r0
     ec6:	0f 2e       	mov	r0, r31
     ec8:	fa ee       	ldi	r31, 0xEA	; 234
     eca:	cf 2e       	mov	r12, r31
     ecc:	f3 e0       	ldi	r31, 0x03	; 3
			printf("Time %02d:%02d:%02d  UTC     Epoch  %lu\r\n", NavPvt.hour, NavPvt.min,  NavPvt.sec,NavPvt.iTOW);
     ece:	df 2e       	mov	r13, r31
     ed0:	f0 2d       	mov	r31, r0
     ed2:	0f 2e       	mov	r0, r31
     ed4:	ff ef       	ldi	r31, 0xFF	; 255
	{

		//		decodelcd();		// lcd test and debug
		// Update RealPacket

		if (fastmsectime() > (now + 990/4))		// timeout almost 1 sec
     ed6:	ef 2e       	mov	r14, r31
     ed8:	f3 e0       	ldi	r31, 0x03	; 3
     eda:	ff 2e       	mov	r15, r31
     edc:	f0 2d       	mov	r31, r0
     ede:	09 50       	subi	r16, 0x09	; 9
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	1c df       	rcall	.-456    	; 0xd1c <fastmsectime>
		{
			now = fastmsectime();
     ee4:	08 17       	cp	r16, r24
     ee6:	19 07       	cpc	r17, r25
     ee8:	e0 f7       	brcc	.-8      	; 0xee2 <main+0x56>
			setndig("n1",NavPvt.hour/10);
     eea:	18 df       	rcall	.-464    	; 0xd1c <fastmsectime>
     eec:	8c 01       	movw	r16, r24
     eee:	68 85       	ldd	r22, Y+8	; 0x08
     ef0:	6b 9d       	mul	r22, r11
     ef2:	61 2d       	mov	r22, r1
     ef4:	11 24       	eor	r1, r1
     ef6:	66 95       	lsr	r22
     ef8:	66 95       	lsr	r22
     efa:	66 95       	lsr	r22
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	88 ed       	ldi	r24, 0xD8	; 216
			setndig("n2",NavPvt.hour%10);
     f00:	93 e0       	ldi	r25, 0x03	; 3
     f02:	d3 da       	rcall	.-2650   	; 0x4aa <setndig>
     f04:	68 85       	ldd	r22, Y+8	; 0x08
     f06:	6b 9d       	mul	r22, r11
     f08:	81 2d       	mov	r24, r1
     f0a:	11 24       	eor	r1, r1
     f0c:	86 95       	lsr	r24
     f0e:	86 95       	lsr	r24
     f10:	86 95       	lsr	r24
     f12:	88 0f       	add	r24, r24
     f14:	98 2f       	mov	r25, r24
     f16:	99 0f       	add	r25, r25
     f18:	99 0f       	add	r25, r25
     f1a:	89 0f       	add	r24, r25
     f1c:	68 1b       	sub	r22, r24
     f1e:	70 e0       	ldi	r23, 0x00	; 0
			setndig("n3",NavPvt.min/10);
     f20:	8b ed       	ldi	r24, 0xDB	; 219
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	c2 da       	rcall	.-2684   	; 0x4aa <setndig>
     f26:	69 85       	ldd	r22, Y+9	; 0x09
     f28:	6b 9d       	mul	r22, r11
     f2a:	61 2d       	mov	r22, r1
     f2c:	11 24       	eor	r1, r1
     f2e:	66 95       	lsr	r22
     f30:	66 95       	lsr	r22
     f32:	66 95       	lsr	r22
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	8e ed       	ldi	r24, 0xDE	; 222
			setndig("n4",NavPvt.min%10);
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	b7 da       	rcall	.-2706   	; 0x4aa <setndig>
     f3c:	69 85       	ldd	r22, Y+9	; 0x09
     f3e:	6b 9d       	mul	r22, r11
     f40:	81 2d       	mov	r24, r1
     f42:	11 24       	eor	r1, r1
     f44:	86 95       	lsr	r24
     f46:	86 95       	lsr	r24
     f48:	86 95       	lsr	r24
     f4a:	88 0f       	add	r24, r24
     f4c:	98 2f       	mov	r25, r24
     f4e:	99 0f       	add	r25, r25
     f50:	99 0f       	add	r25, r25
     f52:	89 0f       	add	r24, r25
     f54:	68 1b       	sub	r22, r24
     f56:	70 e0       	ldi	r23, 0x00	; 0
			setndig("n5",NavPvt.sec/10);
     f58:	81 ee       	ldi	r24, 0xE1	; 225
     f5a:	93 e0       	ldi	r25, 0x03	; 3
     f5c:	a6 da       	rcall	.-2740   	; 0x4aa <setndig>
     f5e:	6a 85       	ldd	r22, Y+10	; 0x0a
     f60:	6b 9d       	mul	r22, r11
     f62:	61 2d       	mov	r22, r1
     f64:	11 24       	eor	r1, r1
     f66:	66 95       	lsr	r22
     f68:	66 95       	lsr	r22
     f6a:	66 95       	lsr	r22
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	84 ee       	ldi	r24, 0xE4	; 228
			setndig("n6",NavPvt.sec%10);
     f70:	93 e0       	ldi	r25, 0x03	; 3
     f72:	9b da       	rcall	.-2762   	; 0x4aa <setndig>
     f74:	6a 85       	ldd	r22, Y+10	; 0x0a
     f76:	6b 9d       	mul	r22, r11
     f78:	81 2d       	mov	r24, r1
     f7a:	11 24       	eor	r1, r1
     f7c:	86 95       	lsr	r24
     f7e:	86 95       	lsr	r24
     f80:	86 95       	lsr	r24
     f82:	88 0f       	add	r24, r24
     f84:	98 2f       	mov	r25, r24
     f86:	99 0f       	add	r25, r25
     f88:	99 0f       	add	r25, r25
     f8a:	89 0f       	add	r24, r25
     f8c:	68 1b       	sub	r22, r24
     f8e:	70 e0       	ldi	r23, 0x00	; 0
#define PRINTDEBUG
#ifdef PRINTDEBUG
			printf("Date  %d %02d %02d  ", NavPvt.day, NavPvt.month,  NavPvt.year);
     f90:	87 ee       	ldi	r24, 0xE7	; 231
     f92:	93 e0       	ldi	r25, 0x03	; 3
     f94:	8a da       	rcall	.-2796   	; 0x4aa <setndig>
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	8f 93       	push	r24
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	8f 93       	push	r24
     f9e:	8e 81       	ldd	r24, Y+6	; 0x06
     fa0:	1f 92       	push	r1
     fa2:	8f 93       	push	r24
     fa4:	8f 81       	ldd	r24, Y+7	; 0x07
     fa6:	1f 92       	push	r1
     fa8:	8f 93       	push	r24
     faa:	df 92       	push	r13
			printf("Time %02d:%02d:%02d  UTC     Epoch  %lu\r\n", NavPvt.hour, NavPvt.min,  NavPvt.sec,NavPvt.iTOW);
     fac:	cf 92       	push	r12
     fae:	29 d0       	rcall	.+82     	; 0x1002 <printf>
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	8f 93       	push	r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	8f 93       	push	r24
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	8f 93       	push	r24
     fbc:	88 81       	ld	r24, Y
     fbe:	8f 93       	push	r24
     fc0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc2:	1f 92       	push	r1
     fc4:	8f 93       	push	r24
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	1f 92       	push	r1
     fca:	8f 93       	push	r24
     fcc:	88 85       	ldd	r24, Y+8	; 0x08
     fce:	1f 92       	push	r1
     fd0:	8f 93       	push	r24
     fd2:	ff 92       	push	r15
     fd4:	ef 92       	push	r14
     fd6:	15 d0       	rcall	.+42     	; 0x1002 <printf>
     fd8:	8d b7       	in	r24, 0x3d	; 61
     fda:	9e b7       	in	r25, 0x3e	; 62
     fdc:	44 96       	adiw	r24, 0x14	; 20
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	9e bf       	out	0x3e, r25	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	8d bf       	out	0x3d, r24	; 61
     fe8:	7a cf       	rjmp	.-268    	; 0xede <main+0x52>

00000fea <__adddi3_s8>:
     fea:	00 24       	eor	r0, r0
     fec:	a7 fd       	sbrc	r26, 7
     fee:	00 94       	com	r0
     ff0:	2a 0f       	add	r18, r26
     ff2:	30 1d       	adc	r19, r0
     ff4:	40 1d       	adc	r20, r0
     ff6:	50 1d       	adc	r21, r0
     ff8:	60 1d       	adc	r22, r0
     ffa:	70 1d       	adc	r23, r0
     ffc:	80 1d       	adc	r24, r0
     ffe:	90 1d       	adc	r25, r0
    1000:	08 95       	ret

00001002 <printf>:
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	ae 01       	movw	r20, r28
    100c:	4a 5f       	subi	r20, 0xFA	; 250
    100e:	5f 4f       	sbci	r21, 0xFF	; 255
    1010:	fa 01       	movw	r30, r20
    1012:	61 91       	ld	r22, Z+
    1014:	71 91       	ld	r23, Z+
    1016:	af 01       	movw	r20, r30
    1018:	80 91 7b 08 	lds	r24, 0x087B	; 0x80087b <__iob+0x2>
    101c:	90 91 7c 08 	lds	r25, 0x087C	; 0x80087c <__iob+0x3>
    1020:	66 d0       	rcall	.+204    	; 0x10ee <vfprintf>
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <putchar>:
    1028:	60 91 7b 08 	lds	r22, 0x087B	; 0x80087b <__iob+0x2>
    102c:	70 91 7c 08 	lds	r23, 0x087C	; 0x80087c <__iob+0x3>
    1030:	71 c2       	rjmp	.+1250   	; 0x1514 <fputc>

00001032 <puts>:
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	e0 91 7b 08 	lds	r30, 0x087B	; 0x80087b <__iob+0x2>
    103e:	f0 91 7c 08 	lds	r31, 0x087C	; 0x80087c <__iob+0x3>
    1042:	23 81       	ldd	r18, Z+3	; 0x03
    1044:	21 ff       	sbrs	r18, 1
    1046:	1b c0       	rjmp	.+54     	; 0x107e <puts+0x4c>
    1048:	8c 01       	movw	r16, r24
    104a:	d0 e0       	ldi	r29, 0x00	; 0
    104c:	c0 e0       	ldi	r28, 0x00	; 0
    104e:	f8 01       	movw	r30, r16
    1050:	81 91       	ld	r24, Z+
    1052:	8f 01       	movw	r16, r30
    1054:	60 91 7b 08 	lds	r22, 0x087B	; 0x80087b <__iob+0x2>
    1058:	70 91 7c 08 	lds	r23, 0x087C	; 0x80087c <__iob+0x3>
    105c:	db 01       	movw	r26, r22
    105e:	18 96       	adiw	r26, 0x08	; 8
    1060:	ed 91       	ld	r30, X+
    1062:	fc 91       	ld	r31, X
    1064:	19 97       	sbiw	r26, 0x09	; 9
    1066:	88 23       	and	r24, r24
    1068:	31 f0       	breq	.+12     	; 0x1076 <puts+0x44>
    106a:	19 95       	eicall
    106c:	89 2b       	or	r24, r25
    106e:	79 f3       	breq	.-34     	; 0x104e <puts+0x1c>
    1070:	df ef       	ldi	r29, 0xFF	; 255
    1072:	cf ef       	ldi	r28, 0xFF	; 255
    1074:	ec cf       	rjmp	.-40     	; 0x104e <puts+0x1c>
    1076:	8a e0       	ldi	r24, 0x0A	; 10
    1078:	19 95       	eicall
    107a:	89 2b       	or	r24, r25
    107c:	19 f0       	breq	.+6      	; 0x1084 <puts+0x52>
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <puts+0x56>
    1084:	8d 2f       	mov	r24, r29
    1086:	9c 2f       	mov	r25, r28
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <sprintf>:
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	2e 97       	sbiw	r28, 0x0e	; 14
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	0e 89       	ldd	r16, Y+22	; 0x16
    10ac:	1f 89       	ldd	r17, Y+23	; 0x17
    10ae:	86 e0       	ldi	r24, 0x06	; 6
    10b0:	8c 83       	std	Y+4, r24	; 0x04
    10b2:	1a 83       	std	Y+2, r17	; 0x02
    10b4:	09 83       	std	Y+1, r16	; 0x01
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f e7       	ldi	r25, 0x7F	; 127
    10ba:	9e 83       	std	Y+6, r25	; 0x06
    10bc:	8d 83       	std	Y+5, r24	; 0x05
    10be:	ae 01       	movw	r20, r28
    10c0:	46 5e       	subi	r20, 0xE6	; 230
    10c2:	5f 4f       	sbci	r21, 0xFF	; 255
    10c4:	68 8d       	ldd	r22, Y+24	; 0x18
    10c6:	79 8d       	ldd	r23, Y+25	; 0x19
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	10 d0       	rcall	.+32     	; 0x10ee <vfprintf>
    10ce:	ef 81       	ldd	r30, Y+7	; 0x07
    10d0:	f8 85       	ldd	r31, Y+8	; 0x08
    10d2:	e0 0f       	add	r30, r16
    10d4:	f1 1f       	adc	r31, r17
    10d6:	10 82       	st	Z, r1
    10d8:	2e 96       	adiw	r28, 0x0e	; 14
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <vfprintf>:
    10ee:	2f 92       	push	r2
    10f0:	3f 92       	push	r3
    10f2:	4f 92       	push	r4
    10f4:	5f 92       	push	r5
    10f6:	6f 92       	push	r6
    10f8:	7f 92       	push	r7
    10fa:	8f 92       	push	r8
    10fc:	9f 92       	push	r9
    10fe:	af 92       	push	r10
    1100:	bf 92       	push	r11
    1102:	cf 92       	push	r12
    1104:	df 92       	push	r13
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	2b 97       	sbiw	r28, 0x0b	; 11
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	6c 01       	movw	r12, r24
    1124:	7b 01       	movw	r14, r22
    1126:	8a 01       	movw	r16, r20
    1128:	fc 01       	movw	r30, r24
    112a:	17 82       	std	Z+7, r1	; 0x07
    112c:	16 82       	std	Z+6, r1	; 0x06
    112e:	83 81       	ldd	r24, Z+3	; 0x03
    1130:	81 ff       	sbrs	r24, 1
    1132:	bf c1       	rjmp	.+894    	; 0x14b2 <vfprintf+0x3c4>
    1134:	ce 01       	movw	r24, r28
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	3c 01       	movw	r6, r24
    113a:	f6 01       	movw	r30, r12
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	f7 01       	movw	r30, r14
    1140:	93 fd       	sbrc	r25, 3
    1142:	85 91       	lpm	r24, Z+
    1144:	93 ff       	sbrs	r25, 3
    1146:	81 91       	ld	r24, Z+
    1148:	7f 01       	movw	r14, r30
    114a:	88 23       	and	r24, r24
    114c:	09 f4       	brne	.+2      	; 0x1150 <vfprintf+0x62>
    114e:	ad c1       	rjmp	.+858    	; 0x14aa <vfprintf+0x3bc>
    1150:	85 32       	cpi	r24, 0x25	; 37
    1152:	39 f4       	brne	.+14     	; 0x1162 <vfprintf+0x74>
    1154:	93 fd       	sbrc	r25, 3
    1156:	85 91       	lpm	r24, Z+
    1158:	93 ff       	sbrs	r25, 3
    115a:	81 91       	ld	r24, Z+
    115c:	7f 01       	movw	r14, r30
    115e:	85 32       	cpi	r24, 0x25	; 37
    1160:	21 f4       	brne	.+8      	; 0x116a <vfprintf+0x7c>
    1162:	b6 01       	movw	r22, r12
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	d6 d1       	rcall	.+940    	; 0x1514 <fputc>
    1168:	e8 cf       	rjmp	.-48     	; 0x113a <vfprintf+0x4c>
    116a:	91 2c       	mov	r9, r1
    116c:	21 2c       	mov	r2, r1
    116e:	31 2c       	mov	r3, r1
    1170:	ff e1       	ldi	r31, 0x1F	; 31
    1172:	f3 15       	cp	r31, r3
    1174:	d8 f0       	brcs	.+54     	; 0x11ac <vfprintf+0xbe>
    1176:	8b 32       	cpi	r24, 0x2B	; 43
    1178:	79 f0       	breq	.+30     	; 0x1198 <vfprintf+0xaa>
    117a:	38 f4       	brcc	.+14     	; 0x118a <vfprintf+0x9c>
    117c:	80 32       	cpi	r24, 0x20	; 32
    117e:	79 f0       	breq	.+30     	; 0x119e <vfprintf+0xb0>
    1180:	83 32       	cpi	r24, 0x23	; 35
    1182:	a1 f4       	brne	.+40     	; 0x11ac <vfprintf+0xbe>
    1184:	23 2d       	mov	r18, r3
    1186:	20 61       	ori	r18, 0x10	; 16
    1188:	1d c0       	rjmp	.+58     	; 0x11c4 <vfprintf+0xd6>
    118a:	8d 32       	cpi	r24, 0x2D	; 45
    118c:	61 f0       	breq	.+24     	; 0x11a6 <vfprintf+0xb8>
    118e:	80 33       	cpi	r24, 0x30	; 48
    1190:	69 f4       	brne	.+26     	; 0x11ac <vfprintf+0xbe>
    1192:	23 2d       	mov	r18, r3
    1194:	21 60       	ori	r18, 0x01	; 1
    1196:	16 c0       	rjmp	.+44     	; 0x11c4 <vfprintf+0xd6>
    1198:	83 2d       	mov	r24, r3
    119a:	82 60       	ori	r24, 0x02	; 2
    119c:	38 2e       	mov	r3, r24
    119e:	e3 2d       	mov	r30, r3
    11a0:	e4 60       	ori	r30, 0x04	; 4
    11a2:	3e 2e       	mov	r3, r30
    11a4:	2a c0       	rjmp	.+84     	; 0x11fa <vfprintf+0x10c>
    11a6:	f3 2d       	mov	r31, r3
    11a8:	f8 60       	ori	r31, 0x08	; 8
    11aa:	1d c0       	rjmp	.+58     	; 0x11e6 <vfprintf+0xf8>
    11ac:	37 fc       	sbrc	r3, 7
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <vfprintf+0x11c>
    11b0:	20 ed       	ldi	r18, 0xD0	; 208
    11b2:	28 0f       	add	r18, r24
    11b4:	2a 30       	cpi	r18, 0x0A	; 10
    11b6:	40 f0       	brcs	.+16     	; 0x11c8 <vfprintf+0xda>
    11b8:	8e 32       	cpi	r24, 0x2E	; 46
    11ba:	b9 f4       	brne	.+46     	; 0x11ea <vfprintf+0xfc>
    11bc:	36 fc       	sbrc	r3, 6
    11be:	75 c1       	rjmp	.+746    	; 0x14aa <vfprintf+0x3bc>
    11c0:	23 2d       	mov	r18, r3
    11c2:	20 64       	ori	r18, 0x40	; 64
    11c4:	32 2e       	mov	r3, r18
    11c6:	19 c0       	rjmp	.+50     	; 0x11fa <vfprintf+0x10c>
    11c8:	36 fe       	sbrs	r3, 6
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <vfprintf+0xea>
    11cc:	8a e0       	ldi	r24, 0x0A	; 10
    11ce:	98 9e       	mul	r9, r24
    11d0:	20 0d       	add	r18, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	92 2e       	mov	r9, r18
    11d6:	11 c0       	rjmp	.+34     	; 0x11fa <vfprintf+0x10c>
    11d8:	ea e0       	ldi	r30, 0x0A	; 10
    11da:	2e 9e       	mul	r2, r30
    11dc:	20 0d       	add	r18, r0
    11de:	11 24       	eor	r1, r1
    11e0:	22 2e       	mov	r2, r18
    11e2:	f3 2d       	mov	r31, r3
    11e4:	f0 62       	ori	r31, 0x20	; 32
    11e6:	3f 2e       	mov	r3, r31
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <vfprintf+0x10c>
    11ea:	8c 36       	cpi	r24, 0x6C	; 108
    11ec:	21 f4       	brne	.+8      	; 0x11f6 <vfprintf+0x108>
    11ee:	83 2d       	mov	r24, r3
    11f0:	80 68       	ori	r24, 0x80	; 128
    11f2:	38 2e       	mov	r3, r24
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <vfprintf+0x10c>
    11f6:	88 36       	cpi	r24, 0x68	; 104
    11f8:	41 f4       	brne	.+16     	; 0x120a <vfprintf+0x11c>
    11fa:	f7 01       	movw	r30, r14
    11fc:	93 fd       	sbrc	r25, 3
    11fe:	85 91       	lpm	r24, Z+
    1200:	93 ff       	sbrs	r25, 3
    1202:	81 91       	ld	r24, Z+
    1204:	7f 01       	movw	r14, r30
    1206:	81 11       	cpse	r24, r1
    1208:	b3 cf       	rjmp	.-154    	; 0x1170 <vfprintf+0x82>
    120a:	98 2f       	mov	r25, r24
    120c:	9f 7d       	andi	r25, 0xDF	; 223
    120e:	95 54       	subi	r25, 0x45	; 69
    1210:	93 30       	cpi	r25, 0x03	; 3
    1212:	28 f4       	brcc	.+10     	; 0x121e <vfprintf+0x130>
    1214:	0c 5f       	subi	r16, 0xFC	; 252
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	9f e3       	ldi	r25, 0x3F	; 63
    121a:	99 83       	std	Y+1, r25	; 0x01
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <vfprintf+0x14a>
    121e:	83 36       	cpi	r24, 0x63	; 99
    1220:	31 f0       	breq	.+12     	; 0x122e <vfprintf+0x140>
    1222:	83 37       	cpi	r24, 0x73	; 115
    1224:	71 f0       	breq	.+28     	; 0x1242 <vfprintf+0x154>
    1226:	83 35       	cpi	r24, 0x53	; 83
    1228:	09 f0       	breq	.+2      	; 0x122c <vfprintf+0x13e>
    122a:	55 c0       	rjmp	.+170    	; 0x12d6 <vfprintf+0x1e8>
    122c:	20 c0       	rjmp	.+64     	; 0x126e <vfprintf+0x180>
    122e:	f8 01       	movw	r30, r16
    1230:	80 81       	ld	r24, Z
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	0e 5f       	subi	r16, 0xFE	; 254
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	88 24       	eor	r8, r8
    123a:	83 94       	inc	r8
    123c:	91 2c       	mov	r9, r1
    123e:	53 01       	movw	r10, r6
    1240:	12 c0       	rjmp	.+36     	; 0x1266 <vfprintf+0x178>
    1242:	28 01       	movw	r4, r16
    1244:	f2 e0       	ldi	r31, 0x02	; 2
    1246:	4f 0e       	add	r4, r31
    1248:	51 1c       	adc	r5, r1
    124a:	f8 01       	movw	r30, r16
    124c:	a0 80       	ld	r10, Z
    124e:	b1 80       	ldd	r11, Z+1	; 0x01
    1250:	36 fe       	sbrs	r3, 6
    1252:	03 c0       	rjmp	.+6      	; 0x125a <vfprintf+0x16c>
    1254:	69 2d       	mov	r22, r9
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <vfprintf+0x170>
    125a:	6f ef       	ldi	r22, 0xFF	; 255
    125c:	7f ef       	ldi	r23, 0xFF	; 255
    125e:	c5 01       	movw	r24, r10
    1260:	4e d1       	rcall	.+668    	; 0x14fe <strnlen>
    1262:	4c 01       	movw	r8, r24
    1264:	82 01       	movw	r16, r4
    1266:	f3 2d       	mov	r31, r3
    1268:	ff 77       	andi	r31, 0x7F	; 127
    126a:	3f 2e       	mov	r3, r31
    126c:	15 c0       	rjmp	.+42     	; 0x1298 <vfprintf+0x1aa>
    126e:	28 01       	movw	r4, r16
    1270:	22 e0       	ldi	r18, 0x02	; 2
    1272:	42 0e       	add	r4, r18
    1274:	51 1c       	adc	r5, r1
    1276:	f8 01       	movw	r30, r16
    1278:	a0 80       	ld	r10, Z
    127a:	b1 80       	ldd	r11, Z+1	; 0x01
    127c:	36 fe       	sbrs	r3, 6
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <vfprintf+0x198>
    1280:	69 2d       	mov	r22, r9
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	02 c0       	rjmp	.+4      	; 0x128a <vfprintf+0x19c>
    1286:	6f ef       	ldi	r22, 0xFF	; 255
    1288:	7f ef       	ldi	r23, 0xFF	; 255
    128a:	c5 01       	movw	r24, r10
    128c:	2d d1       	rcall	.+602    	; 0x14e8 <strnlen_P>
    128e:	4c 01       	movw	r8, r24
    1290:	f3 2d       	mov	r31, r3
    1292:	f0 68       	ori	r31, 0x80	; 128
    1294:	3f 2e       	mov	r3, r31
    1296:	82 01       	movw	r16, r4
    1298:	33 fc       	sbrc	r3, 3
    129a:	19 c0       	rjmp	.+50     	; 0x12ce <vfprintf+0x1e0>
    129c:	82 2d       	mov	r24, r2
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	88 16       	cp	r8, r24
    12a2:	99 06       	cpc	r9, r25
    12a4:	a0 f4       	brcc	.+40     	; 0x12ce <vfprintf+0x1e0>
    12a6:	b6 01       	movw	r22, r12
    12a8:	80 e2       	ldi	r24, 0x20	; 32
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	33 d1       	rcall	.+614    	; 0x1514 <fputc>
    12ae:	2a 94       	dec	r2
    12b0:	f5 cf       	rjmp	.-22     	; 0x129c <vfprintf+0x1ae>
    12b2:	f5 01       	movw	r30, r10
    12b4:	37 fc       	sbrc	r3, 7
    12b6:	85 91       	lpm	r24, Z+
    12b8:	37 fe       	sbrs	r3, 7
    12ba:	81 91       	ld	r24, Z+
    12bc:	5f 01       	movw	r10, r30
    12be:	b6 01       	movw	r22, r12
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	28 d1       	rcall	.+592    	; 0x1514 <fputc>
    12c4:	21 10       	cpse	r2, r1
    12c6:	2a 94       	dec	r2
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	82 1a       	sub	r8, r18
    12cc:	91 08       	sbc	r9, r1
    12ce:	81 14       	cp	r8, r1
    12d0:	91 04       	cpc	r9, r1
    12d2:	79 f7       	brne	.-34     	; 0x12b2 <vfprintf+0x1c4>
    12d4:	e1 c0       	rjmp	.+450    	; 0x1498 <vfprintf+0x3aa>
    12d6:	84 36       	cpi	r24, 0x64	; 100
    12d8:	11 f0       	breq	.+4      	; 0x12de <vfprintf+0x1f0>
    12da:	89 36       	cpi	r24, 0x69	; 105
    12dc:	39 f5       	brne	.+78     	; 0x132c <vfprintf+0x23e>
    12de:	f8 01       	movw	r30, r16
    12e0:	37 fe       	sbrs	r3, 7
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <vfprintf+0x204>
    12e4:	60 81       	ld	r22, Z
    12e6:	71 81       	ldd	r23, Z+1	; 0x01
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	0c 5f       	subi	r16, 0xFC	; 252
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	08 c0       	rjmp	.+16     	; 0x1302 <vfprintf+0x214>
    12f2:	60 81       	ld	r22, Z
    12f4:	71 81       	ldd	r23, Z+1	; 0x01
    12f6:	07 2e       	mov	r0, r23
    12f8:	00 0c       	add	r0, r0
    12fa:	88 0b       	sbc	r24, r24
    12fc:	99 0b       	sbc	r25, r25
    12fe:	0e 5f       	subi	r16, 0xFE	; 254
    1300:	1f 4f       	sbci	r17, 0xFF	; 255
    1302:	f3 2d       	mov	r31, r3
    1304:	ff 76       	andi	r31, 0x6F	; 111
    1306:	3f 2e       	mov	r3, r31
    1308:	97 ff       	sbrs	r25, 7
    130a:	09 c0       	rjmp	.+18     	; 0x131e <vfprintf+0x230>
    130c:	90 95       	com	r25
    130e:	80 95       	com	r24
    1310:	70 95       	com	r23
    1312:	61 95       	neg	r22
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
    1316:	8f 4f       	sbci	r24, 0xFF	; 255
    1318:	9f 4f       	sbci	r25, 0xFF	; 255
    131a:	f0 68       	ori	r31, 0x80	; 128
    131c:	3f 2e       	mov	r3, r31
    131e:	2a e0       	ldi	r18, 0x0A	; 10
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	a3 01       	movw	r20, r6
    1324:	33 d1       	rcall	.+614    	; 0x158c <__ultoa_invert>
    1326:	88 2e       	mov	r8, r24
    1328:	86 18       	sub	r8, r6
    132a:	44 c0       	rjmp	.+136    	; 0x13b4 <vfprintf+0x2c6>
    132c:	85 37       	cpi	r24, 0x75	; 117
    132e:	31 f4       	brne	.+12     	; 0x133c <vfprintf+0x24e>
    1330:	23 2d       	mov	r18, r3
    1332:	2f 7e       	andi	r18, 0xEF	; 239
    1334:	b2 2e       	mov	r11, r18
    1336:	2a e0       	ldi	r18, 0x0A	; 10
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	25 c0       	rjmp	.+74     	; 0x1386 <vfprintf+0x298>
    133c:	93 2d       	mov	r25, r3
    133e:	99 7f       	andi	r25, 0xF9	; 249
    1340:	b9 2e       	mov	r11, r25
    1342:	8f 36       	cpi	r24, 0x6F	; 111
    1344:	c1 f0       	breq	.+48     	; 0x1376 <vfprintf+0x288>
    1346:	18 f4       	brcc	.+6      	; 0x134e <vfprintf+0x260>
    1348:	88 35       	cpi	r24, 0x58	; 88
    134a:	79 f0       	breq	.+30     	; 0x136a <vfprintf+0x27c>
    134c:	ae c0       	rjmp	.+348    	; 0x14aa <vfprintf+0x3bc>
    134e:	80 37       	cpi	r24, 0x70	; 112
    1350:	19 f0       	breq	.+6      	; 0x1358 <vfprintf+0x26a>
    1352:	88 37       	cpi	r24, 0x78	; 120
    1354:	21 f0       	breq	.+8      	; 0x135e <vfprintf+0x270>
    1356:	a9 c0       	rjmp	.+338    	; 0x14aa <vfprintf+0x3bc>
    1358:	e9 2f       	mov	r30, r25
    135a:	e0 61       	ori	r30, 0x10	; 16
    135c:	be 2e       	mov	r11, r30
    135e:	b4 fe       	sbrs	r11, 4
    1360:	0d c0       	rjmp	.+26     	; 0x137c <vfprintf+0x28e>
    1362:	fb 2d       	mov	r31, r11
    1364:	f4 60       	ori	r31, 0x04	; 4
    1366:	bf 2e       	mov	r11, r31
    1368:	09 c0       	rjmp	.+18     	; 0x137c <vfprintf+0x28e>
    136a:	34 fe       	sbrs	r3, 4
    136c:	0a c0       	rjmp	.+20     	; 0x1382 <vfprintf+0x294>
    136e:	29 2f       	mov	r18, r25
    1370:	26 60       	ori	r18, 0x06	; 6
    1372:	b2 2e       	mov	r11, r18
    1374:	06 c0       	rjmp	.+12     	; 0x1382 <vfprintf+0x294>
    1376:	28 e0       	ldi	r18, 0x08	; 8
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	05 c0       	rjmp	.+10     	; 0x1386 <vfprintf+0x298>
    137c:	20 e1       	ldi	r18, 0x10	; 16
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <vfprintf+0x298>
    1382:	20 e1       	ldi	r18, 0x10	; 16
    1384:	32 e0       	ldi	r19, 0x02	; 2
    1386:	f8 01       	movw	r30, r16
    1388:	b7 fe       	sbrs	r11, 7
    138a:	07 c0       	rjmp	.+14     	; 0x139a <vfprintf+0x2ac>
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	0c 5f       	subi	r16, 0xFC	; 252
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <vfprintf+0x2b8>
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 5f       	subi	r16, 0xFE	; 254
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	a3 01       	movw	r20, r6
    13a8:	f1 d0       	rcall	.+482    	; 0x158c <__ultoa_invert>
    13aa:	88 2e       	mov	r8, r24
    13ac:	86 18       	sub	r8, r6
    13ae:	fb 2d       	mov	r31, r11
    13b0:	ff 77       	andi	r31, 0x7F	; 127
    13b2:	3f 2e       	mov	r3, r31
    13b4:	36 fe       	sbrs	r3, 6
    13b6:	0d c0       	rjmp	.+26     	; 0x13d2 <vfprintf+0x2e4>
    13b8:	23 2d       	mov	r18, r3
    13ba:	2e 7f       	andi	r18, 0xFE	; 254
    13bc:	a2 2e       	mov	r10, r18
    13be:	89 14       	cp	r8, r9
    13c0:	58 f4       	brcc	.+22     	; 0x13d8 <vfprintf+0x2ea>
    13c2:	34 fe       	sbrs	r3, 4
    13c4:	0b c0       	rjmp	.+22     	; 0x13dc <vfprintf+0x2ee>
    13c6:	32 fc       	sbrc	r3, 2
    13c8:	09 c0       	rjmp	.+18     	; 0x13dc <vfprintf+0x2ee>
    13ca:	83 2d       	mov	r24, r3
    13cc:	8e 7e       	andi	r24, 0xEE	; 238
    13ce:	a8 2e       	mov	r10, r24
    13d0:	05 c0       	rjmp	.+10     	; 0x13dc <vfprintf+0x2ee>
    13d2:	b8 2c       	mov	r11, r8
    13d4:	a3 2c       	mov	r10, r3
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <vfprintf+0x2f0>
    13d8:	b8 2c       	mov	r11, r8
    13da:	01 c0       	rjmp	.+2      	; 0x13de <vfprintf+0x2f0>
    13dc:	b9 2c       	mov	r11, r9
    13de:	a4 fe       	sbrs	r10, 4
    13e0:	0f c0       	rjmp	.+30     	; 0x1400 <vfprintf+0x312>
    13e2:	fe 01       	movw	r30, r28
    13e4:	e8 0d       	add	r30, r8
    13e6:	f1 1d       	adc	r31, r1
    13e8:	80 81       	ld	r24, Z
    13ea:	80 33       	cpi	r24, 0x30	; 48
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <vfprintf+0x308>
    13ee:	9a 2d       	mov	r25, r10
    13f0:	99 7e       	andi	r25, 0xE9	; 233
    13f2:	a9 2e       	mov	r10, r25
    13f4:	09 c0       	rjmp	.+18     	; 0x1408 <vfprintf+0x31a>
    13f6:	a2 fe       	sbrs	r10, 2
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <vfprintf+0x318>
    13fa:	b3 94       	inc	r11
    13fc:	b3 94       	inc	r11
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <vfprintf+0x31a>
    1400:	8a 2d       	mov	r24, r10
    1402:	86 78       	andi	r24, 0x86	; 134
    1404:	09 f0       	breq	.+2      	; 0x1408 <vfprintf+0x31a>
    1406:	b3 94       	inc	r11
    1408:	a3 fc       	sbrc	r10, 3
    140a:	10 c0       	rjmp	.+32     	; 0x142c <vfprintf+0x33e>
    140c:	a0 fe       	sbrs	r10, 0
    140e:	06 c0       	rjmp	.+12     	; 0x141c <vfprintf+0x32e>
    1410:	b2 14       	cp	r11, r2
    1412:	80 f4       	brcc	.+32     	; 0x1434 <vfprintf+0x346>
    1414:	28 0c       	add	r2, r8
    1416:	92 2c       	mov	r9, r2
    1418:	9b 18       	sub	r9, r11
    141a:	0d c0       	rjmp	.+26     	; 0x1436 <vfprintf+0x348>
    141c:	b2 14       	cp	r11, r2
    141e:	58 f4       	brcc	.+22     	; 0x1436 <vfprintf+0x348>
    1420:	b6 01       	movw	r22, r12
    1422:	80 e2       	ldi	r24, 0x20	; 32
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	76 d0       	rcall	.+236    	; 0x1514 <fputc>
    1428:	b3 94       	inc	r11
    142a:	f8 cf       	rjmp	.-16     	; 0x141c <vfprintf+0x32e>
    142c:	b2 14       	cp	r11, r2
    142e:	18 f4       	brcc	.+6      	; 0x1436 <vfprintf+0x348>
    1430:	2b 18       	sub	r2, r11
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <vfprintf+0x34a>
    1434:	98 2c       	mov	r9, r8
    1436:	21 2c       	mov	r2, r1
    1438:	a4 fe       	sbrs	r10, 4
    143a:	0f c0       	rjmp	.+30     	; 0x145a <vfprintf+0x36c>
    143c:	b6 01       	movw	r22, r12
    143e:	80 e3       	ldi	r24, 0x30	; 48
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	68 d0       	rcall	.+208    	; 0x1514 <fputc>
    1444:	a2 fe       	sbrs	r10, 2
    1446:	16 c0       	rjmp	.+44     	; 0x1474 <vfprintf+0x386>
    1448:	a1 fc       	sbrc	r10, 1
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <vfprintf+0x364>
    144c:	88 e7       	ldi	r24, 0x78	; 120
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <vfprintf+0x368>
    1452:	88 e5       	ldi	r24, 0x58	; 88
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	b6 01       	movw	r22, r12
    1458:	0c c0       	rjmp	.+24     	; 0x1472 <vfprintf+0x384>
    145a:	8a 2d       	mov	r24, r10
    145c:	86 78       	andi	r24, 0x86	; 134
    145e:	51 f0       	breq	.+20     	; 0x1474 <vfprintf+0x386>
    1460:	a1 fe       	sbrs	r10, 1
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <vfprintf+0x37a>
    1464:	8b e2       	ldi	r24, 0x2B	; 43
    1466:	01 c0       	rjmp	.+2      	; 0x146a <vfprintf+0x37c>
    1468:	80 e2       	ldi	r24, 0x20	; 32
    146a:	a7 fc       	sbrc	r10, 7
    146c:	8d e2       	ldi	r24, 0x2D	; 45
    146e:	b6 01       	movw	r22, r12
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	50 d0       	rcall	.+160    	; 0x1514 <fputc>
    1474:	89 14       	cp	r8, r9
    1476:	30 f4       	brcc	.+12     	; 0x1484 <vfprintf+0x396>
    1478:	b6 01       	movw	r22, r12
    147a:	80 e3       	ldi	r24, 0x30	; 48
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	4a d0       	rcall	.+148    	; 0x1514 <fputc>
    1480:	9a 94       	dec	r9
    1482:	f8 cf       	rjmp	.-16     	; 0x1474 <vfprintf+0x386>
    1484:	8a 94       	dec	r8
    1486:	f3 01       	movw	r30, r6
    1488:	e8 0d       	add	r30, r8
    148a:	f1 1d       	adc	r31, r1
    148c:	80 81       	ld	r24, Z
    148e:	b6 01       	movw	r22, r12
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	40 d0       	rcall	.+128    	; 0x1514 <fputc>
    1494:	81 10       	cpse	r8, r1
    1496:	f6 cf       	rjmp	.-20     	; 0x1484 <vfprintf+0x396>
    1498:	22 20       	and	r2, r2
    149a:	09 f4       	brne	.+2      	; 0x149e <vfprintf+0x3b0>
    149c:	4e ce       	rjmp	.-868    	; 0x113a <vfprintf+0x4c>
    149e:	b6 01       	movw	r22, r12
    14a0:	80 e2       	ldi	r24, 0x20	; 32
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	37 d0       	rcall	.+110    	; 0x1514 <fputc>
    14a6:	2a 94       	dec	r2
    14a8:	f7 cf       	rjmp	.-18     	; 0x1498 <vfprintf+0x3aa>
    14aa:	f6 01       	movw	r30, r12
    14ac:	86 81       	ldd	r24, Z+6	; 0x06
    14ae:	97 81       	ldd	r25, Z+7	; 0x07
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <vfprintf+0x3c8>
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	9f ef       	ldi	r25, 0xFF	; 255
    14b6:	2b 96       	adiw	r28, 0x0b	; 11
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	df 90       	pop	r13
    14d0:	cf 90       	pop	r12
    14d2:	bf 90       	pop	r11
    14d4:	af 90       	pop	r10
    14d6:	9f 90       	pop	r9
    14d8:	8f 90       	pop	r8
    14da:	7f 90       	pop	r7
    14dc:	6f 90       	pop	r6
    14de:	5f 90       	pop	r5
    14e0:	4f 90       	pop	r4
    14e2:	3f 90       	pop	r3
    14e4:	2f 90       	pop	r2
    14e6:	08 95       	ret

000014e8 <strnlen_P>:
    14e8:	fc 01       	movw	r30, r24
    14ea:	05 90       	lpm	r0, Z+
    14ec:	61 50       	subi	r22, 0x01	; 1
    14ee:	70 40       	sbci	r23, 0x00	; 0
    14f0:	01 10       	cpse	r0, r1
    14f2:	d8 f7       	brcc	.-10     	; 0x14ea <strnlen_P+0x2>
    14f4:	80 95       	com	r24
    14f6:	90 95       	com	r25
    14f8:	8e 0f       	add	r24, r30
    14fa:	9f 1f       	adc	r25, r31
    14fc:	08 95       	ret

000014fe <strnlen>:
    14fe:	fc 01       	movw	r30, r24
    1500:	61 50       	subi	r22, 0x01	; 1
    1502:	70 40       	sbci	r23, 0x00	; 0
    1504:	01 90       	ld	r0, Z+
    1506:	01 10       	cpse	r0, r1
    1508:	d8 f7       	brcc	.-10     	; 0x1500 <strnlen+0x2>
    150a:	80 95       	com	r24
    150c:	90 95       	com	r25
    150e:	8e 0f       	add	r24, r30
    1510:	9f 1f       	adc	r25, r31
    1512:	08 95       	ret

00001514 <fputc>:
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	fb 01       	movw	r30, r22
    151e:	23 81       	ldd	r18, Z+3	; 0x03
    1520:	21 fd       	sbrc	r18, 1
    1522:	03 c0       	rjmp	.+6      	; 0x152a <fputc+0x16>
    1524:	8f ef       	ldi	r24, 0xFF	; 255
    1526:	9f ef       	ldi	r25, 0xFF	; 255
    1528:	2c c0       	rjmp	.+88     	; 0x1582 <fputc+0x6e>
    152a:	22 ff       	sbrs	r18, 2
    152c:	16 c0       	rjmp	.+44     	; 0x155a <fputc+0x46>
    152e:	46 81       	ldd	r20, Z+6	; 0x06
    1530:	57 81       	ldd	r21, Z+7	; 0x07
    1532:	24 81       	ldd	r18, Z+4	; 0x04
    1534:	35 81       	ldd	r19, Z+5	; 0x05
    1536:	42 17       	cp	r20, r18
    1538:	53 07       	cpc	r21, r19
    153a:	44 f4       	brge	.+16     	; 0x154c <fputc+0x38>
    153c:	a0 81       	ld	r26, Z
    153e:	b1 81       	ldd	r27, Z+1	; 0x01
    1540:	9d 01       	movw	r18, r26
    1542:	2f 5f       	subi	r18, 0xFF	; 255
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	31 83       	std	Z+1, r19	; 0x01
    1548:	20 83       	st	Z, r18
    154a:	8c 93       	st	X, r24
    154c:	26 81       	ldd	r18, Z+6	; 0x06
    154e:	37 81       	ldd	r19, Z+7	; 0x07
    1550:	2f 5f       	subi	r18, 0xFF	; 255
    1552:	3f 4f       	sbci	r19, 0xFF	; 255
    1554:	37 83       	std	Z+7, r19	; 0x07
    1556:	26 83       	std	Z+6, r18	; 0x06
    1558:	14 c0       	rjmp	.+40     	; 0x1582 <fputc+0x6e>
    155a:	8b 01       	movw	r16, r22
    155c:	ec 01       	movw	r28, r24
    155e:	fb 01       	movw	r30, r22
    1560:	00 84       	ldd	r0, Z+8	; 0x08
    1562:	f1 85       	ldd	r31, Z+9	; 0x09
    1564:	e0 2d       	mov	r30, r0
    1566:	19 95       	eicall
    1568:	89 2b       	or	r24, r25
    156a:	e1 f6       	brne	.-72     	; 0x1524 <fputc+0x10>
    156c:	d8 01       	movw	r26, r16
    156e:	16 96       	adiw	r26, 0x06	; 6
    1570:	8d 91       	ld	r24, X+
    1572:	9c 91       	ld	r25, X
    1574:	17 97       	sbiw	r26, 0x07	; 7
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	17 96       	adiw	r26, 0x07	; 7
    157a:	9c 93       	st	X, r25
    157c:	8e 93       	st	-X, r24
    157e:	16 97       	sbiw	r26, 0x06	; 6
    1580:	ce 01       	movw	r24, r28
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <__ultoa_invert>:
    158c:	fa 01       	movw	r30, r20
    158e:	aa 27       	eor	r26, r26
    1590:	28 30       	cpi	r18, 0x08	; 8
    1592:	51 f1       	breq	.+84     	; 0x15e8 <__ultoa_invert+0x5c>
    1594:	20 31       	cpi	r18, 0x10	; 16
    1596:	81 f1       	breq	.+96     	; 0x15f8 <__ultoa_invert+0x6c>
    1598:	e8 94       	clt
    159a:	6f 93       	push	r22
    159c:	6e 7f       	andi	r22, 0xFE	; 254
    159e:	6e 5f       	subi	r22, 0xFE	; 254
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	8f 4f       	sbci	r24, 0xFF	; 255
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	af 4f       	sbci	r26, 0xFF	; 255
    15a8:	b1 e0       	ldi	r27, 0x01	; 1
    15aa:	3e d0       	rcall	.+124    	; 0x1628 <__ultoa_invert+0x9c>
    15ac:	b4 e0       	ldi	r27, 0x04	; 4
    15ae:	3c d0       	rcall	.+120    	; 0x1628 <__ultoa_invert+0x9c>
    15b0:	67 0f       	add	r22, r23
    15b2:	78 1f       	adc	r23, r24
    15b4:	89 1f       	adc	r24, r25
    15b6:	9a 1f       	adc	r25, r26
    15b8:	a1 1d       	adc	r26, r1
    15ba:	68 0f       	add	r22, r24
    15bc:	79 1f       	adc	r23, r25
    15be:	8a 1f       	adc	r24, r26
    15c0:	91 1d       	adc	r25, r1
    15c2:	a1 1d       	adc	r26, r1
    15c4:	6a 0f       	add	r22, r26
    15c6:	71 1d       	adc	r23, r1
    15c8:	81 1d       	adc	r24, r1
    15ca:	91 1d       	adc	r25, r1
    15cc:	a1 1d       	adc	r26, r1
    15ce:	20 d0       	rcall	.+64     	; 0x1610 <__ultoa_invert+0x84>
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <__ultoa_invert+0x48>
    15d2:	68 94       	set
    15d4:	3f 91       	pop	r19
    15d6:	2a e0       	ldi	r18, 0x0A	; 10
    15d8:	26 9f       	mul	r18, r22
    15da:	11 24       	eor	r1, r1
    15dc:	30 19       	sub	r19, r0
    15de:	30 5d       	subi	r19, 0xD0	; 208
    15e0:	31 93       	st	Z+, r19
    15e2:	de f6       	brtc	.-74     	; 0x159a <__ultoa_invert+0xe>
    15e4:	cf 01       	movw	r24, r30
    15e6:	08 95       	ret
    15e8:	46 2f       	mov	r20, r22
    15ea:	47 70       	andi	r20, 0x07	; 7
    15ec:	40 5d       	subi	r20, 0xD0	; 208
    15ee:	41 93       	st	Z+, r20
    15f0:	b3 e0       	ldi	r27, 0x03	; 3
    15f2:	0f d0       	rcall	.+30     	; 0x1612 <__ultoa_invert+0x86>
    15f4:	c9 f7       	brne	.-14     	; 0x15e8 <__ultoa_invert+0x5c>
    15f6:	f6 cf       	rjmp	.-20     	; 0x15e4 <__ultoa_invert+0x58>
    15f8:	46 2f       	mov	r20, r22
    15fa:	4f 70       	andi	r20, 0x0F	; 15
    15fc:	40 5d       	subi	r20, 0xD0	; 208
    15fe:	4a 33       	cpi	r20, 0x3A	; 58
    1600:	18 f0       	brcs	.+6      	; 0x1608 <__ultoa_invert+0x7c>
    1602:	49 5d       	subi	r20, 0xD9	; 217
    1604:	31 fd       	sbrc	r19, 1
    1606:	40 52       	subi	r20, 0x20	; 32
    1608:	41 93       	st	Z+, r20
    160a:	02 d0       	rcall	.+4      	; 0x1610 <__ultoa_invert+0x84>
    160c:	a9 f7       	brne	.-22     	; 0x15f8 <__ultoa_invert+0x6c>
    160e:	ea cf       	rjmp	.-44     	; 0x15e4 <__ultoa_invert+0x58>
    1610:	b4 e0       	ldi	r27, 0x04	; 4
    1612:	a6 95       	lsr	r26
    1614:	97 95       	ror	r25
    1616:	87 95       	ror	r24
    1618:	77 95       	ror	r23
    161a:	67 95       	ror	r22
    161c:	ba 95       	dec	r27
    161e:	c9 f7       	brne	.-14     	; 0x1612 <__ultoa_invert+0x86>
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	61 05       	cpc	r22, r1
    1624:	71 05       	cpc	r23, r1
    1626:	08 95       	ret
    1628:	9b 01       	movw	r18, r22
    162a:	ac 01       	movw	r20, r24
    162c:	0a 2e       	mov	r0, r26
    162e:	06 94       	lsr	r0
    1630:	57 95       	ror	r21
    1632:	47 95       	ror	r20
    1634:	37 95       	ror	r19
    1636:	27 95       	ror	r18
    1638:	ba 95       	dec	r27
    163a:	c9 f7       	brne	.-14     	; 0x162e <__ultoa_invert+0xa2>
    163c:	62 0f       	add	r22, r18
    163e:	73 1f       	adc	r23, r19
    1640:	84 1f       	adc	r24, r20
    1642:	95 1f       	adc	r25, r21
    1644:	a0 1d       	adc	r26, r0
    1646:	08 95       	ret

00001648 <_exit>:
    1648:	f8 94       	cli

0000164a <__stop_program>:
    164a:	ff cf       	rjmp	.-2      	; 0x164a <__stop_program>
