
Freqref.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000216  00800200  0000166e  00001702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000166e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033f  00800416  00800416  00001918  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  000019b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005384  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001aee  00000000  00000000  000071dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002202  00000000  00000000  00008cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c08  00000000  00000000  0000aecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a10  00000000  00000000  0000bad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027de  00000000  00000000  0000d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  0000fcc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b5 c3       	rjmp	.+1898   	; 0x7cc <__vector_24>
      62:	00 00       	nop
      64:	2d c4       	rjmp	.+2138   	; 0x8c0 <__vector_25>
      66:	00 00       	nop
      68:	53 c4       	rjmp	.+2214   	; 0x910 <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	3e c3       	rjmp	.+1660   	; 0x6f6 <__vector_30>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8e c4       	rjmp	.+2332   	; 0x9ae <__vector_36>
      92:	00 00       	nop
      94:	b5 c4       	rjmp	.+2410   	; 0xa00 <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cb c6       	rjmp	.+3478   	; 0xe40 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d8 c6       	rjmp	.+3504   	; 0xe6e <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	27 c5       	rjmp	.+2638   	; 0xb1c <__vector_51>
      ce:	00 00       	nop
      d0:	4e c5       	rjmp	.+2716   	; 0xb6e <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b8 c5       	rjmp	.+2928   	; 0xc4a <__vector_54>
      da:	00 00       	nop
      dc:	df c5       	rjmp	.+3006   	; 0xc9c <__vector_55>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e6       	ldi	r30, 0x6E	; 110
      fc:	f6 e1       	ldi	r31, 0x16	; 22
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 31       	cpi	r26, 0x16	; 22
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	27 e0       	ldi	r18, 0x07	; 7
     110:	a6 e1       	ldi	r26, 0x16	; 22
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 35       	cpi	r26, 0x55	; 85
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	f5 d6       	rcall	.+3562   	; 0xf0a <main>
     120:	0c 94 35 0b 	jmp	0x166a	; 0x166a <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     126:	64 c2       	rjmp	.+1224   	; 0x5f0 <system_init>
     128:	08 95       	ret

0000012a <isGoodChecksum>:
	0x00,0x00,0x00,0x80,0x96,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
	0x00,0x00,0x00,0x00,0x6F,0x00,0x00,0x00,0x29,0xA8
	};

	sendPacket(packet, sizeof(packet));
}
     12a:	e5 ef       	ldi	r30, 0xF5	; 245
     12c:	f6 e0       	ldi	r31, 0x06	; 6
     12e:	4d e4       	ldi	r20, 0x4D	; 77
     130:	57 e0       	ldi	r21, 0x07	; 7
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	91 91       	ld	r25, Z+
     138:	89 0f       	add	r24, r25
     13a:	28 0f       	add	r18, r24
     13c:	e4 17       	cp	r30, r20
     13e:	f5 07       	cpc	r31, r21
     140:	d1 f7       	brne	.-12     	; 0x136 <isGoodChecksum+0xc>
     142:	90 91 4d 07 	lds	r25, 0x074D	; 0x80074d <PACKETstore+0x5a>
     146:	89 13       	cpse	r24, r25
     148:	08 c0       	rjmp	.+16     	; 0x15a <isGoodChecksum+0x30>
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	30 91 4e 07 	lds	r19, 0x074E	; 0x80074e <PACKETstore+0x5b>
     152:	32 17       	cp	r19, r18
     154:	21 f0       	breq	.+8      	; 0x15e <isGoodChecksum+0x34>
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	08 95       	ret
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	08 95       	ret

00000160 <printPacket>:
     160:	8f 92       	push	r8
     162:	9f 92       	push	r9
     164:	af 92       	push	r10
     166:	bf 92       	push	r11
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	00 d0       	rcall	.+0      	; 0x17a <printPacket+0x1a>
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	06 2f       	mov	r16, r22
     180:	66 23       	and	r22, r22
     182:	99 f1       	breq	.+102    	; 0x1ea <printPacket+0x8a>
     184:	e8 2e       	mov	r14, r24
     186:	f9 2e       	mov	r15, r25
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	0f 2e       	mov	r0, r31
     18c:	f3 ec       	ldi	r31, 0xC3	; 195
     18e:	8f 2e       	mov	r8, r31
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	9f 2e       	mov	r9, r31
     194:	f0 2d       	mov	r31, r0
     196:	0f 2e       	mov	r0, r31
     198:	ff ed       	ldi	r31, 0xDF	; 223
     19a:	af 2e       	mov	r10, r31
     19c:	f2 e0       	ldi	r31, 0x02	; 2
     19e:	bf 2e       	mov	r11, r31
     1a0:	f0 2d       	mov	r31, r0
     1a2:	ce 01       	movw	r24, r28
     1a4:	01 96       	adiw	r24, 0x01	; 1
     1a6:	6c 01       	movw	r12, r24
     1a8:	81 2f       	mov	r24, r17
     1aa:	8f 70       	andi	r24, 0x0F	; 15
     1ac:	31 f4       	brne	.+12     	; 0x1ba <printPacket+0x5a>
     1ae:	9f 92       	push	r9
     1b0:	8f 92       	push	r8
     1b2:	38 d7       	rcall	.+3696   	; 0x1024 <printf>
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <printPacket+0x60>
     1ba:	80 e2       	ldi	r24, 0x20	; 32
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	45 d7       	rcall	.+3722   	; 0x104a <putchar>
     1c0:	f7 01       	movw	r30, r14
     1c2:	81 91       	ld	r24, Z+
     1c4:	7f 01       	movw	r14, r30
     1c6:	1f 92       	push	r1
     1c8:	8f 93       	push	r24
     1ca:	bf 92       	push	r11
     1cc:	af 92       	push	r10
     1ce:	df 92       	push	r13
     1d0:	cf 92       	push	r12
     1d2:	70 d7       	rcall	.+3808   	; 0x10b4 <sprintf>
     1d4:	df 92       	push	r13
     1d6:	cf 92       	push	r12
     1d8:	25 d7       	rcall	.+3658   	; 0x1024 <printf>
     1da:	1f 5f       	subi	r17, 0xFF	; 255
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
     1e6:	01 13       	cpse	r16, r17
     1e8:	df cf       	rjmp	.-66     	; 0x1a8 <printPacket+0x48>
     1ea:	83 ec       	ldi	r24, 0xC3	; 195
     1ec:	93 e0       	ldi	r25, 0x03	; 3
     1ee:	9f 93       	push	r25
     1f0:	8f 93       	push	r24
     1f2:	18 d7       	rcall	.+3632   	; 0x1024 <printf>
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	0f 91       	pop	r16
     206:	ff 90       	pop	r15
     208:	ef 90       	pop	r14
     20a:	df 90       	pop	r13
     20c:	cf 90       	pop	r12
     20e:	bf 90       	pop	r11
     210:	af 90       	pop	r10
     212:	9f 90       	pop	r9
     214:	8f 90       	pop	r8
     216:	08 95       	ret

00000218 <sendPacket>:
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	7c 01       	movw	r14, r24
     228:	d6 2e       	mov	r13, r22
     22a:	66 23       	and	r22, r22
     22c:	69 f0       	breq	.+26     	; 0x248 <sendPacket+0x30>
     22e:	ec 01       	movw	r28, r24
     230:	0f ef       	ldi	r16, 0xFF	; 255
     232:	06 0f       	add	r16, r22
     234:	10 e0       	ldi	r17, 0x00	; 0
     236:	0f 5f       	subi	r16, 0xFF	; 255
     238:	1f 4f       	sbci	r17, 0xFF	; 255
     23a:	08 0f       	add	r16, r24
     23c:	19 1f       	adc	r17, r25
     23e:	89 91       	ld	r24, Y+
     240:	31 d4       	rcall	.+2146   	; 0xaa4 <USART_1_write>
     242:	c0 17       	cp	r28, r16
     244:	d1 07       	cpc	r29, r17
     246:	d9 f7       	brne	.-10     	; 0x23e <sendPacket+0x26>
     248:	6d 2d       	mov	r22, r13
     24a:	c7 01       	movw	r24, r14
     24c:	89 df       	rcall	.-238    	; 0x160 <printPacket>
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	ff 90       	pop	r15
     258:	ef 90       	pop	r14
     25a:	df 90       	pop	r13
     25c:	08 95       	ret

0000025e <disableNmea>:
     25e:	cf 92       	push	r12
     260:	df 92       	push	r13
     262:	ef 92       	push	r14
     264:	ff 92       	push	r15
     266:	0f 93       	push	r16
     268:	1f 93       	push	r17
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	e3 97       	sbiw	r28, 0x33	; 51
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
     27e:	88 e2       	ldi	r24, 0x28	; 40
     280:	e3 e2       	ldi	r30, 0x23	; 35
     282:	f2 e0       	ldi	r31, 0x02	; 2
     284:	de 01       	movw	r26, r28
     286:	11 96       	adiw	r26, 0x01	; 1
     288:	01 90       	ld	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	8a 95       	dec	r24
     28e:	e1 f7       	brne	.-8      	; 0x288 <disableNmea+0x2a>
     290:	8b e0       	ldi	r24, 0x0B	; 11
     292:	eb e4       	ldi	r30, 0x4B	; 75
     294:	f2 e0       	ldi	r31, 0x02	; 2
     296:	de 01       	movw	r26, r28
     298:	99 96       	adiw	r26, 0x29	; 41
     29a:	01 90       	ld	r0, Z+
     29c:	0d 92       	st	X+, r0
     29e:	8a 95       	dec	r24
     2a0:	e1 f7       	brne	.-8      	; 0x29a <disableNmea+0x3c>
     2a2:	ce 01       	movw	r24, r28
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	7c 01       	movw	r14, r24
     2a8:	6e 01       	movw	r12, r28
     2aa:	99 e2       	ldi	r25, 0x29	; 41
     2ac:	c9 0e       	add	r12, r25
     2ae:	d1 1c       	adc	r13, r1
     2b0:	8e 01       	movw	r16, r28
     2b2:	0e 5c       	subi	r16, 0xCE	; 206
     2b4:	1f 4f       	sbci	r17, 0xFF	; 255
     2b6:	14 c0       	rjmp	.+40     	; 0x2e0 <disableNmea+0x82>
     2b8:	91 91       	ld	r25, Z+
     2ba:	8a a9       	ldd	r24, Y+50	; 0x32
     2bc:	89 0f       	add	r24, r25
     2be:	8a ab       	std	Y+50, r24	; 0x32
     2c0:	9b a9       	ldd	r25, Y+51	; 0x33
     2c2:	89 0f       	add	r24, r25
     2c4:	8b ab       	std	Y+51, r24	; 0x33
     2c6:	e0 17       	cp	r30, r16
     2c8:	f1 07       	cpc	r31, r17
     2ca:	b1 f7       	brne	.-20     	; 0x2b8 <disableNmea+0x5a>
     2cc:	6b e0       	ldi	r22, 0x0B	; 11
     2ce:	ce 01       	movw	r24, r28
     2d0:	89 96       	adiw	r24, 0x29	; 41
     2d2:	a2 df       	rcall	.-188    	; 0x218 <sendPacket>
     2d4:	e2 e0       	ldi	r30, 0x02	; 2
     2d6:	ee 0e       	add	r14, r30
     2d8:	f1 1c       	adc	r15, r1
     2da:	ce 14       	cp	r12, r14
     2dc:	df 04       	cpc	r13, r15
     2de:	51 f0       	breq	.+20     	; 0x2f4 <disableNmea+0x96>
     2e0:	f7 01       	movw	r30, r14
     2e2:	80 81       	ld	r24, Z
     2e4:	8f a7       	std	Y+47, r24	; 0x2f
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
     2e8:	88 ab       	std	Y+48, r24	; 0x30
     2ea:	1a aa       	std	Y+50, r1	; 0x32
     2ec:	1b aa       	std	Y+51, r1	; 0x33
     2ee:	fe 01       	movw	r30, r28
     2f0:	bb 96       	adiw	r30, 0x2b	; 43
     2f2:	e2 cf       	rjmp	.-60     	; 0x2b8 <disableNmea+0x5a>
     2f4:	e3 96       	adiw	r28, 0x33	; 51
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	cf 90       	pop	r12
     310:	08 95       	ret

00000312 <changeFrequency>:
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	2e 97       	sbiw	r28, 0x0e	; 14
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
     326:	8e e0       	ldi	r24, 0x0E	; 14
     328:	e2 e7       	ldi	r30, 0x72	; 114
     32a:	f2 e0       	ldi	r31, 0x02	; 2
     32c:	de 01       	movw	r26, r28
     32e:	11 96       	adiw	r26, 0x01	; 1
     330:	01 90       	ld	r0, Z+
     332:	0d 92       	st	X+, r0
     334:	8a 95       	dec	r24
     336:	e1 f7       	brne	.-8      	; 0x330 <changeFrequency+0x1e>
     338:	6e e0       	ldi	r22, 0x0E	; 14
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	6c df       	rcall	.-296    	; 0x218 <sendPacket>
     340:	2e 96       	adiw	r28, 0x0e	; 14
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <disableUnnecessaryChannels>:
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	ac 97       	sbiw	r28, 0x2c	; 44
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	8c e2       	ldi	r24, 0x2C	; 44
     368:	e0 e8       	ldi	r30, 0x80	; 128
     36a:	f2 e0       	ldi	r31, 0x02	; 2
     36c:	de 01       	movw	r26, r28
     36e:	11 96       	adiw	r26, 0x01	; 1
     370:	01 90       	ld	r0, Z+
     372:	0d 92       	st	X+, r0
     374:	8a 95       	dec	r24
     376:	e1 f7       	brne	.-8      	; 0x370 <disableUnnecessaryChannels+0x1e>
     378:	6c e2       	ldi	r22, 0x2C	; 44
     37a:	ce 01       	movw	r24, r28
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	4c df       	rcall	.-360    	; 0x218 <sendPacket>
     380:	ac 96       	adiw	r28, 0x2c	; 44
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <enableNavPvt>:
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	2b 97       	sbiw	r28, 0x0b	; 11
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
     3a6:	8b e0       	ldi	r24, 0x0B	; 11
     3a8:	ec ea       	ldi	r30, 0xAC	; 172
     3aa:	f2 e0       	ldi	r31, 0x02	; 2
     3ac:	de 01       	movw	r26, r28
     3ae:	11 96       	adiw	r26, 0x01	; 1
     3b0:	01 90       	ld	r0, Z+
     3b2:	0d 92       	st	X+, r0
     3b4:	8a 95       	dec	r24
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <enableNavPvt+0x1e>
     3b8:	6b e0       	ldi	r22, 0x0B	; 11
     3ba:	ce 01       	movw	r24, r28
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	2c df       	rcall	.-424    	; 0x218 <sendPacket>
     3c0:	2b 96       	adiw	r28, 0x0b	; 11
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c)  
{   
   // get current position in packet
   unsigned char p = UbxGpsv.carriagePosition; 
     3d2:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <__data_end+0x3>
   if (p < 2)     // this should only care about PVT messages
     3d6:	92 30       	cpi	r25, 0x02	; 2
     3d8:	70 f4       	brcc	.+28     	; 0x3f6 <IsPacketReady+0x24>
   {		
		// are we starting a packet?
		if (c == UBXGPS_HEADER[p]) 
     3da:	29 2f       	mov	r18, r25
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	f9 01       	movw	r30, r18
     3e0:	ea 53       	subi	r30, 0x3A	; 58
     3e2:	fc 4f       	sbci	r31, 0xFC	; 252
     3e4:	40 81       	ld	r20, Z
     3e6:	84 13       	cpse	r24, r20
     3e8:	16 c0       	rjmp	.+44     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		{
			PACKETstore[p] = c;
     3ea:	f9 01       	movw	r30, r18
     3ec:	ed 50       	subi	r30, 0x0D	; 13
     3ee:	f9 4f       	sbci	r31, 0xF9	; 249
     3f0:	80 83       	st	Z, r24
			p++; 			
     3f2:	9f 5f       	subi	r25, 0xFF	; 255
     3f4:	11 c0       	rjmp	.+34     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
   // found a packet header, start filling
   else 
   
   {
		//if we are here, we've got some of the right packet.  Lets just try getting all 86 bytes
		if(p <93)
     3f6:	9d 35       	cpi	r25, 0x5D	; 93
     3f8:	38 f4       	brcc	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		{
			PACKETstore[p] = c;
     3fa:	e9 2f       	mov	r30, r25
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	ed 50       	subi	r30, 0x0D	; 13
     400:	f9 4f       	sbci	r31, 0xF9	; 249
     402:	80 83       	st	Z, r24
			p++;
     404:	9f 5f       	subi	r25, 0xFF	; 255
     406:	08 c0       	rjmp	.+16     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		 
		}
		else
		{
			p=0;
			UbxGpsv.carriagePosition =p;
     408:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <__data_end+0x3>
			if(isGoodChecksum())
     40c:	8e de       	rcall	.-740    	; 0x12a <isGoodChecksum>
     40e:	89 2b       	or	r24, r25
			p++;
		 
		}
		else
		{
			p=0;
     410:	41 f4       	brne	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     412:	90 e0       	ldi	r25, 0x00	; 0
			PACKETstore[p] = c;
			p++; 			
		} 
		else 
		{ 
			p = 0;
     414:	01 c0       	rjmp	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				return true;
			}

		}
	}	
	UbxGpsv.carriagePosition =p;
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <__data_end+0x3>
	return false;
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
		{
			p=0;
			UbxGpsv.carriagePosition =p;
			if(isGoodChecksum())
			{
				return true;
     420:	08 95       	ret
     422:	81 e0       	ldi	r24, 0x01	; 1

		}
	}	
	UbxGpsv.carriagePosition =p;
	return false;
}
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	08 95       	ret

00000428 <loop>:
#define PRINTDEBUG
//#define GPSOUT  // uncomment if you want to use u-Center

// If there is data from the receiver, read it and send to the PC or vice versa
void loop() 
{
     428:	cf 93       	push	r28
	const unsigned char offset =6;
	unsigned char data;
	if (USART_1_is_rx_ready()) 
     42a:	df 93       	push	r29
     42c:	1b d3       	rcall	.+1590   	; 0xa64 <USART_1_is_rx_ready>
	{
		data = USART_1_read();
     42e:	88 23       	and	r24, r24
#ifdef GPSOUT
		USART_3_write(data);
#else
		if(IsPacketReady(data))
     430:	09 f4       	brne	.+2      	; 0x434 <loop+0xc>
     432:	3e c0       	rjmp	.+124    	; 0x4b0 <loop+0x88>
     434:	1e d3       	rcall	.+1596   	; 0xa72 <USART_1_read>
     436:	cd df       	rcall	.-102    	; 0x3d2 <IsPacketReady>
     438:	89 2b       	or	r24, r25
     43a:	d1 f1       	breq	.+116    	; 0x4b0 <loop+0x88>
     43c:	e9 ef       	ldi	r30, 0xF9	; 249
     43e:	f6 e0       	ldi	r31, 0x06	; 6
     440:	a3 e4       	ldi	r26, 0x43	; 67
     442:	b6 e0       	ldi	r27, 0x06	; 6
		{
			//printPacket(PACKETstore,92);
			for(unsigned int i = offset; i<sizeof(realPacket); i++)
			{
				*((char*)(&realPacket) + (i-offset)) = PACKETstore[i];
     444:	27 e4       	ldi	r18, 0x47	; 71
     446:	37 e0       	ldi	r19, 0x07	; 7
		USART_3_write(data);
#else
		if(IsPacketReady(data))
		{
			//printPacket(PACKETstore,92);
			for(unsigned int i = offset; i<sizeof(realPacket); i++)
     448:	81 91       	ld	r24, Z+
     44a:	8d 93       	st	X+, r24
     44c:	e2 17       	cp	r30, r18
			{
				*((char*)(&realPacket) + (i-offset)) = PACKETstore[i];
			}
		
#ifdef PRINTDEBUG
			printf("Date  %d %d %d  ", realPacket.day, realPacket.month,  realPacket.year);
     44e:	f3 07       	cpc	r31, r19
     450:	d9 f7       	brne	.-10     	; 0x448 <loop+0x20>
     452:	c3 e4       	ldi	r28, 0x43	; 67
     454:	d6 e0       	ldi	r29, 0x06	; 6
     456:	8d 81       	ldd	r24, Y+5	; 0x05
     458:	8f 93       	push	r24
     45a:	8c 81       	ldd	r24, Y+4	; 0x04
     45c:	8f 93       	push	r24
     45e:	8e 81       	ldd	r24, Y+6	; 0x06
     460:	1f 92       	push	r1
     462:	8f 93       	push	r24
     464:	8f 81       	ldd	r24, Y+7	; 0x07
     466:	1f 92       	push	r1
     468:	8f 93       	push	r24
     46a:	84 ee       	ldi	r24, 0xE4	; 228
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	9f 93       	push	r25
			printf("Time %d:%d:%d  UTC     Epoch  %lu\r\n", realPacket.hour, realPacket.min,  realPacket.sec,realPacket.iTOW);
     470:	8f 93       	push	r24
     472:	d8 d5       	rcall	.+2992   	; 0x1024 <printf>
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	8f 93       	push	r24
     478:	8a 81       	ldd	r24, Y+2	; 0x02
     47a:	8f 93       	push	r24
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	8f 93       	push	r24
     480:	88 81       	ld	r24, Y
     482:	8f 93       	push	r24
     484:	8a 85       	ldd	r24, Y+10	; 0x0a
     486:	1f 92       	push	r1
     488:	8f 93       	push	r24
     48a:	89 85       	ldd	r24, Y+9	; 0x09
     48c:	1f 92       	push	r1
     48e:	8f 93       	push	r24
     490:	88 85       	ldd	r24, Y+8	; 0x08
     492:	1f 92       	push	r1
     494:	8f 93       	push	r24
     496:	85 ef       	ldi	r24, 0xF5	; 245
     498:	92 e0       	ldi	r25, 0x02	; 2
     49a:	9f 93       	push	r25
     49c:	8f 93       	push	r24
     49e:	c2 d5       	rcall	.+2948   	; 0x1024 <printf>
     4a0:	8d b7       	in	r24, 0x3d	; 61
     4a2:	9e b7       	in	r25, 0x3e	; 62
     4a4:	44 96       	adiw	r24, 0x14	; 20
#endif
		}
#endif
	}
	if (USART_3_is_rx_ready()) 
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	9e bf       	out	0x3e, r25	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
	{
		USART_1_write(USART_3_read());
     4ae:	8d bf       	out	0x3d, r24	; 61
     4b0:	27 d4       	rcall	.+2126   	; 0xd00 <USART_3_is_rx_ready>
     4b2:	88 23       	and	r24, r24
     4b4:	11 f0       	breq	.+4      	; 0x4ba <loop+0x92>
	}
}
     4b6:	2b d4       	rcall	.+2134   	; 0xd0e <USART_3_read>
     4b8:	f5 d2       	rcall	.+1514   	; 0xaa4 <USART_1_write>
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <updategps>:
     4c0:	b3 cf       	rjmp	.-154    	; 0x428 <loop>
     4c2:	08 95       	ret

000004c4 <setupneo>:
     4c4:	89 e1       	ldi	r24, 0x19	; 25
     4c6:	93 e0       	ldi	r25, 0x03	; 3
     4c8:	9f 93       	push	r25
     4ca:	8f 93       	push	r24
     4cc:	ab d5       	rcall	.+2902   	; 0x1024 <printf>
     4ce:	c7 de       	rcall	.-626    	; 0x25e <disableNmea>
     4d0:	86 e3       	ldi	r24, 0x36	; 54
     4d2:	93 e0       	ldi	r25, 0x03	; 3
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	a5 d5       	rcall	.+2890   	; 0x1024 <printf>
     4da:	1b df       	rcall	.-458    	; 0x312 <changeFrequency>
     4dc:	82 e6       	ldi	r24, 0x62	; 98
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	b9 d5       	rcall	.+2930   	; 0x1054 <puts>
     4e2:	37 df       	rcall	.-402    	; 0x352 <disableUnnecessaryChannels>
     4e4:	85 e8       	ldi	r24, 0x85	; 133
     4e6:	93 e0       	ldi	r25, 0x03	; 3
     4e8:	9f 93       	push	r25
     4ea:	8f 93       	push	r24
     4ec:	9b d5       	rcall	.+2870   	; 0x1024 <printf>
     4ee:	51 df       	rcall	.-350    	; 0x392 <enableNavPvt>
     4f0:	84 ea       	ldi	r24, 0xA4	; 164
     4f2:	93 e0       	ldi	r25, 0x03	; 3
     4f4:	9f 93       	push	r25
     4f6:	8f 93       	push	r24
     4f8:	95 d5       	rcall	.+2858   	; 0x1024 <printf>
     4fa:	84 e6       	ldi	r24, 0x64	; 100
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	70 d4       	rcall	.+2272   	; 0xde0 <fastdelay_ms>
     500:	8d b7       	in	r24, 0x3d	; 61
     502:	9e b7       	in	r25, 0x3e	; 62
     504:	08 96       	adiw	r24, 0x08	; 8
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	9e bf       	out	0x3e, r25	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	8d bf       	out	0x3d, r24	; 61
     510:	08 95       	ret

00000512 <setndig>:
	return(i);
}

// write a number digit on the LCD to a num object
void setndig(char *id, uint8_t val)
{
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	60 97       	sbiw	r28, 0x10	; 16
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
	int i;
	char msg[16];
	
	sprintf(msg,"%s.val=%1d\xff\xff\xff",id,val);
     52a:	1f 92       	push	r1
     52c:	6f 93       	push	r22
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	8a ec       	ldi	r24, 0xCA	; 202
     534:	93 e0       	ldi	r25, 0x03	; 3
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	ce 01       	movw	r24, r28
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	b8 d5       	rcall	.+2928   	; 0x10b4 <sprintf>
	for (i=0; msg[i]; i++)
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	88 23       	and	r24, r24
     552:	49 f0       	breq	.+18     	; 0x566 <setndig+0x54>
     554:	8e 01       	movw	r16, r28
     556:	0e 5f       	subi	r16, 0xFE	; 254
	{
		USART_2_write(msg[i]);
     558:	1f 4f       	sbci	r17, 0xFF	; 255
     55a:	3b d3       	rcall	.+1654   	; 0xbd2 <USART_2_write>
{
	int i;
	char msg[16];
	
	sprintf(msg,"%s.val=%1d\xff\xff\xff",id,val);
	for (i=0; msg[i]; i++)
     55c:	f8 01       	movw	r30, r16
     55e:	81 91       	ld	r24, Z+
     560:	8f 01       	movw	r16, r30
     562:	81 11       	cpse	r24, r1
     564:	fa cf       	rjmp	.-12     	; 0x55a <setndig+0x48>
	{
		USART_2_write(msg[i]);
	}
}
     566:	60 96       	adiw	r28, 0x10	; 16
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	08 95       	ret

0000057c <SPI_0_initialization>:
}

void TIMER_1_initialization(void)
{

	TIMER_1_init();
     57c:	23 98       	cbi	0x04, 3	; 4
     57e:	2b 98       	cbi	0x05, 3	; 5
     580:	22 9a       	sbi	0x04, 2	; 4
     582:	2a 98       	cbi	0x05, 2	; 5
     584:	21 9a       	sbi	0x04, 1	; 4
     586:	29 98       	cbi	0x05, 1	; 5
     588:	20 9a       	sbi	0x04, 0	; 4
     58a:	28 98       	cbi	0x05, 0	; 5
     58c:	12 c1       	rjmp	.+548    	; 0x7b2 <SPI_0_init>
     58e:	08 95       	ret

00000590 <USART_0_initialization>:
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
     590:	68 98       	cbi	0x0d, 0	; 13
		DDRE &= ~(1 << pin);

		PORTE |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTE &= ~(1 << pin);
     592:	70 98       	cbi	0x0e, 0	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
     594:	69 9a       	sbi	0x0d, 1	; 13
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     596:	71 98       	cbi	0x0e, 1	; 14
     598:	ed c1       	rjmp	.+986    	; 0x974 <USART_0_init>
     59a:	08 95       	ret

0000059c <USART_1_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     59c:	52 98       	cbi	0x0a, 2	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     59e:	5a 98       	cbi	0x0b, 2	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     5a0:	53 9a       	sbi	0x0a, 3	; 10
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_1_init();
     5a2:	5b 98       	cbi	0x0b, 3	; 11
     5a4:	9e c2       	rjmp	.+1340   	; 0xae2 <USART_1_init>
     5a6:	08 95       	ret

000005a8 <USART_2_initialization>:
 */
static inline void PORTH_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
     5a8:	a1 e0       	ldi	r26, 0x01	; 1
     5aa:	b1 e0       	ldi	r27, 0x01	; 1
     5ac:	8c 91       	ld	r24, X
     5ae:	8e 7f       	andi	r24, 0xFE	; 254
     5b0:	8c 93       	st	X, r24
		DDRH &= ~(1 << pin);

		PORTH |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTH &= ~(1 << pin);
     5b2:	e2 e0       	ldi	r30, 0x02	; 2
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	80 81       	ld	r24, Z
     5b8:	8e 7f       	andi	r24, 0xFE	; 254
     5ba:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRH |= 1 << pin;
     5bc:	8c 91       	ld	r24, X
     5be:	82 60       	ori	r24, 0x02	; 2
     5c0:	8c 93       	st	X, r24
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
     5c2:	80 81       	ld	r24, Z
     5c4:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_2_init();
     5c6:	80 83       	st	Z, r24
     5c8:	23 c3       	rjmp	.+1606   	; 0xc10 <USART_2_init>
     5ca:	08 95       	ret

000005cc <USART_3_initialization>:
 */
static inline void PORTJ_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
     5cc:	a4 e0       	ldi	r26, 0x04	; 4
     5ce:	b1 e0       	ldi	r27, 0x01	; 1
     5d0:	8c 91       	ld	r24, X
     5d2:	8e 7f       	andi	r24, 0xFE	; 254
     5d4:	8c 93       	st	X, r24
		DDRJ &= ~(1 << pin);

		PORTJ |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTJ &= ~(1 << pin);
     5d6:	e5 e0       	ldi	r30, 0x05	; 5
     5d8:	f1 e0       	ldi	r31, 0x01	; 1
     5da:	80 81       	ld	r24, Z
     5dc:	8e 7f       	andi	r24, 0xFE	; 254
     5de:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRJ |= 1 << pin;
     5e0:	8c 91       	ld	r24, X
     5e2:	82 60       	ori	r24, 0x02	; 2
     5e4:	8c 93       	st	X, r24
static inline void PORTJ_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTJ |= 1 << pin;
	} else {
		PORTJ &= ~(1 << pin);
     5e6:	80 81       	ld	r24, Z
     5e8:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_3_init();
     5ea:	80 83       	st	Z, r24
     5ec:	cc c3       	rjmp	.+1944   	; 0xd86 <USART_3_init>
     5ee:	08 95       	ret

000005f0 <system_init>:
     5f0:	8f e3       	ldi	r24, 0x3F	; 63
     5f2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
     5f6:	8f ee       	ldi	r24, 0xEF	; 239
     5f8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     5fc:	81 b1       	in	r24, 0x01	; 1
     5fe:	11 b8       	out	0x01, r1	; 1
     600:	82 b1       	in	r24, 0x02	; 2
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	82 b9       	out	0x02, r24	; 2
     606:	94 b1       	in	r25, 0x04	; 4
     608:	14 b8       	out	0x04, r1	; 4
     60a:	95 b1       	in	r25, 0x05	; 5
     60c:	85 b9       	out	0x05, r24	; 5
     60e:	97 b1       	in	r25, 0x07	; 7
     610:	17 b8       	out	0x07, r1	; 7
     612:	98 b1       	in	r25, 0x08	; 8
     614:	88 b9       	out	0x08, r24	; 8
     616:	9a b1       	in	r25, 0x0a	; 10
     618:	1a b8       	out	0x0a, r1	; 10
     61a:	9b b1       	in	r25, 0x0b	; 11
     61c:	8b b9       	out	0x0b, r24	; 11
     61e:	9d b1       	in	r25, 0x0d	; 13
     620:	1d b8       	out	0x0d, r1	; 13
     622:	9e b1       	in	r25, 0x0e	; 14
     624:	8e b9       	out	0x0e, r24	; 14
     626:	90 b3       	in	r25, 0x10	; 16
     628:	10 ba       	out	0x10, r1	; 16
     62a:	91 b3       	in	r25, 0x11	; 17
     62c:	81 bb       	out	0x11, r24	; 17
     62e:	93 b3       	in	r25, 0x13	; 19
     630:	90 7c       	andi	r25, 0xC0	; 192
     632:	93 bb       	out	0x13, r25	; 19
     634:	94 b3       	in	r25, 0x14	; 20
     636:	9f 63       	ori	r25, 0x3F	; 63
     638:	94 bb       	out	0x14, r25	; 20
     63a:	e1 e0       	ldi	r30, 0x01	; 1
     63c:	f1 e0       	ldi	r31, 0x01	; 1
     63e:	90 81       	ld	r25, Z
     640:	10 82       	st	Z, r1
     642:	e2 e0       	ldi	r30, 0x02	; 2
     644:	f1 e0       	ldi	r31, 0x01	; 1
     646:	90 81       	ld	r25, Z
     648:	80 83       	st	Z, r24
     64a:	e4 e0       	ldi	r30, 0x04	; 4
     64c:	f1 e0       	ldi	r31, 0x01	; 1
     64e:	90 81       	ld	r25, Z
     650:	10 82       	st	Z, r1
     652:	e5 e0       	ldi	r30, 0x05	; 5
     654:	f1 e0       	ldi	r31, 0x01	; 1
     656:	90 81       	ld	r25, Z
     658:	80 83       	st	Z, r24
     65a:	e7 e0       	ldi	r30, 0x07	; 7
     65c:	f1 e0       	ldi	r31, 0x01	; 1
     65e:	90 81       	ld	r25, Z
     660:	10 82       	st	Z, r1
     662:	e8 e0       	ldi	r30, 0x08	; 8
     664:	f1 e0       	ldi	r31, 0x01	; 1
     666:	90 81       	ld	r25, Z
     668:	80 83       	st	Z, r24
     66a:	aa e0       	ldi	r26, 0x0A	; 10
     66c:	b1 e0       	ldi	r27, 0x01	; 1
     66e:	9c 91       	ld	r25, X
     670:	1c 92       	st	X, r1
     672:	eb e0       	ldi	r30, 0x0B	; 11
     674:	f1 e0       	ldi	r31, 0x01	; 1
     676:	90 81       	ld	r25, Z
     678:	80 83       	st	Z, r24
     67a:	0a 9a       	sbi	0x01, 2	; 1
     67c:	12 98       	cbi	0x02, 2	; 2
     67e:	0b 9a       	sbi	0x01, 3	; 1
     680:	13 98       	cbi	0x02, 3	; 2
     682:	0c 9a       	sbi	0x01, 4	; 1
     684:	14 98       	cbi	0x02, 4	; 2
     686:	0d 9a       	sbi	0x01, 5	; 1
     688:	15 98       	cbi	0x02, 5	; 2
     68a:	0e 9a       	sbi	0x01, 6	; 1
     68c:	16 98       	cbi	0x02, 6	; 2
     68e:	0f 9a       	sbi	0x01, 7	; 1
     690:	17 98       	cbi	0x02, 7	; 2
     692:	38 98       	cbi	0x07, 0	; 7
     694:	40 98       	cbi	0x08, 0	; 8
     696:	39 98       	cbi	0x07, 1	; 7
     698:	41 98       	cbi	0x08, 1	; 8
     69a:	3a 98       	cbi	0x07, 2	; 7
     69c:	42 98       	cbi	0x08, 2	; 8
     69e:	3b 98       	cbi	0x07, 3	; 7
     6a0:	43 98       	cbi	0x08, 3	; 8
     6a2:	3c 98       	cbi	0x07, 4	; 7
     6a4:	44 98       	cbi	0x08, 4	; 8
     6a6:	3d 98       	cbi	0x07, 5	; 7
     6a8:	45 98       	cbi	0x08, 5	; 8
     6aa:	3e 98       	cbi	0x07, 6	; 7
     6ac:	46 98       	cbi	0x08, 6	; 8
     6ae:	3f 98       	cbi	0x07, 7	; 7
     6b0:	47 98       	cbi	0x08, 7	; 8
     6b2:	8c 91       	ld	r24, X
     6b4:	81 60       	ori	r24, 0x01	; 1
     6b6:	8c 93       	st	X, r24
     6b8:	80 81       	ld	r24, Z
     6ba:	8e 7f       	andi	r24, 0xFE	; 254
     6bc:	80 83       	st	Z, r24
     6be:	8c 91       	ld	r24, X
     6c0:	82 60       	ori	r24, 0x02	; 2
     6c2:	8c 93       	st	X, r24
     6c4:	80 81       	ld	r24, Z
     6c6:	82 60       	ori	r24, 0x02	; 2
     6c8:	80 83       	st	Z, r24
     6ca:	8c 91       	ld	r24, X
     6cc:	84 60       	ori	r24, 0x04	; 4
     6ce:	8c 93       	st	X, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	84 60       	ori	r24, 0x04	; 4
     6d4:	80 83       	st	Z, r24
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	60 e8       	ldi	r22, 0x80	; 128
     6da:	81 e6       	ldi	r24, 0x61	; 97
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	61 d0       	rcall	.+194    	; 0x7a2 <protected_write_io>
     6e0:	13 be       	out	0x33, r1	; 51
     6e2:	15 be       	out	0x35, r1	; 53
     6e4:	58 d0       	rcall	.+176    	; 0x796 <FLASH_0_init>
     6e6:	4a df       	rcall	.-364    	; 0x57c <SPI_0_initialization>
     6e8:	cb d0       	rcall	.+406    	; 0x880 <TIMER_0_init>
     6ea:	d7 d0       	rcall	.+430    	; 0x89a <TIMER_1_init>
     6ec:	51 df       	rcall	.-350    	; 0x590 <USART_0_initialization>
     6ee:	56 df       	rcall	.-340    	; 0x59c <USART_1_initialization>
     6f0:	5b df       	rcall	.-330    	; 0x5a8 <USART_2_initialization>
     6f2:	6c cf       	rjmp	.-296    	; 0x5cc <USART_3_initialization>
     6f4:	08 95       	ret

000006f6 <__vector_30>:
 *
 * \return Nothing.
 */
void FLASH_0_register_callback(eeprom_write_done_cb_t f)
{
	FLASH_0_desc.cb = f;
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	0b b6       	in	r0, 0x3b	; 59
     702:	0f 92       	push	r0
     704:	2f 93       	push	r18
     706:	3f 93       	push	r19
     708:	4f 93       	push	r20
     70a:	5f 93       	push	r21
     70c:	6f 93       	push	r22
     70e:	7f 93       	push	r23
     710:	8f 93       	push	r24
     712:	9f 93       	push	r25
     714:	af 93       	push	r26
     716:	bf 93       	push	r27
     718:	ef 93       	push	r30
     71a:	ff 93       	push	r31
     71c:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <FLASH_0_desc+0x5>
     720:	81 11       	cpse	r24, r1
     722:	0e c0       	rjmp	.+28     	; 0x740 <__vector_30+0x4a>
     724:	e0 e2       	ldi	r30, 0x20	; 32
     726:	f4 e0       	ldi	r31, 0x04	; 4
     728:	10 82       	st	Z, r1
     72a:	fb 98       	cbi	0x1f, 3	; 31
     72c:	86 81       	ldd	r24, Z+6	; 0x06
     72e:	97 81       	ldd	r25, Z+7	; 0x07
     730:	89 2b       	or	r24, r25
     732:	f1 f0       	breq	.+60     	; 0x770 <__vector_30+0x7a>
     734:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <FLASH_0_desc+0x6>
     738:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <FLASH_0_desc+0x7>
     73c:	19 95       	eicall
     73e:	18 c0       	rjmp	.+48     	; 0x770 <__vector_30+0x7a>
     740:	e0 e2       	ldi	r30, 0x20	; 32
     742:	f4 e0       	ldi	r31, 0x04	; 4
     744:	81 81       	ldd	r24, Z+1	; 0x01
     746:	92 81       	ldd	r25, Z+2	; 0x02
     748:	9c 01       	movw	r18, r24
     74a:	2f 5f       	subi	r18, 0xFF	; 255
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	32 83       	std	Z+2, r19	; 0x02
     750:	21 83       	std	Z+1, r18	; 0x01
     752:	92 bd       	out	0x22, r25	; 34
     754:	81 bd       	out	0x21, r24	; 33
     756:	a3 81       	ldd	r26, Z+3	; 0x03
     758:	b4 81       	ldd	r27, Z+4	; 0x04
     75a:	cd 01       	movw	r24, r26
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	94 83       	std	Z+4, r25	; 0x04
     760:	83 83       	std	Z+3, r24	; 0x03
     762:	8c 91       	ld	r24, X
     764:	80 bd       	out	0x20, r24	; 32
     766:	85 81       	ldd	r24, Z+5	; 0x05
     768:	81 50       	subi	r24, 0x01	; 1
     76a:	85 83       	std	Z+5, r24	; 0x05
     76c:	fa 9a       	sbi	0x1f, 2	; 31
     76e:	f9 9a       	sbi	0x1f, 1	; 31
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	7f 91       	pop	r23
     77e:	6f 91       	pop	r22
     780:	5f 91       	pop	r21
     782:	4f 91       	pop	r20
     784:	3f 91       	pop	r19
     786:	2f 91       	pop	r18
     788:	0f 90       	pop	r0
     78a:	0b be       	out	0x3b, r0	; 59
     78c:	0f 90       	pop	r0
     78e:	0f be       	out	0x3f, r0	; 63
     790:	0f 90       	pop	r0
     792:	1f 90       	pop	r1
     794:	18 95       	reti

00000796 <FLASH_0_init>:
	//		 | 0 << RWWSRE /* Read-While-Write Section Enable: disabled */
	//		 | 0 << SIGRD /* Signature Row Read: disabled */
	//		 | 0 << RWWSB /* Read-While-Write Busy: disabled */
	//		 | 0 << SPMIE; /* SPM Interrupt Enable: disabled */

	FLASH_0_desc.cb = NULL;
     796:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <FLASH_0_desc+0x7>
     79a:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <FLASH_0_desc+0x6>
	return 0;
}
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	08 95       	ret

000007a2 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     7a2:	2f b7       	in	r18, 0x3f	; 63
	cli
     7a4:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     7a6:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     7a8:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     7aa:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     7ac:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     7ae:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     7b0:	08 95       	ret

000007b2 <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
     7b2:	e4 e6       	ldi	r30, 0x64	; 100
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	8b 7f       	andi	r24, 0xFB	; 251
     7ba:	80 83       	st	Z, r24
     7bc:	81 e5       	ldi	r24, 0x51	; 81
     7be:	8c bd       	out	0x2c, r24	; 44
     7c0:	e8 e2       	ldi	r30, 0x28	; 40
     7c2:	f4 e0       	ldi	r31, 0x04	; 4
     7c4:	10 82       	st	Z, r1
     7c6:	16 82       	std	Z+6, r1	; 0x06
     7c8:	15 82       	std	Z+5, r1	; 0x05
     7ca:	08 95       	ret

000007cc <__vector_24>:
}

ISR(SPI_STC_vect)
{
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	0b b6       	in	r0, 0x3b	; 59
     7d8:	0f 92       	push	r0
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	ef 93       	push	r30
     7f4:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
     7f6:	9e b5       	in	r25, 0x2e	; 46
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
     7f8:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <SPI_0_desc+0x4>
     7fc:	82 30       	cpi	r24, 0x02	; 2
     7fe:	11 f1       	breq	.+68     	; 0x844 <__vector_24+0x78>
		*SPI_0_desc.data = rdata;
     800:	c8 e2       	ldi	r28, 0x28	; 40
     802:	d4 e0       	ldi	r29, 0x04	; 4
     804:	a9 81       	ldd	r26, Y+1	; 0x01
     806:	ba 81       	ldd	r27, Y+2	; 0x02
     808:	fd 01       	movw	r30, r26
     80a:	91 93       	st	Z+, r25
	}

	SPI_0_desc.data++;
     80c:	fa 83       	std	Y+2, r31	; 0x02
     80e:	e9 83       	std	Y+1, r30	; 0x01

	if (SPI_0_desc.type != SPI_READ)
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	19 f0       	breq	.+6      	; 0x81a <__vector_24+0x4e>
		wdata = *SPI_0_desc.data;
     814:	11 96       	adiw	r26, 0x01	; 1
     816:	9c 91       	ld	r25, X
     818:	01 c0       	rjmp	.+2      	; 0x81c <__vector_24+0x50>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
	uint8_t wdata = 0;
     81a:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
     81c:	e8 e2       	ldi	r30, 0x28	; 40
     81e:	f4 e0       	ldi	r31, 0x04	; 4
     820:	83 81       	ldd	r24, Z+3	; 0x03
     822:	81 50       	subi	r24, 0x01	; 1
     824:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
     826:	88 23       	and	r24, r24
     828:	11 f0       	breq	.+4      	; 0x82e <__vector_24+0x62>
		// more data to send, send a byte
		SPDR = wdata;
     82a:	9e bd       	out	0x2e, r25	; 46
     82c:	14 c0       	rjmp	.+40     	; 0x856 <__vector_24+0x8a>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
     82e:	e8 e2       	ldi	r30, 0x28	; 40
     830:	f4 e0       	ldi	r31, 0x04	; 4
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
     836:	05 80       	ldd	r0, Z+5	; 0x05
     838:	f6 81       	ldd	r31, Z+6	; 0x06
     83a:	e0 2d       	mov	r30, r0
     83c:	30 97       	sbiw	r30, 0x00	; 0
     83e:	59 f0       	breq	.+22     	; 0x856 <__vector_24+0x8a>
			SPI_0_desc.cb();
     840:	19 95       	eicall
		}
	}
}
     842:	09 c0       	rjmp	.+18     	; 0x856 <__vector_24+0x8a>
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
		*SPI_0_desc.data = rdata;
	}

	SPI_0_desc.data++;
     844:	e8 e2       	ldi	r30, 0x28	; 40
     846:	f4 e0       	ldi	r31, 0x04	; 4
     848:	a1 81       	ldd	r26, Z+1	; 0x01
     84a:	b2 81       	ldd	r27, Z+2	; 0x02
     84c:	cd 01       	movw	r24, r26
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	92 83       	std	Z+2, r25	; 0x02
     852:	81 83       	std	Z+1, r24	; 0x01
     854:	df cf       	rjmp	.-66     	; 0x814 <__vector_24+0x48>
		SPI_0_desc.status = SPI_DONE;
		if (SPI_0_desc.cb != NULL) {
			SPI_0_desc.cb();
		}
	}
}
     856:	ff 91       	pop	r31
     858:	ef 91       	pop	r30
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	bf 91       	pop	r27
     860:	af 91       	pop	r26
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	7f 91       	pop	r23
     868:	6f 91       	pop	r22
     86a:	5f 91       	pop	r21
     86c:	4f 91       	pop	r20
     86e:	3f 91       	pop	r19
     870:	2f 91       	pop	r18
     872:	0f 90       	pop	r0
     874:	0b be       	out	0x3b, r0	; 59
     876:	0f 90       	pop	r0
     878:	0f be       	out	0x3f, r0	; 63
     87a:	0f 90       	pop	r0
     87c:	1f 90       	pop	r1
     87e:	18 95       	reti

00000880 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC4 */
	PRR1 &= ~(1 << PRTIM4);
     880:	e5 e6       	ldi	r30, 0x65	; 101
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	8f 7e       	andi	r24, 0xEF	; 239
     888:	80 83       	st	Z, r24

	// TCCR4A = (0 << COM4A1) | (0 << COM4A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM4B1) | (0 << COM4B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM41) | (0 << WGM40); /* TC16 Mode 0 Normal */

	TCCR4B = (0 << WGM43) | (0 << WGM42)                /* TC16 Mode 0 Normal */
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

	// OCR4A = 0; /* Output compare A: 0 */

	// OCR4B = 0; /* Output compare B: 0 */

	TIMSK4 = 0 << OCIE4B   /* Output Compare B Match Interrupt Enable: disabled */
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	         | 1 << OCIE4A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE4  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE4; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	08 95       	ret

0000089a <TIMER_1_init>:
 */
int8_t TIMER_1_init()
{

	/* Enable TC5 */
	PRR1 &= ~(1 << PRTIM5);
     89a:	e5 e6       	ldi	r30, 0x65	; 101
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	8f 7d       	andi	r24, 0xDF	; 223
     8a2:	80 83       	st	Z, r24

	// TCCR5A = (0 << COM5A1) | (0 << COM5A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM5B1) | (0 << COM5B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM51) | (0 << WGM50); /* TC16 Mode 0 Normal */

	TCCR5B = (0 << WGM53) | (0 << WGM52)                /* TC16 Mode 0 Normal */
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
	         | 0 << ICES5                               /* Input Capture Edge Select: disabled */
	         | (0 << CS52) | (0 << CS51) | (1 << CS50); /* No prescaling */

	// ICR5 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR5A = 16000; /* Output compare A: 16000 */
     8aa:	80 e8       	ldi	r24, 0x80	; 128
     8ac:	9e e3       	ldi	r25, 0x3E	; 62
     8ae:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     8b2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

	// OCR5B = 0; /* Output compare B: 0 */

	TIMSK5 = 0 << OCIE5B   /* Output Compare B Match Interrupt Enable: disabled */
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
	         | 1 << OCIE5A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE5  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE5; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	08 95       	ret

000008c0 <__vector_25>:
}

bool USART_3_is_tx_busy()
{
	return (!(UCSR3A & (1 << TXC3)));
}
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	0b b6       	in	r0, 0x3b	; 59
     8cc:	0f 92       	push	r0
     8ce:	8f 93       	push	r24
     8d0:	9f 93       	push	r25
     8d2:	ef 93       	push	r30
     8d4:	ff 93       	push	r31
     8d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     8da:	e0 91 36 05 	lds	r30, 0x0536	; 0x800536 <USART_0_rx_head>
     8de:	ef 5f       	subi	r30, 0xFF	; 255
     8e0:	e0 93 36 05 	sts	0x0536, r30	; 0x800536 <USART_0_rx_head>
     8e4:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <USART_0_rx_tail>
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	e9 5c       	subi	r30, 0xC9	; 201
     8ec:	fa 4f       	sbci	r31, 0xFA	; 250
     8ee:	80 83       	st	Z, r24
     8f0:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <USART_0_rx_elements>
     8f4:	8f 5f       	subi	r24, 0xFF	; 255
     8f6:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <USART_0_rx_elements>
     8fa:	ff 91       	pop	r31
     8fc:	ef 91       	pop	r30
     8fe:	9f 91       	pop	r25
     900:	8f 91       	pop	r24
     902:	0f 90       	pop	r0
     904:	0b be       	out	0x3b, r0	; 59
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <__vector_26>:
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	0b b6       	in	r0, 0x3b	; 59
     91c:	0f 92       	push	r0
     91e:	8f 93       	push	r24
     920:	ef 93       	push	r30
     922:	ff 93       	push	r31
     924:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <USART_0_tx_elements>
     928:	88 23       	and	r24, r24
     92a:	89 f0       	breq	.+34     	; 0x94e <__vector_26+0x3e>
     92c:	e0 91 22 05 	lds	r30, 0x0522	; 0x800522 <USART_0_tx_tail>
     930:	ef 5f       	subi	r30, 0xFF	; 255
     932:	ef 70       	andi	r30, 0x0F	; 15
     934:	e0 93 22 05 	sts	0x0522, r30	; 0x800522 <USART_0_tx_tail>
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	ec 5d       	subi	r30, 0xDC	; 220
     93c:	fa 4f       	sbci	r31, 0xFA	; 250
     93e:	80 81       	ld	r24, Z
     940:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     944:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <USART_0_tx_elements>
     948:	81 50       	subi	r24, 0x01	; 1
     94a:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <USART_0_tx_elements>
     94e:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <USART_0_tx_elements>
     952:	81 11       	cpse	r24, r1
     954:	05 c0       	rjmp	.+10     	; 0x960 <__vector_26+0x50>
     956:	e1 ec       	ldi	r30, 0xC1	; 193
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	8f 7d       	andi	r24, 0xDF	; 223
     95e:	80 83       	st	Z, r24
     960:	ff 91       	pop	r31
     962:	ef 91       	pop	r30
     964:	8f 91       	pop	r24
     966:	0f 90       	pop	r0
     968:	0b be       	out	0x3b, r0	; 59
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <USART_0_init>:
     974:	e4 e6       	ldi	r30, 0x64	; 100
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 81       	ld	r24, Z
     97a:	8d 7f       	andi	r24, 0xFD	; 253
     97c:	80 83       	st	Z, r24
     97e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     982:	87 e6       	ldi	r24, 0x67	; 103
     984:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     988:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     98c:	88 e9       	ldi	r24, 0x98	; 152
     98e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     992:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <USART_0_rx_tail>
     996:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <USART_0_rx_head>
     99a:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <USART_0_rx_elements>
     99e:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <USART_0_tx_tail>
     9a2:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <USART_0_tx_head>
     9a6:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <USART_0_tx_elements>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	08 95       	ret

000009ae <__vector_36>:
     9ae:	1f 92       	push	r1
     9b0:	0f 92       	push	r0
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	0f 92       	push	r0
     9b6:	11 24       	eor	r1, r1
     9b8:	0b b6       	in	r0, 0x3b	; 59
     9ba:	0f 92       	push	r0
     9bc:	8f 93       	push	r24
     9be:	9f 93       	push	r25
     9c0:	ef 93       	push	r30
     9c2:	ff 93       	push	r31
     9c4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     9c8:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <USART_1_rx_head>
     9cc:	ef 5f       	subi	r30, 0xFF	; 255
     9ce:	ef 77       	andi	r30, 0x7F	; 127
     9d0:	e0 93 a0 04 	sts	0x04A0, r30	; 0x8004a0 <USART_1_rx_head>
     9d4:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <USART_1_rx_tail>
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	ef 55       	subi	r30, 0x5F	; 95
     9dc:	fb 4f       	sbci	r31, 0xFB	; 251
     9de:	80 83       	st	Z, r24
     9e0:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <USART_1_rx_elements>
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <USART_1_rx_elements>
     9ea:	ff 91       	pop	r31
     9ec:	ef 91       	pop	r30
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	0f 90       	pop	r0
     9f4:	0b be       	out	0x3b, r0	; 59
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <__vector_37>:
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
     a0a:	0b b6       	in	r0, 0x3b	; 59
     a0c:	0f 92       	push	r0
     a0e:	8f 93       	push	r24
     a10:	ef 93       	push	r30
     a12:	ff 93       	push	r31
     a14:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <USART_1_tx_elements>
     a18:	88 23       	and	r24, r24
     a1a:	89 f0       	breq	.+34     	; 0xa3e <__vector_37+0x3e>
     a1c:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <USART_1_tx_tail>
     a20:	ef 5f       	subi	r30, 0xFF	; 255
     a22:	ef 70       	andi	r30, 0x0F	; 15
     a24:	e0 93 8c 04 	sts	0x048C, r30	; 0x80048c <USART_1_tx_tail>
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	e2 57       	subi	r30, 0x72	; 114
     a2c:	fb 4f       	sbci	r31, 0xFB	; 251
     a2e:	80 81       	ld	r24, Z
     a30:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     a34:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <USART_1_tx_elements>
     a38:	81 50       	subi	r24, 0x01	; 1
     a3a:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <USART_1_tx_elements>
     a3e:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <USART_1_tx_elements>
     a42:	81 11       	cpse	r24, r1
     a44:	05 c0       	rjmp	.+10     	; 0xa50 <__vector_37+0x50>
     a46:	e9 ec       	ldi	r30, 0xC9	; 201
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	8f 7d       	andi	r24, 0xDF	; 223
     a4e:	80 83       	st	Z, r24
     a50:	ff 91       	pop	r31
     a52:	ef 91       	pop	r30
     a54:	8f 91       	pop	r24
     a56:	0f 90       	pop	r0
     a58:	0b be       	out	0x3b, r0	; 59
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <USART_1_is_rx_ready>:
     a64:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <USART_1_rx_elements>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	91 11       	cpse	r25, r1
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <USART_1_is_rx_ready+0xc>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	08 95       	ret

00000a72 <USART_1_read>:
     a72:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <USART_1_rx_elements>
     a76:	88 23       	and	r24, r24
     a78:	e1 f3       	breq	.-8      	; 0xa72 <USART_1_read>
     a7a:	e0 91 9f 04 	lds	r30, 0x049F	; 0x80049f <USART_1_rx_tail>
     a7e:	ef 5f       	subi	r30, 0xFF	; 255
     a80:	ef 77       	andi	r30, 0x7F	; 127
     a82:	e0 93 9f 04 	sts	0x049F, r30	; 0x80049f <USART_1_rx_tail>
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	0f 92       	push	r0
     a8c:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <USART_1_rx_elements>
     a90:	81 50       	subi	r24, 0x01	; 1
     a92:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <USART_1_rx_elements>
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	ef 55       	subi	r30, 0x5F	; 95
     a9e:	fb 4f       	sbci	r31, 0xFB	; 251
     aa0:	80 81       	ld	r24, Z
     aa2:	08 95       	ret

00000aa4 <USART_1_write>:
     aa4:	20 91 8d 04 	lds	r18, 0x048D	; 0x80048d <USART_1_tx_head>
     aa8:	2f 5f       	subi	r18, 0xFF	; 255
     aaa:	2f 70       	andi	r18, 0x0F	; 15
     aac:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <USART_1_tx_elements>
     ab0:	90 31       	cpi	r25, 0x10	; 16
     ab2:	e1 f3       	breq	.-8      	; 0xaac <USART_1_write+0x8>
     ab4:	e2 2f       	mov	r30, r18
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	e2 57       	subi	r30, 0x72	; 114
     aba:	fb 4f       	sbci	r31, 0xFB	; 251
     abc:	80 83       	st	Z, r24
     abe:	20 93 8d 04 	sts	0x048D, r18	; 0x80048d <USART_1_tx_head>
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	0f 92       	push	r0
     ac8:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <USART_1_tx_elements>
     acc:	8f 5f       	subi	r24, 0xFF	; 255
     ace:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <USART_1_tx_elements>
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	e9 ec       	ldi	r30, 0xC9	; 201
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	80 62       	ori	r24, 0x20	; 32
     ade:	80 83       	st	Z, r24
     ae0:	08 95       	ret

00000ae2 <USART_1_init>:
     ae2:	e5 e6       	ldi	r30, 0x65	; 101
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	8e 7f       	andi	r24, 0xFE	; 254
     aea:	80 83       	st	Z, r24
     aec:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     af0:	87 e6       	ldi	r24, 0x67	; 103
     af2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     af6:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     afa:	88 e9       	ldi	r24, 0x98	; 152
     afc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     b00:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <USART_1_rx_tail>
     b04:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <USART_1_rx_head>
     b08:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <USART_1_rx_elements>
     b0c:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <USART_1_tx_tail>
     b10:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <USART_1_tx_head>
     b14:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <USART_1_tx_elements>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	08 95       	ret

00000b1c <__vector_51>:
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	0b b6       	in	r0, 0x3b	; 59
     b28:	0f 92       	push	r0
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	ef 93       	push	r30
     b30:	ff 93       	push	r31
     b32:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     b36:	e0 91 6a 04 	lds	r30, 0x046A	; 0x80046a <USART_2_rx_head>
     b3a:	ef 5f       	subi	r30, 0xFF	; 255
     b3c:	ef 71       	andi	r30, 0x1F	; 31
     b3e:	e0 93 6a 04 	sts	0x046A, r30	; 0x80046a <USART_2_rx_head>
     b42:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <USART_2_rx_tail>
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	e5 59       	subi	r30, 0x95	; 149
     b4a:	fb 4f       	sbci	r31, 0xFB	; 251
     b4c:	80 83       	st	Z, r24
     b4e:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <USART_2_rx_elements>
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <USART_2_rx_elements>
     b58:	ff 91       	pop	r31
     b5a:	ef 91       	pop	r30
     b5c:	9f 91       	pop	r25
     b5e:	8f 91       	pop	r24
     b60:	0f 90       	pop	r0
     b62:	0b be       	out	0x3b, r0	; 59
     b64:	0f 90       	pop	r0
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	0f 90       	pop	r0
     b6a:	1f 90       	pop	r1
     b6c:	18 95       	reti

00000b6e <__vector_52>:
     b6e:	1f 92       	push	r1
     b70:	0f 92       	push	r0
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	0b b6       	in	r0, 0x3b	; 59
     b7a:	0f 92       	push	r0
     b7c:	8f 93       	push	r24
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
     b82:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <USART_2_tx_elements>
     b86:	88 23       	and	r24, r24
     b88:	89 f0       	breq	.+34     	; 0xbac <__vector_52+0x3e>
     b8a:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <USART_2_tx_tail>
     b8e:	ef 5f       	subi	r30, 0xFF	; 255
     b90:	ef 70       	andi	r30, 0x0F	; 15
     b92:	e0 93 56 04 	sts	0x0456, r30	; 0x800456 <USART_2_tx_tail>
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	e8 5a       	subi	r30, 0xA8	; 168
     b9a:	fb 4f       	sbci	r31, 0xFB	; 251
     b9c:	80 81       	ld	r24, Z
     b9e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     ba2:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <USART_2_tx_elements>
     ba6:	81 50       	subi	r24, 0x01	; 1
     ba8:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <USART_2_tx_elements>
     bac:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <USART_2_tx_elements>
     bb0:	81 11       	cpse	r24, r1
     bb2:	05 c0       	rjmp	.+10     	; 0xbbe <__vector_52+0x50>
     bb4:	e1 ed       	ldi	r30, 0xD1	; 209
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 7d       	andi	r24, 0xDF	; 223
     bbc:	80 83       	st	Z, r24
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	8f 91       	pop	r24
     bc4:	0f 90       	pop	r0
     bc6:	0b be       	out	0x3b, r0	; 59
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <USART_2_write>:
     bd2:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <USART_2_tx_head>
     bd6:	2f 5f       	subi	r18, 0xFF	; 255
     bd8:	2f 70       	andi	r18, 0x0F	; 15
     bda:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <USART_2_tx_elements>
     bde:	90 31       	cpi	r25, 0x10	; 16
     be0:	e1 f3       	breq	.-8      	; 0xbda <USART_2_write+0x8>
     be2:	e2 2f       	mov	r30, r18
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	e8 5a       	subi	r30, 0xA8	; 168
     be8:	fb 4f       	sbci	r31, 0xFB	; 251
     bea:	80 83       	st	Z, r24
     bec:	20 93 57 04 	sts	0x0457, r18	; 0x800457 <USART_2_tx_head>
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	0f 92       	push	r0
     bf6:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <USART_2_tx_elements>
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <USART_2_tx_elements>
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	e1 ed       	ldi	r30, 0xD1	; 209
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 62       	ori	r24, 0x20	; 32
     c0c:	80 83       	st	Z, r24
     c0e:	08 95       	ret

00000c10 <USART_2_init>:
     c10:	e5 e6       	ldi	r30, 0x65	; 101
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8d 7f       	andi	r24, 0xFD	; 253
     c18:	80 83       	st	Z, r24
     c1a:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     c1e:	87 e6       	ldi	r24, 0x67	; 103
     c20:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     c24:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     c28:	88 e9       	ldi	r24, 0x98	; 152
     c2a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     c2e:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <USART_2_rx_tail>
     c32:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <USART_2_rx_head>
     c36:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <USART_2_rx_elements>
     c3a:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <USART_2_tx_tail>
     c3e:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <USART_2_tx_head>
     c42:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <USART_2_tx_elements>
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 95       	ret

00000c4a <__vector_54>:
     c4a:	1f 92       	push	r1
     c4c:	0f 92       	push	r0
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	0f 92       	push	r0
     c52:	11 24       	eor	r1, r1
     c54:	0b b6       	in	r0, 0x3b	; 59
     c56:	0f 92       	push	r0
     c58:	8f 93       	push	r24
     c5a:	9f 93       	push	r25
     c5c:	ef 93       	push	r30
     c5e:	ff 93       	push	r31
     c60:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     c64:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <USART_3_rx_head>
     c68:	ef 5f       	subi	r30, 0xFF	; 255
     c6a:	ef 70       	andi	r30, 0x0F	; 15
     c6c:	e0 93 44 04 	sts	0x0444, r30	; 0x800444 <USART_3_rx_head>
     c70:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <USART_3_rx_tail>
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	eb 5b       	subi	r30, 0xBB	; 187
     c78:	fb 4f       	sbci	r31, 0xFB	; 251
     c7a:	80 83       	st	Z, r24
     c7c:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <USART_3_rx_elements>
     c80:	8f 5f       	subi	r24, 0xFF	; 255
     c82:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <USART_3_rx_elements>
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	0f 90       	pop	r0
     c90:	0b be       	out	0x3b, r0	; 59
     c92:	0f 90       	pop	r0
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	0f 90       	pop	r0
     c98:	1f 90       	pop	r1
     c9a:	18 95       	reti

00000c9c <__vector_55>:
     c9c:	1f 92       	push	r1
     c9e:	0f 92       	push	r0
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	0f 92       	push	r0
     ca4:	11 24       	eor	r1, r1
     ca6:	0b b6       	in	r0, 0x3b	; 59
     ca8:	0f 92       	push	r0
     caa:	8f 93       	push	r24
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31
     cb0:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <USART_3_tx_elements>
     cb4:	88 23       	and	r24, r24
     cb6:	89 f0       	breq	.+34     	; 0xcda <__vector_55+0x3e>
     cb8:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <USART_3_tx_tail>
     cbc:	ef 5f       	subi	r30, 0xFF	; 255
     cbe:	ef 70       	andi	r30, 0x0F	; 15
     cc0:	e0 93 30 04 	sts	0x0430, r30	; 0x800430 <USART_3_tx_tail>
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	ee 5c       	subi	r30, 0xCE	; 206
     cc8:	fb 4f       	sbci	r31, 0xFB	; 251
     cca:	80 81       	ld	r24, Z
     ccc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     cd0:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <USART_3_tx_elements>
     cd4:	81 50       	subi	r24, 0x01	; 1
     cd6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <USART_3_tx_elements>
     cda:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <USART_3_tx_elements>
     cde:	81 11       	cpse	r24, r1
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <__vector_55+0x50>
     ce2:	e1 e3       	ldi	r30, 0x31	; 49
     ce4:	f1 e0       	ldi	r31, 0x01	; 1
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 7d       	andi	r24, 0xDF	; 223
     cea:	80 83       	st	Z, r24
     cec:	ff 91       	pop	r31
     cee:	ef 91       	pop	r30
     cf0:	8f 91       	pop	r24
     cf2:	0f 90       	pop	r0
     cf4:	0b be       	out	0x3b, r0	; 59
     cf6:	0f 90       	pop	r0
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	0f 90       	pop	r0
     cfc:	1f 90       	pop	r1
     cfe:	18 95       	reti

00000d00 <USART_3_is_rx_ready>:
     d00:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <USART_3_rx_elements>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	91 11       	cpse	r25, r1
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <USART_3_is_rx_ready+0xc>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	08 95       	ret

00000d0e <USART_3_read>:
uint8_t USART_3_read(void)
{
	uint8_t tmptail;

	/* Wait for incoming data */
	while (USART_3_rx_elements == 0)
     d0e:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <USART_3_rx_elements>
     d12:	88 23       	and	r24, r24
     d14:	e1 f3       	breq	.-8      	; 0xd0e <USART_3_read>
		;
	/* Calculate buffer index */
	tmptail = (USART_3_rx_tail + 1) & USART_3_RX_BUFFER_MASK;
     d16:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <USART_3_rx_tail>
     d1a:	ef 5f       	subi	r30, 0xFF	; 255
     d1c:	ef 70       	andi	r30, 0x0F	; 15
	/* Store new index */
	USART_3_rx_tail = tmptail;
     d1e:	e0 93 43 04 	sts	0x0443, r30	; 0x800443 <USART_3_rx_tail>
	ENTER_CRITICAL(R);
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	0f 92       	push	r0
	USART_3_rx_elements--;
     d28:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <USART_3_rx_elements>
     d2c:	81 50       	subi	r24, 0x01	; 1
     d2e:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <USART_3_rx_elements>
	EXIT_CRITICAL(R);
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63

	/* Return data */
	return USART_3_rxbuf[tmptail];
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	eb 5b       	subi	r30, 0xBB	; 187
     d3a:	fb 4f       	sbci	r31, 0xFB	; 251
}
     d3c:	80 81       	ld	r24, Z
     d3e:	08 95       	ret

00000d40 <USART_3_write>:
void USART_3_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_3_tx_head + 1) & USART_3_TX_BUFFER_MASK;
     d40:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <USART_3_tx_head>
     d44:	2f 5f       	subi	r18, 0xFF	; 255
     d46:	2f 70       	andi	r18, 0x0F	; 15
	/* Wait for free space in buffer */
	while (USART_3_tx_elements == USART_3_TX_BUFFER_SIZE)
     d48:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <USART_3_tx_elements>
     d4c:	90 31       	cpi	r25, 0x10	; 16
     d4e:	e1 f3       	breq	.-8      	; 0xd48 <USART_3_write+0x8>
		;
	/* Store data in buffer */
	USART_3_txbuf[tmphead] = data;
     d50:	e2 2f       	mov	r30, r18
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	ee 5c       	subi	r30, 0xCE	; 206
     d56:	fb 4f       	sbci	r31, 0xFB	; 251
     d58:	80 83       	st	Z, r24
	/* Store new index */
	USART_3_tx_head = tmphead;
     d5a:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <USART_3_tx_head>
	ENTER_CRITICAL(W);
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	0f 92       	push	r0
	USART_3_tx_elements++;
     d64:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <USART_3_tx_elements>
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <USART_3_tx_elements>
	EXIT_CRITICAL(W);
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR3B |= (1 << UDRIE3);
     d72:	e1 e3       	ldi	r30, 0x31	; 49
     d74:	f1 e0       	ldi	r31, 0x01	; 1
     d76:	80 81       	ld	r24, Z
     d78:	80 62       	ori	r24, 0x20	; 32
     d7a:	80 83       	st	Z, r24
     d7c:	08 95       	ret

00000d7e <USART_3_printCHAR>:
     d7e:	e0 df       	rcall	.-64     	; 0xd40 <USART_3_write>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	08 95       	ret

00000d86 <USART_3_init>:
     d86:	e5 e6       	ldi	r30, 0x65	; 101
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8b 7f       	andi	r24, 0xFB	; 251
     d8e:	80 83       	st	Z, r24
     d90:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     d94:	87 e6       	ldi	r24, 0x67	; 103
     d96:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     d9a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     d9e:	88 e9       	ldi	r24, 0x98	; 152
     da0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     da4:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <USART_3_rx_tail>
     da8:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <USART_3_rx_head>
     dac:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <USART_3_rx_elements>
     db0:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <USART_3_tx_tail>
     db4:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <USART_3_tx_head>
     db8:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <USART_3_tx_elements>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <__iob+0x3>
     dc4:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <__iob+0x2>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	08 95       	ret

00000dcc <fastmsectime>:
			 {
				 return;
			 }
		 }
	 }
 }
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	0f 92       	push	r0
     dd2:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <m4sectimer>
     dd6:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <m4sectimer+0x1>
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	08 95       	ret

00000de0 <fastdelay_ms>:

 // Uses Hardware timer 4 which is set to 4.096mS interrupt
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	00 d0       	rcall	.+0      	; 0xde6 <fastdelay_ms+0x6>
     de6:	1f 92       	push	r1
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	0f 92       	push	r0
	 currentms = m4sectimer;
     df2:	20 91 41 06 	lds	r18, 0x0641	; 0x800641 <m4sectimer>
     df6:	30 91 42 06 	lds	r19, 0x0642	; 0x800642 <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     dfa:	0f 90       	pop	r0
     dfc:	0f be       	out	0x3f, r0	; 63
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
     dfe:	3c 83       	std	Y+4, r19	; 0x04
     e00:	2b 83       	std	Y+3, r18	; 0x03
		 k = j + (uint16_t)count;
     e02:	2b 81       	ldd	r18, Y+3	; 0x03
     e04:	3c 81       	ldd	r19, Y+4	; 0x04
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	89 83       	std	Y+1, r24	; 0x01

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	0f 92       	push	r0
	 currentms = m4sectimer;
     e14:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <m4sectimer>
     e18:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
		 k = j + (uint16_t)count;
		 while(1) {
			 j = fastmsectime();
     e20:	9c 83       	std	Y+4, r25	; 0x04
     e22:	8b 83       	std	Y+3, r24	; 0x03
			 if (j >= k)
     e24:	2b 81       	ldd	r18, Y+3	; 0x03
     e26:	3c 81       	ldd	r19, Y+4	; 0x04
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	28 17       	cp	r18, r24
     e2e:	39 07       	cpc	r19, r25
     e30:	70 f3       	brcs	.-36     	; 0xe0e <fastdelay_ms+0x2e>
			 {
				 return;
			 }
		 }
	 }
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <__vector_42>:
#include <compiler.h>

volatile uint16_t m4sectimer = 0;		// global 4.096mS tick count (16 bits)

ISR(TIMER4_COMPA_vect)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25

	/* Insert your TIMER_0 compare channel A interrupt handling code here */
	m4sectimer++;
     e4e:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <m4sectimer>
     e52:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <m4sectimer+0x1>
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <m4sectimer+0x1>
     e5c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <m4sectimer>
}
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	0f 90       	pop	r0
     e6a:	1f 90       	pop	r1
     e6c:	18 95       	reti

00000e6e <__vector_47>:

volatile uint64_t m1sectimer = 0;		// global 1mS tick count (64 bits)

ISR(TIMER5_COMPA_vect)
{
     e6e:	1f 92       	push	r1
     e70:	0f 92       	push	r0
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	0f 92       	push	r0
     e76:	11 24       	eor	r1, r1
     e78:	2f 93       	push	r18
     e7a:	3f 93       	push	r19
     e7c:	4f 93       	push	r20
     e7e:	5f 93       	push	r21
     e80:	6f 93       	push	r22
     e82:	7f 93       	push	r23
     e84:	8f 93       	push	r24
     e86:	9f 93       	push	r25
     e88:	af 93       	push	r26
	/* Insert your TIMER_5 compare channel A interrupt handling code here */
	static uint16_t nextcmp = 0;

	nextcmp = nextcmp + 16000;		// 1mSec assuming 16MHz clock
     e8a:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <nextcmp.3022>
     e8e:	90 91 38 06 	lds	r25, 0x0638	; 0x800638 <nextcmp.3022+0x1>
     e92:	80 58       	subi	r24, 0x80	; 128
     e94:	91 4c       	sbci	r25, 0xC1	; 193
     e96:	90 93 38 06 	sts	0x0638, r25	; 0x800638 <nextcmp.3022+0x1>
     e9a:	80 93 37 06 	sts	0x0637, r24	; 0x800637 <nextcmp.3022>
	OCR5AH = nextcmp >> 8 ;
     e9e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
	OCR5AL = nextcmp & 0xff;
     ea2:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <nextcmp.3022>
     ea6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	m1sectimer++;
     eaa:	20 91 39 06 	lds	r18, 0x0639	; 0x800639 <m1sectimer>
     eae:	30 91 3a 06 	lds	r19, 0x063A	; 0x80063a <m1sectimer+0x1>
     eb2:	40 91 3b 06 	lds	r20, 0x063B	; 0x80063b <m1sectimer+0x2>
     eb6:	50 91 3c 06 	lds	r21, 0x063C	; 0x80063c <m1sectimer+0x3>
     eba:	60 91 3d 06 	lds	r22, 0x063D	; 0x80063d <m1sectimer+0x4>
     ebe:	70 91 3e 06 	lds	r23, 0x063E	; 0x80063e <m1sectimer+0x5>
     ec2:	80 91 3f 06 	lds	r24, 0x063F	; 0x80063f <m1sectimer+0x6>
     ec6:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <m1sectimer+0x7>
     eca:	a1 e0       	ldi	r26, 0x01	; 1
     ecc:	9f d0       	rcall	.+318    	; 0x100c <__adddi3_s8>
     ece:	20 93 39 06 	sts	0x0639, r18	; 0x800639 <m1sectimer>
     ed2:	30 93 3a 06 	sts	0x063A, r19	; 0x80063a <m1sectimer+0x1>
     ed6:	40 93 3b 06 	sts	0x063B, r20	; 0x80063b <m1sectimer+0x2>
     eda:	50 93 3c 06 	sts	0x063C, r21	; 0x80063c <m1sectimer+0x3>
     ede:	60 93 3d 06 	sts	0x063D, r22	; 0x80063d <m1sectimer+0x4>
     ee2:	70 93 3e 06 	sts	0x063E, r23	; 0x80063e <m1sectimer+0x5>
     ee6:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <m1sectimer+0x6>
     eea:	90 93 40 06 	sts	0x0640, r25	; 0x800640 <m1sectimer+0x7>
}
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	1f 90       	pop	r1
     f08:	18 95       	reti

00000f0a <main>:
	volatile unsigned char ch;

	now = fastmsectime();

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     f0a:	60 df       	rcall	.-320    	; 0xdcc <fastmsectime>
     f0c:	0c d9       	rcall	.-3560   	; 0x126 <atmel_start_init>
	sei();
     f0e:	78 94       	sei

	printf("Hello World\n\r");
     f10:	80 ee       	ldi	r24, 0xE0	; 224
     f12:	93 e0       	ldi	r25, 0x03	; 3
     f14:	9f 93       	push	r25

	fastdelay_ms(5000/4);
     f16:	8f 93       	push	r24
     f18:	85 d0       	rcall	.+266    	; 0x1024 <printf>
     f1a:	82 ee       	ldi	r24, 0xE2	; 226

	setupneo();
	printf("Neo7 setup returned\n\r");
     f1c:	94 e0       	ldi	r25, 0x04	; 4
     f1e:	60 df       	rcall	.-320    	; 0xde0 <fastdelay_ms>
     f20:	d1 da       	rcall	.-2654   	; 0x4c4 <setupneo>
     f22:	8e ee       	ldi	r24, 0xEE	; 238
     f24:	93 e0       	ldi	r25, 0x03	; 3

	now = fastmsectime();
     f26:	9f 93       	push	r25
     f28:	8f 93       	push	r24
     f2a:	7c d0       	rcall	.+248    	; 0x1024 <printf>
     f2c:	4f df       	rcall	.-354    	; 0xdcc <fastmsectime>
     f2e:	ec 01       	movw	r28, r24
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
		// Update RealPacket
		updategps();
		if (fastmsectime() > (now + 500/4))		// timeout 0.5 secs
		{
			now = fastmsectime();
			setndig("n1",realPacket.hour/10);
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	03 e4       	ldi	r16, 0x43	; 67
	{

		//		decodelcd();		// lcd test and debug
		// Update RealPacket
		updategps();
		if (fastmsectime() > (now + 500/4))		// timeout 0.5 secs
     f3a:	16 e0       	ldi	r17, 0x06	; 6
	while(1)
	{

		//		decodelcd();		// lcd test and debug
		// Update RealPacket
		updategps();
     f3c:	0f 2e       	mov	r0, r31
     f3e:	fd ec       	ldi	r31, 0xCD	; 205
		if (fastmsectime() > (now + 500/4))		// timeout 0.5 secs
     f40:	ff 2e       	mov	r15, r31
     f42:	f0 2d       	mov	r31, r0
     f44:	c3 58       	subi	r28, 0x83	; 131
     f46:	df 4f       	sbci	r29, 0xFF	; 255
     f48:	bb da       	rcall	.-2698   	; 0x4c0 <updategps>
		{
			now = fastmsectime();
     f4a:	40 df       	rcall	.-384    	; 0xdcc <fastmsectime>
     f4c:	c8 17       	cp	r28, r24
     f4e:	d9 07       	cpc	r29, r25
			setndig("n1",realPacket.hour/10);
     f50:	d8 f7       	brcc	.-10     	; 0xf48 <main+0x3e>
     f52:	3c df       	rcall	.-392    	; 0xdcc <fastmsectime>
     f54:	ec 01       	movw	r28, r24
     f56:	f8 01       	movw	r30, r16
     f58:	60 85       	ldd	r22, Z+8	; 0x08
     f5a:	6f 9d       	mul	r22, r15
     f5c:	61 2d       	mov	r22, r1
     f5e:	11 24       	eor	r1, r1
     f60:	66 95       	lsr	r22
     f62:	66 95       	lsr	r22
     f64:	66 95       	lsr	r22
     f66:	70 e0       	ldi	r23, 0x00	; 0
			setndig("n2",realPacket.hour%10);
     f68:	84 e0       	ldi	r24, 0x04	; 4
     f6a:	94 e0       	ldi	r25, 0x04	; 4
     f6c:	d2 da       	rcall	.-2652   	; 0x512 <setndig>
     f6e:	f8 01       	movw	r30, r16
     f70:	60 85       	ldd	r22, Z+8	; 0x08
     f72:	6f 9d       	mul	r22, r15
     f74:	81 2d       	mov	r24, r1
     f76:	11 24       	eor	r1, r1
     f78:	86 95       	lsr	r24
     f7a:	86 95       	lsr	r24
     f7c:	86 95       	lsr	r24
     f7e:	88 0f       	add	r24, r24
     f80:	98 2f       	mov	r25, r24
     f82:	99 0f       	add	r25, r25
     f84:	99 0f       	add	r25, r25
     f86:	89 0f       	add	r24, r25
     f88:	68 1b       	sub	r22, r24
			setndig("n3",realPacket.min/10);
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	87 e0       	ldi	r24, 0x07	; 7
     f8e:	94 e0       	ldi	r25, 0x04	; 4
     f90:	c0 da       	rcall	.-2688   	; 0x512 <setndig>
     f92:	f8 01       	movw	r30, r16
     f94:	61 85       	ldd	r22, Z+9	; 0x09
     f96:	6f 9d       	mul	r22, r15
     f98:	61 2d       	mov	r22, r1
     f9a:	11 24       	eor	r1, r1
     f9c:	66 95       	lsr	r22
     f9e:	66 95       	lsr	r22
     fa0:	66 95       	lsr	r22
     fa2:	70 e0       	ldi	r23, 0x00	; 0
			setndig("n4",realPacket.min%10);
     fa4:	8a e0       	ldi	r24, 0x0A	; 10
     fa6:	94 e0       	ldi	r25, 0x04	; 4
     fa8:	b4 da       	rcall	.-2712   	; 0x512 <setndig>
     faa:	f8 01       	movw	r30, r16
     fac:	61 85       	ldd	r22, Z+9	; 0x09
     fae:	6f 9d       	mul	r22, r15
     fb0:	81 2d       	mov	r24, r1
     fb2:	11 24       	eor	r1, r1
     fb4:	86 95       	lsr	r24
     fb6:	86 95       	lsr	r24
     fb8:	86 95       	lsr	r24
     fba:	88 0f       	add	r24, r24
     fbc:	98 2f       	mov	r25, r24
     fbe:	99 0f       	add	r25, r25
     fc0:	99 0f       	add	r25, r25
     fc2:	89 0f       	add	r24, r25
     fc4:	68 1b       	sub	r22, r24
			setndig("n5",realPacket.sec/10);
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	8d e0       	ldi	r24, 0x0D	; 13
     fca:	94 e0       	ldi	r25, 0x04	; 4
     fcc:	a2 da       	rcall	.-2748   	; 0x512 <setndig>
     fce:	f8 01       	movw	r30, r16
     fd0:	62 85       	ldd	r22, Z+10	; 0x0a
     fd2:	6f 9d       	mul	r22, r15
     fd4:	61 2d       	mov	r22, r1
     fd6:	11 24       	eor	r1, r1
     fd8:	66 95       	lsr	r22
     fda:	66 95       	lsr	r22
     fdc:	66 95       	lsr	r22
     fde:	70 e0       	ldi	r23, 0x00	; 0
			setndig("n6",realPacket.sec%10);
     fe0:	80 e1       	ldi	r24, 0x10	; 16
     fe2:	94 e0       	ldi	r25, 0x04	; 4
     fe4:	96 da       	rcall	.-2772   	; 0x512 <setndig>
     fe6:	f8 01       	movw	r30, r16
     fe8:	62 85       	ldd	r22, Z+10	; 0x0a
     fea:	6f 9d       	mul	r22, r15
     fec:	81 2d       	mov	r24, r1
     fee:	11 24       	eor	r1, r1
     ff0:	86 95       	lsr	r24
     ff2:	86 95       	lsr	r24
     ff4:	86 95       	lsr	r24
     ff6:	88 0f       	add	r24, r24
     ff8:	98 2f       	mov	r25, r24
     ffa:	99 0f       	add	r25, r25
     ffc:	99 0f       	add	r25, r25
     ffe:	89 0f       	add	r24, r25
    1000:	68 1b       	sub	r22, r24
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	83 e1       	ldi	r24, 0x13	; 19
    1006:	94 e0       	ldi	r25, 0x04	; 4
    1008:	84 da       	rcall	.-2808   	; 0x512 <setndig>
    100a:	9c cf       	rjmp	.-200    	; 0xf44 <main+0x3a>

0000100c <__adddi3_s8>:
    100c:	00 24       	eor	r0, r0
    100e:	a7 fd       	sbrc	r26, 7
    1010:	00 94       	com	r0
    1012:	2a 0f       	add	r18, r26
    1014:	30 1d       	adc	r19, r0
    1016:	40 1d       	adc	r20, r0
    1018:	50 1d       	adc	r21, r0
    101a:	60 1d       	adc	r22, r0
    101c:	70 1d       	adc	r23, r0
    101e:	80 1d       	adc	r24, r0
    1020:	90 1d       	adc	r25, r0
    1022:	08 95       	ret

00001024 <printf>:
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	ae 01       	movw	r20, r28
    102e:	4a 5f       	subi	r20, 0xFA	; 250
    1030:	5f 4f       	sbci	r21, 0xFF	; 255
    1032:	fa 01       	movw	r30, r20
    1034:	61 91       	ld	r22, Z+
    1036:	71 91       	ld	r23, Z+
    1038:	af 01       	movw	r20, r30
    103a:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <__iob+0x2>
    103e:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <__iob+0x3>
    1042:	66 d0       	rcall	.+204    	; 0x1110 <vfprintf>
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <putchar>:
    104a:	60 91 51 07 	lds	r22, 0x0751	; 0x800751 <__iob+0x2>
    104e:	70 91 52 07 	lds	r23, 0x0752	; 0x800752 <__iob+0x3>
    1052:	71 c2       	rjmp	.+1250   	; 0x1536 <fputc>

00001054 <puts>:
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	e0 91 51 07 	lds	r30, 0x0751	; 0x800751 <__iob+0x2>
    1060:	f0 91 52 07 	lds	r31, 0x0752	; 0x800752 <__iob+0x3>
    1064:	23 81       	ldd	r18, Z+3	; 0x03
    1066:	21 ff       	sbrs	r18, 1
    1068:	1b c0       	rjmp	.+54     	; 0x10a0 <puts+0x4c>
    106a:	8c 01       	movw	r16, r24
    106c:	d0 e0       	ldi	r29, 0x00	; 0
    106e:	c0 e0       	ldi	r28, 0x00	; 0
    1070:	f8 01       	movw	r30, r16
    1072:	81 91       	ld	r24, Z+
    1074:	8f 01       	movw	r16, r30
    1076:	60 91 51 07 	lds	r22, 0x0751	; 0x800751 <__iob+0x2>
    107a:	70 91 52 07 	lds	r23, 0x0752	; 0x800752 <__iob+0x3>
    107e:	db 01       	movw	r26, r22
    1080:	18 96       	adiw	r26, 0x08	; 8
    1082:	ed 91       	ld	r30, X+
    1084:	fc 91       	ld	r31, X
    1086:	19 97       	sbiw	r26, 0x09	; 9
    1088:	88 23       	and	r24, r24
    108a:	31 f0       	breq	.+12     	; 0x1098 <puts+0x44>
    108c:	19 95       	eicall
    108e:	89 2b       	or	r24, r25
    1090:	79 f3       	breq	.-34     	; 0x1070 <puts+0x1c>
    1092:	df ef       	ldi	r29, 0xFF	; 255
    1094:	cf ef       	ldi	r28, 0xFF	; 255
    1096:	ec cf       	rjmp	.-40     	; 0x1070 <puts+0x1c>
    1098:	8a e0       	ldi	r24, 0x0A	; 10
    109a:	19 95       	eicall
    109c:	89 2b       	or	r24, r25
    109e:	19 f0       	breq	.+6      	; 0x10a6 <puts+0x52>
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	9f ef       	ldi	r25, 0xFF	; 255
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <puts+0x56>
    10a6:	8d 2f       	mov	r24, r29
    10a8:	9c 2f       	mov	r25, r28
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	08 95       	ret

000010b4 <sprintf>:
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	2e 97       	sbiw	r28, 0x0e	; 14
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	0e 89       	ldd	r16, Y+22	; 0x16
    10ce:	1f 89       	ldd	r17, Y+23	; 0x17
    10d0:	86 e0       	ldi	r24, 0x06	; 6
    10d2:	8c 83       	std	Y+4, r24	; 0x04
    10d4:	1a 83       	std	Y+2, r17	; 0x02
    10d6:	09 83       	std	Y+1, r16	; 0x01
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	9f e7       	ldi	r25, 0x7F	; 127
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	ae 01       	movw	r20, r28
    10e2:	46 5e       	subi	r20, 0xE6	; 230
    10e4:	5f 4f       	sbci	r21, 0xFF	; 255
    10e6:	68 8d       	ldd	r22, Y+24	; 0x18
    10e8:	79 8d       	ldd	r23, Y+25	; 0x19
    10ea:	ce 01       	movw	r24, r28
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	10 d0       	rcall	.+32     	; 0x1110 <vfprintf>
    10f0:	ef 81       	ldd	r30, Y+7	; 0x07
    10f2:	f8 85       	ldd	r31, Y+8	; 0x08
    10f4:	e0 0f       	add	r30, r16
    10f6:	f1 1f       	adc	r31, r17
    10f8:	10 82       	st	Z, r1
    10fa:	2e 96       	adiw	r28, 0x0e	; 14
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	08 95       	ret

00001110 <vfprintf>:
    1110:	2f 92       	push	r2
    1112:	3f 92       	push	r3
    1114:	4f 92       	push	r4
    1116:	5f 92       	push	r5
    1118:	6f 92       	push	r6
    111a:	7f 92       	push	r7
    111c:	8f 92       	push	r8
    111e:	9f 92       	push	r9
    1120:	af 92       	push	r10
    1122:	bf 92       	push	r11
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	2b 97       	sbiw	r28, 0x0b	; 11
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	6c 01       	movw	r12, r24
    1146:	7b 01       	movw	r14, r22
    1148:	8a 01       	movw	r16, r20
    114a:	fc 01       	movw	r30, r24
    114c:	17 82       	std	Z+7, r1	; 0x07
    114e:	16 82       	std	Z+6, r1	; 0x06
    1150:	83 81       	ldd	r24, Z+3	; 0x03
    1152:	81 ff       	sbrs	r24, 1
    1154:	bf c1       	rjmp	.+894    	; 0x14d4 <vfprintf+0x3c4>
    1156:	ce 01       	movw	r24, r28
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	3c 01       	movw	r6, r24
    115c:	f6 01       	movw	r30, r12
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	f7 01       	movw	r30, r14
    1162:	93 fd       	sbrc	r25, 3
    1164:	85 91       	lpm	r24, Z+
    1166:	93 ff       	sbrs	r25, 3
    1168:	81 91       	ld	r24, Z+
    116a:	7f 01       	movw	r14, r30
    116c:	88 23       	and	r24, r24
    116e:	09 f4       	brne	.+2      	; 0x1172 <vfprintf+0x62>
    1170:	ad c1       	rjmp	.+858    	; 0x14cc <vfprintf+0x3bc>
    1172:	85 32       	cpi	r24, 0x25	; 37
    1174:	39 f4       	brne	.+14     	; 0x1184 <vfprintf+0x74>
    1176:	93 fd       	sbrc	r25, 3
    1178:	85 91       	lpm	r24, Z+
    117a:	93 ff       	sbrs	r25, 3
    117c:	81 91       	ld	r24, Z+
    117e:	7f 01       	movw	r14, r30
    1180:	85 32       	cpi	r24, 0x25	; 37
    1182:	21 f4       	brne	.+8      	; 0x118c <vfprintf+0x7c>
    1184:	b6 01       	movw	r22, r12
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	d6 d1       	rcall	.+940    	; 0x1536 <fputc>
    118a:	e8 cf       	rjmp	.-48     	; 0x115c <vfprintf+0x4c>
    118c:	91 2c       	mov	r9, r1
    118e:	21 2c       	mov	r2, r1
    1190:	31 2c       	mov	r3, r1
    1192:	ff e1       	ldi	r31, 0x1F	; 31
    1194:	f3 15       	cp	r31, r3
    1196:	d8 f0       	brcs	.+54     	; 0x11ce <vfprintf+0xbe>
    1198:	8b 32       	cpi	r24, 0x2B	; 43
    119a:	79 f0       	breq	.+30     	; 0x11ba <vfprintf+0xaa>
    119c:	38 f4       	brcc	.+14     	; 0x11ac <vfprintf+0x9c>
    119e:	80 32       	cpi	r24, 0x20	; 32
    11a0:	79 f0       	breq	.+30     	; 0x11c0 <vfprintf+0xb0>
    11a2:	83 32       	cpi	r24, 0x23	; 35
    11a4:	a1 f4       	brne	.+40     	; 0x11ce <vfprintf+0xbe>
    11a6:	23 2d       	mov	r18, r3
    11a8:	20 61       	ori	r18, 0x10	; 16
    11aa:	1d c0       	rjmp	.+58     	; 0x11e6 <vfprintf+0xd6>
    11ac:	8d 32       	cpi	r24, 0x2D	; 45
    11ae:	61 f0       	breq	.+24     	; 0x11c8 <vfprintf+0xb8>
    11b0:	80 33       	cpi	r24, 0x30	; 48
    11b2:	69 f4       	brne	.+26     	; 0x11ce <vfprintf+0xbe>
    11b4:	23 2d       	mov	r18, r3
    11b6:	21 60       	ori	r18, 0x01	; 1
    11b8:	16 c0       	rjmp	.+44     	; 0x11e6 <vfprintf+0xd6>
    11ba:	83 2d       	mov	r24, r3
    11bc:	82 60       	ori	r24, 0x02	; 2
    11be:	38 2e       	mov	r3, r24
    11c0:	e3 2d       	mov	r30, r3
    11c2:	e4 60       	ori	r30, 0x04	; 4
    11c4:	3e 2e       	mov	r3, r30
    11c6:	2a c0       	rjmp	.+84     	; 0x121c <vfprintf+0x10c>
    11c8:	f3 2d       	mov	r31, r3
    11ca:	f8 60       	ori	r31, 0x08	; 8
    11cc:	1d c0       	rjmp	.+58     	; 0x1208 <vfprintf+0xf8>
    11ce:	37 fc       	sbrc	r3, 7
    11d0:	2d c0       	rjmp	.+90     	; 0x122c <vfprintf+0x11c>
    11d2:	20 ed       	ldi	r18, 0xD0	; 208
    11d4:	28 0f       	add	r18, r24
    11d6:	2a 30       	cpi	r18, 0x0A	; 10
    11d8:	40 f0       	brcs	.+16     	; 0x11ea <vfprintf+0xda>
    11da:	8e 32       	cpi	r24, 0x2E	; 46
    11dc:	b9 f4       	brne	.+46     	; 0x120c <vfprintf+0xfc>
    11de:	36 fc       	sbrc	r3, 6
    11e0:	75 c1       	rjmp	.+746    	; 0x14cc <vfprintf+0x3bc>
    11e2:	23 2d       	mov	r18, r3
    11e4:	20 64       	ori	r18, 0x40	; 64
    11e6:	32 2e       	mov	r3, r18
    11e8:	19 c0       	rjmp	.+50     	; 0x121c <vfprintf+0x10c>
    11ea:	36 fe       	sbrs	r3, 6
    11ec:	06 c0       	rjmp	.+12     	; 0x11fa <vfprintf+0xea>
    11ee:	8a e0       	ldi	r24, 0x0A	; 10
    11f0:	98 9e       	mul	r9, r24
    11f2:	20 0d       	add	r18, r0
    11f4:	11 24       	eor	r1, r1
    11f6:	92 2e       	mov	r9, r18
    11f8:	11 c0       	rjmp	.+34     	; 0x121c <vfprintf+0x10c>
    11fa:	ea e0       	ldi	r30, 0x0A	; 10
    11fc:	2e 9e       	mul	r2, r30
    11fe:	20 0d       	add	r18, r0
    1200:	11 24       	eor	r1, r1
    1202:	22 2e       	mov	r2, r18
    1204:	f3 2d       	mov	r31, r3
    1206:	f0 62       	ori	r31, 0x20	; 32
    1208:	3f 2e       	mov	r3, r31
    120a:	08 c0       	rjmp	.+16     	; 0x121c <vfprintf+0x10c>
    120c:	8c 36       	cpi	r24, 0x6C	; 108
    120e:	21 f4       	brne	.+8      	; 0x1218 <vfprintf+0x108>
    1210:	83 2d       	mov	r24, r3
    1212:	80 68       	ori	r24, 0x80	; 128
    1214:	38 2e       	mov	r3, r24
    1216:	02 c0       	rjmp	.+4      	; 0x121c <vfprintf+0x10c>
    1218:	88 36       	cpi	r24, 0x68	; 104
    121a:	41 f4       	brne	.+16     	; 0x122c <vfprintf+0x11c>
    121c:	f7 01       	movw	r30, r14
    121e:	93 fd       	sbrc	r25, 3
    1220:	85 91       	lpm	r24, Z+
    1222:	93 ff       	sbrs	r25, 3
    1224:	81 91       	ld	r24, Z+
    1226:	7f 01       	movw	r14, r30
    1228:	81 11       	cpse	r24, r1
    122a:	b3 cf       	rjmp	.-154    	; 0x1192 <vfprintf+0x82>
    122c:	98 2f       	mov	r25, r24
    122e:	9f 7d       	andi	r25, 0xDF	; 223
    1230:	95 54       	subi	r25, 0x45	; 69
    1232:	93 30       	cpi	r25, 0x03	; 3
    1234:	28 f4       	brcc	.+10     	; 0x1240 <vfprintf+0x130>
    1236:	0c 5f       	subi	r16, 0xFC	; 252
    1238:	1f 4f       	sbci	r17, 0xFF	; 255
    123a:	9f e3       	ldi	r25, 0x3F	; 63
    123c:	99 83       	std	Y+1, r25	; 0x01
    123e:	0d c0       	rjmp	.+26     	; 0x125a <vfprintf+0x14a>
    1240:	83 36       	cpi	r24, 0x63	; 99
    1242:	31 f0       	breq	.+12     	; 0x1250 <vfprintf+0x140>
    1244:	83 37       	cpi	r24, 0x73	; 115
    1246:	71 f0       	breq	.+28     	; 0x1264 <vfprintf+0x154>
    1248:	83 35       	cpi	r24, 0x53	; 83
    124a:	09 f0       	breq	.+2      	; 0x124e <vfprintf+0x13e>
    124c:	55 c0       	rjmp	.+170    	; 0x12f8 <vfprintf+0x1e8>
    124e:	20 c0       	rjmp	.+64     	; 0x1290 <vfprintf+0x180>
    1250:	f8 01       	movw	r30, r16
    1252:	80 81       	ld	r24, Z
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	0e 5f       	subi	r16, 0xFE	; 254
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	88 24       	eor	r8, r8
    125c:	83 94       	inc	r8
    125e:	91 2c       	mov	r9, r1
    1260:	53 01       	movw	r10, r6
    1262:	12 c0       	rjmp	.+36     	; 0x1288 <vfprintf+0x178>
    1264:	28 01       	movw	r4, r16
    1266:	f2 e0       	ldi	r31, 0x02	; 2
    1268:	4f 0e       	add	r4, r31
    126a:	51 1c       	adc	r5, r1
    126c:	f8 01       	movw	r30, r16
    126e:	a0 80       	ld	r10, Z
    1270:	b1 80       	ldd	r11, Z+1	; 0x01
    1272:	36 fe       	sbrs	r3, 6
    1274:	03 c0       	rjmp	.+6      	; 0x127c <vfprintf+0x16c>
    1276:	69 2d       	mov	r22, r9
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <vfprintf+0x170>
    127c:	6f ef       	ldi	r22, 0xFF	; 255
    127e:	7f ef       	ldi	r23, 0xFF	; 255
    1280:	c5 01       	movw	r24, r10
    1282:	4e d1       	rcall	.+668    	; 0x1520 <strnlen>
    1284:	4c 01       	movw	r8, r24
    1286:	82 01       	movw	r16, r4
    1288:	f3 2d       	mov	r31, r3
    128a:	ff 77       	andi	r31, 0x7F	; 127
    128c:	3f 2e       	mov	r3, r31
    128e:	15 c0       	rjmp	.+42     	; 0x12ba <vfprintf+0x1aa>
    1290:	28 01       	movw	r4, r16
    1292:	22 e0       	ldi	r18, 0x02	; 2
    1294:	42 0e       	add	r4, r18
    1296:	51 1c       	adc	r5, r1
    1298:	f8 01       	movw	r30, r16
    129a:	a0 80       	ld	r10, Z
    129c:	b1 80       	ldd	r11, Z+1	; 0x01
    129e:	36 fe       	sbrs	r3, 6
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <vfprintf+0x198>
    12a2:	69 2d       	mov	r22, r9
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <vfprintf+0x19c>
    12a8:	6f ef       	ldi	r22, 0xFF	; 255
    12aa:	7f ef       	ldi	r23, 0xFF	; 255
    12ac:	c5 01       	movw	r24, r10
    12ae:	2d d1       	rcall	.+602    	; 0x150a <strnlen_P>
    12b0:	4c 01       	movw	r8, r24
    12b2:	f3 2d       	mov	r31, r3
    12b4:	f0 68       	ori	r31, 0x80	; 128
    12b6:	3f 2e       	mov	r3, r31
    12b8:	82 01       	movw	r16, r4
    12ba:	33 fc       	sbrc	r3, 3
    12bc:	19 c0       	rjmp	.+50     	; 0x12f0 <vfprintf+0x1e0>
    12be:	82 2d       	mov	r24, r2
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	88 16       	cp	r8, r24
    12c4:	99 06       	cpc	r9, r25
    12c6:	a0 f4       	brcc	.+40     	; 0x12f0 <vfprintf+0x1e0>
    12c8:	b6 01       	movw	r22, r12
    12ca:	80 e2       	ldi	r24, 0x20	; 32
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	33 d1       	rcall	.+614    	; 0x1536 <fputc>
    12d0:	2a 94       	dec	r2
    12d2:	f5 cf       	rjmp	.-22     	; 0x12be <vfprintf+0x1ae>
    12d4:	f5 01       	movw	r30, r10
    12d6:	37 fc       	sbrc	r3, 7
    12d8:	85 91       	lpm	r24, Z+
    12da:	37 fe       	sbrs	r3, 7
    12dc:	81 91       	ld	r24, Z+
    12de:	5f 01       	movw	r10, r30
    12e0:	b6 01       	movw	r22, r12
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	28 d1       	rcall	.+592    	; 0x1536 <fputc>
    12e6:	21 10       	cpse	r2, r1
    12e8:	2a 94       	dec	r2
    12ea:	21 e0       	ldi	r18, 0x01	; 1
    12ec:	82 1a       	sub	r8, r18
    12ee:	91 08       	sbc	r9, r1
    12f0:	81 14       	cp	r8, r1
    12f2:	91 04       	cpc	r9, r1
    12f4:	79 f7       	brne	.-34     	; 0x12d4 <vfprintf+0x1c4>
    12f6:	e1 c0       	rjmp	.+450    	; 0x14ba <vfprintf+0x3aa>
    12f8:	84 36       	cpi	r24, 0x64	; 100
    12fa:	11 f0       	breq	.+4      	; 0x1300 <vfprintf+0x1f0>
    12fc:	89 36       	cpi	r24, 0x69	; 105
    12fe:	39 f5       	brne	.+78     	; 0x134e <vfprintf+0x23e>
    1300:	f8 01       	movw	r30, r16
    1302:	37 fe       	sbrs	r3, 7
    1304:	07 c0       	rjmp	.+14     	; 0x1314 <vfprintf+0x204>
    1306:	60 81       	ld	r22, Z
    1308:	71 81       	ldd	r23, Z+1	; 0x01
    130a:	82 81       	ldd	r24, Z+2	; 0x02
    130c:	93 81       	ldd	r25, Z+3	; 0x03
    130e:	0c 5f       	subi	r16, 0xFC	; 252
    1310:	1f 4f       	sbci	r17, 0xFF	; 255
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <vfprintf+0x214>
    1314:	60 81       	ld	r22, Z
    1316:	71 81       	ldd	r23, Z+1	; 0x01
    1318:	07 2e       	mov	r0, r23
    131a:	00 0c       	add	r0, r0
    131c:	88 0b       	sbc	r24, r24
    131e:	99 0b       	sbc	r25, r25
    1320:	0e 5f       	subi	r16, 0xFE	; 254
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
    1324:	f3 2d       	mov	r31, r3
    1326:	ff 76       	andi	r31, 0x6F	; 111
    1328:	3f 2e       	mov	r3, r31
    132a:	97 ff       	sbrs	r25, 7
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <vfprintf+0x230>
    132e:	90 95       	com	r25
    1330:	80 95       	com	r24
    1332:	70 95       	com	r23
    1334:	61 95       	neg	r22
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	8f 4f       	sbci	r24, 0xFF	; 255
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	f0 68       	ori	r31, 0x80	; 128
    133e:	3f 2e       	mov	r3, r31
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	a3 01       	movw	r20, r6
    1346:	33 d1       	rcall	.+614    	; 0x15ae <__ultoa_invert>
    1348:	88 2e       	mov	r8, r24
    134a:	86 18       	sub	r8, r6
    134c:	44 c0       	rjmp	.+136    	; 0x13d6 <vfprintf+0x2c6>
    134e:	85 37       	cpi	r24, 0x75	; 117
    1350:	31 f4       	brne	.+12     	; 0x135e <vfprintf+0x24e>
    1352:	23 2d       	mov	r18, r3
    1354:	2f 7e       	andi	r18, 0xEF	; 239
    1356:	b2 2e       	mov	r11, r18
    1358:	2a e0       	ldi	r18, 0x0A	; 10
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	25 c0       	rjmp	.+74     	; 0x13a8 <vfprintf+0x298>
    135e:	93 2d       	mov	r25, r3
    1360:	99 7f       	andi	r25, 0xF9	; 249
    1362:	b9 2e       	mov	r11, r25
    1364:	8f 36       	cpi	r24, 0x6F	; 111
    1366:	c1 f0       	breq	.+48     	; 0x1398 <vfprintf+0x288>
    1368:	18 f4       	brcc	.+6      	; 0x1370 <vfprintf+0x260>
    136a:	88 35       	cpi	r24, 0x58	; 88
    136c:	79 f0       	breq	.+30     	; 0x138c <vfprintf+0x27c>
    136e:	ae c0       	rjmp	.+348    	; 0x14cc <vfprintf+0x3bc>
    1370:	80 37       	cpi	r24, 0x70	; 112
    1372:	19 f0       	breq	.+6      	; 0x137a <vfprintf+0x26a>
    1374:	88 37       	cpi	r24, 0x78	; 120
    1376:	21 f0       	breq	.+8      	; 0x1380 <vfprintf+0x270>
    1378:	a9 c0       	rjmp	.+338    	; 0x14cc <vfprintf+0x3bc>
    137a:	e9 2f       	mov	r30, r25
    137c:	e0 61       	ori	r30, 0x10	; 16
    137e:	be 2e       	mov	r11, r30
    1380:	b4 fe       	sbrs	r11, 4
    1382:	0d c0       	rjmp	.+26     	; 0x139e <vfprintf+0x28e>
    1384:	fb 2d       	mov	r31, r11
    1386:	f4 60       	ori	r31, 0x04	; 4
    1388:	bf 2e       	mov	r11, r31
    138a:	09 c0       	rjmp	.+18     	; 0x139e <vfprintf+0x28e>
    138c:	34 fe       	sbrs	r3, 4
    138e:	0a c0       	rjmp	.+20     	; 0x13a4 <vfprintf+0x294>
    1390:	29 2f       	mov	r18, r25
    1392:	26 60       	ori	r18, 0x06	; 6
    1394:	b2 2e       	mov	r11, r18
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <vfprintf+0x294>
    1398:	28 e0       	ldi	r18, 0x08	; 8
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	05 c0       	rjmp	.+10     	; 0x13a8 <vfprintf+0x298>
    139e:	20 e1       	ldi	r18, 0x10	; 16
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <vfprintf+0x298>
    13a4:	20 e1       	ldi	r18, 0x10	; 16
    13a6:	32 e0       	ldi	r19, 0x02	; 2
    13a8:	f8 01       	movw	r30, r16
    13aa:	b7 fe       	sbrs	r11, 7
    13ac:	07 c0       	rjmp	.+14     	; 0x13bc <vfprintf+0x2ac>
    13ae:	60 81       	ld	r22, Z
    13b0:	71 81       	ldd	r23, Z+1	; 0x01
    13b2:	82 81       	ldd	r24, Z+2	; 0x02
    13b4:	93 81       	ldd	r25, Z+3	; 0x03
    13b6:	0c 5f       	subi	r16, 0xFC	; 252
    13b8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ba:	06 c0       	rjmp	.+12     	; 0x13c8 <vfprintf+0x2b8>
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 5f       	subi	r16, 0xFE	; 254
    13c6:	1f 4f       	sbci	r17, 0xFF	; 255
    13c8:	a3 01       	movw	r20, r6
    13ca:	f1 d0       	rcall	.+482    	; 0x15ae <__ultoa_invert>
    13cc:	88 2e       	mov	r8, r24
    13ce:	86 18       	sub	r8, r6
    13d0:	fb 2d       	mov	r31, r11
    13d2:	ff 77       	andi	r31, 0x7F	; 127
    13d4:	3f 2e       	mov	r3, r31
    13d6:	36 fe       	sbrs	r3, 6
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <vfprintf+0x2e4>
    13da:	23 2d       	mov	r18, r3
    13dc:	2e 7f       	andi	r18, 0xFE	; 254
    13de:	a2 2e       	mov	r10, r18
    13e0:	89 14       	cp	r8, r9
    13e2:	58 f4       	brcc	.+22     	; 0x13fa <vfprintf+0x2ea>
    13e4:	34 fe       	sbrs	r3, 4
    13e6:	0b c0       	rjmp	.+22     	; 0x13fe <vfprintf+0x2ee>
    13e8:	32 fc       	sbrc	r3, 2
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <vfprintf+0x2ee>
    13ec:	83 2d       	mov	r24, r3
    13ee:	8e 7e       	andi	r24, 0xEE	; 238
    13f0:	a8 2e       	mov	r10, r24
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <vfprintf+0x2ee>
    13f4:	b8 2c       	mov	r11, r8
    13f6:	a3 2c       	mov	r10, r3
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <vfprintf+0x2f0>
    13fa:	b8 2c       	mov	r11, r8
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <vfprintf+0x2f0>
    13fe:	b9 2c       	mov	r11, r9
    1400:	a4 fe       	sbrs	r10, 4
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <vfprintf+0x312>
    1404:	fe 01       	movw	r30, r28
    1406:	e8 0d       	add	r30, r8
    1408:	f1 1d       	adc	r31, r1
    140a:	80 81       	ld	r24, Z
    140c:	80 33       	cpi	r24, 0x30	; 48
    140e:	21 f4       	brne	.+8      	; 0x1418 <vfprintf+0x308>
    1410:	9a 2d       	mov	r25, r10
    1412:	99 7e       	andi	r25, 0xE9	; 233
    1414:	a9 2e       	mov	r10, r25
    1416:	09 c0       	rjmp	.+18     	; 0x142a <vfprintf+0x31a>
    1418:	a2 fe       	sbrs	r10, 2
    141a:	06 c0       	rjmp	.+12     	; 0x1428 <vfprintf+0x318>
    141c:	b3 94       	inc	r11
    141e:	b3 94       	inc	r11
    1420:	04 c0       	rjmp	.+8      	; 0x142a <vfprintf+0x31a>
    1422:	8a 2d       	mov	r24, r10
    1424:	86 78       	andi	r24, 0x86	; 134
    1426:	09 f0       	breq	.+2      	; 0x142a <vfprintf+0x31a>
    1428:	b3 94       	inc	r11
    142a:	a3 fc       	sbrc	r10, 3
    142c:	10 c0       	rjmp	.+32     	; 0x144e <vfprintf+0x33e>
    142e:	a0 fe       	sbrs	r10, 0
    1430:	06 c0       	rjmp	.+12     	; 0x143e <vfprintf+0x32e>
    1432:	b2 14       	cp	r11, r2
    1434:	80 f4       	brcc	.+32     	; 0x1456 <vfprintf+0x346>
    1436:	28 0c       	add	r2, r8
    1438:	92 2c       	mov	r9, r2
    143a:	9b 18       	sub	r9, r11
    143c:	0d c0       	rjmp	.+26     	; 0x1458 <vfprintf+0x348>
    143e:	b2 14       	cp	r11, r2
    1440:	58 f4       	brcc	.+22     	; 0x1458 <vfprintf+0x348>
    1442:	b6 01       	movw	r22, r12
    1444:	80 e2       	ldi	r24, 0x20	; 32
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	76 d0       	rcall	.+236    	; 0x1536 <fputc>
    144a:	b3 94       	inc	r11
    144c:	f8 cf       	rjmp	.-16     	; 0x143e <vfprintf+0x32e>
    144e:	b2 14       	cp	r11, r2
    1450:	18 f4       	brcc	.+6      	; 0x1458 <vfprintf+0x348>
    1452:	2b 18       	sub	r2, r11
    1454:	02 c0       	rjmp	.+4      	; 0x145a <vfprintf+0x34a>
    1456:	98 2c       	mov	r9, r8
    1458:	21 2c       	mov	r2, r1
    145a:	a4 fe       	sbrs	r10, 4
    145c:	0f c0       	rjmp	.+30     	; 0x147c <vfprintf+0x36c>
    145e:	b6 01       	movw	r22, r12
    1460:	80 e3       	ldi	r24, 0x30	; 48
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	68 d0       	rcall	.+208    	; 0x1536 <fputc>
    1466:	a2 fe       	sbrs	r10, 2
    1468:	16 c0       	rjmp	.+44     	; 0x1496 <vfprintf+0x386>
    146a:	a1 fc       	sbrc	r10, 1
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <vfprintf+0x364>
    146e:	88 e7       	ldi	r24, 0x78	; 120
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <vfprintf+0x368>
    1474:	88 e5       	ldi	r24, 0x58	; 88
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	b6 01       	movw	r22, r12
    147a:	0c c0       	rjmp	.+24     	; 0x1494 <vfprintf+0x384>
    147c:	8a 2d       	mov	r24, r10
    147e:	86 78       	andi	r24, 0x86	; 134
    1480:	51 f0       	breq	.+20     	; 0x1496 <vfprintf+0x386>
    1482:	a1 fe       	sbrs	r10, 1
    1484:	02 c0       	rjmp	.+4      	; 0x148a <vfprintf+0x37a>
    1486:	8b e2       	ldi	r24, 0x2B	; 43
    1488:	01 c0       	rjmp	.+2      	; 0x148c <vfprintf+0x37c>
    148a:	80 e2       	ldi	r24, 0x20	; 32
    148c:	a7 fc       	sbrc	r10, 7
    148e:	8d e2       	ldi	r24, 0x2D	; 45
    1490:	b6 01       	movw	r22, r12
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	50 d0       	rcall	.+160    	; 0x1536 <fputc>
    1496:	89 14       	cp	r8, r9
    1498:	30 f4       	brcc	.+12     	; 0x14a6 <vfprintf+0x396>
    149a:	b6 01       	movw	r22, r12
    149c:	80 e3       	ldi	r24, 0x30	; 48
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	4a d0       	rcall	.+148    	; 0x1536 <fputc>
    14a2:	9a 94       	dec	r9
    14a4:	f8 cf       	rjmp	.-16     	; 0x1496 <vfprintf+0x386>
    14a6:	8a 94       	dec	r8
    14a8:	f3 01       	movw	r30, r6
    14aa:	e8 0d       	add	r30, r8
    14ac:	f1 1d       	adc	r31, r1
    14ae:	80 81       	ld	r24, Z
    14b0:	b6 01       	movw	r22, r12
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	40 d0       	rcall	.+128    	; 0x1536 <fputc>
    14b6:	81 10       	cpse	r8, r1
    14b8:	f6 cf       	rjmp	.-20     	; 0x14a6 <vfprintf+0x396>
    14ba:	22 20       	and	r2, r2
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <vfprintf+0x3b0>
    14be:	4e ce       	rjmp	.-868    	; 0x115c <vfprintf+0x4c>
    14c0:	b6 01       	movw	r22, r12
    14c2:	80 e2       	ldi	r24, 0x20	; 32
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	37 d0       	rcall	.+110    	; 0x1536 <fputc>
    14c8:	2a 94       	dec	r2
    14ca:	f7 cf       	rjmp	.-18     	; 0x14ba <vfprintf+0x3aa>
    14cc:	f6 01       	movw	r30, r12
    14ce:	86 81       	ldd	r24, Z+6	; 0x06
    14d0:	97 81       	ldd	r25, Z+7	; 0x07
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <vfprintf+0x3c8>
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	9f ef       	ldi	r25, 0xFF	; 255
    14d8:	2b 96       	adiw	r28, 0x0b	; 11
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	bf 90       	pop	r11
    14f6:	af 90       	pop	r10
    14f8:	9f 90       	pop	r9
    14fa:	8f 90       	pop	r8
    14fc:	7f 90       	pop	r7
    14fe:	6f 90       	pop	r6
    1500:	5f 90       	pop	r5
    1502:	4f 90       	pop	r4
    1504:	3f 90       	pop	r3
    1506:	2f 90       	pop	r2
    1508:	08 95       	ret

0000150a <strnlen_P>:
    150a:	fc 01       	movw	r30, r24
    150c:	05 90       	lpm	r0, Z+
    150e:	61 50       	subi	r22, 0x01	; 1
    1510:	70 40       	sbci	r23, 0x00	; 0
    1512:	01 10       	cpse	r0, r1
    1514:	d8 f7       	brcc	.-10     	; 0x150c <strnlen_P+0x2>
    1516:	80 95       	com	r24
    1518:	90 95       	com	r25
    151a:	8e 0f       	add	r24, r30
    151c:	9f 1f       	adc	r25, r31
    151e:	08 95       	ret

00001520 <strnlen>:
    1520:	fc 01       	movw	r30, r24
    1522:	61 50       	subi	r22, 0x01	; 1
    1524:	70 40       	sbci	r23, 0x00	; 0
    1526:	01 90       	ld	r0, Z+
    1528:	01 10       	cpse	r0, r1
    152a:	d8 f7       	brcc	.-10     	; 0x1522 <strnlen+0x2>
    152c:	80 95       	com	r24
    152e:	90 95       	com	r25
    1530:	8e 0f       	add	r24, r30
    1532:	9f 1f       	adc	r25, r31
    1534:	08 95       	ret

00001536 <fputc>:
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	fb 01       	movw	r30, r22
    1540:	23 81       	ldd	r18, Z+3	; 0x03
    1542:	21 fd       	sbrc	r18, 1
    1544:	03 c0       	rjmp	.+6      	; 0x154c <fputc+0x16>
    1546:	8f ef       	ldi	r24, 0xFF	; 255
    1548:	9f ef       	ldi	r25, 0xFF	; 255
    154a:	2c c0       	rjmp	.+88     	; 0x15a4 <fputc+0x6e>
    154c:	22 ff       	sbrs	r18, 2
    154e:	16 c0       	rjmp	.+44     	; 0x157c <fputc+0x46>
    1550:	46 81       	ldd	r20, Z+6	; 0x06
    1552:	57 81       	ldd	r21, Z+7	; 0x07
    1554:	24 81       	ldd	r18, Z+4	; 0x04
    1556:	35 81       	ldd	r19, Z+5	; 0x05
    1558:	42 17       	cp	r20, r18
    155a:	53 07       	cpc	r21, r19
    155c:	44 f4       	brge	.+16     	; 0x156e <fputc+0x38>
    155e:	a0 81       	ld	r26, Z
    1560:	b1 81       	ldd	r27, Z+1	; 0x01
    1562:	9d 01       	movw	r18, r26
    1564:	2f 5f       	subi	r18, 0xFF	; 255
    1566:	3f 4f       	sbci	r19, 0xFF	; 255
    1568:	31 83       	std	Z+1, r19	; 0x01
    156a:	20 83       	st	Z, r18
    156c:	8c 93       	st	X, r24
    156e:	26 81       	ldd	r18, Z+6	; 0x06
    1570:	37 81       	ldd	r19, Z+7	; 0x07
    1572:	2f 5f       	subi	r18, 0xFF	; 255
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	37 83       	std	Z+7, r19	; 0x07
    1578:	26 83       	std	Z+6, r18	; 0x06
    157a:	14 c0       	rjmp	.+40     	; 0x15a4 <fputc+0x6e>
    157c:	8b 01       	movw	r16, r22
    157e:	ec 01       	movw	r28, r24
    1580:	fb 01       	movw	r30, r22
    1582:	00 84       	ldd	r0, Z+8	; 0x08
    1584:	f1 85       	ldd	r31, Z+9	; 0x09
    1586:	e0 2d       	mov	r30, r0
    1588:	19 95       	eicall
    158a:	89 2b       	or	r24, r25
    158c:	e1 f6       	brne	.-72     	; 0x1546 <fputc+0x10>
    158e:	d8 01       	movw	r26, r16
    1590:	16 96       	adiw	r26, 0x06	; 6
    1592:	8d 91       	ld	r24, X+
    1594:	9c 91       	ld	r25, X
    1596:	17 97       	sbiw	r26, 0x07	; 7
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	17 96       	adiw	r26, 0x07	; 7
    159c:	9c 93       	st	X, r25
    159e:	8e 93       	st	-X, r24
    15a0:	16 97       	sbiw	r26, 0x06	; 6
    15a2:	ce 01       	movw	r24, r28
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	08 95       	ret

000015ae <__ultoa_invert>:
    15ae:	fa 01       	movw	r30, r20
    15b0:	aa 27       	eor	r26, r26
    15b2:	28 30       	cpi	r18, 0x08	; 8
    15b4:	51 f1       	breq	.+84     	; 0x160a <__ultoa_invert+0x5c>
    15b6:	20 31       	cpi	r18, 0x10	; 16
    15b8:	81 f1       	breq	.+96     	; 0x161a <__ultoa_invert+0x6c>
    15ba:	e8 94       	clt
    15bc:	6f 93       	push	r22
    15be:	6e 7f       	andi	r22, 0xFE	; 254
    15c0:	6e 5f       	subi	r22, 0xFE	; 254
    15c2:	7f 4f       	sbci	r23, 0xFF	; 255
    15c4:	8f 4f       	sbci	r24, 0xFF	; 255
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	af 4f       	sbci	r26, 0xFF	; 255
    15ca:	b1 e0       	ldi	r27, 0x01	; 1
    15cc:	3e d0       	rcall	.+124    	; 0x164a <__ultoa_invert+0x9c>
    15ce:	b4 e0       	ldi	r27, 0x04	; 4
    15d0:	3c d0       	rcall	.+120    	; 0x164a <__ultoa_invert+0x9c>
    15d2:	67 0f       	add	r22, r23
    15d4:	78 1f       	adc	r23, r24
    15d6:	89 1f       	adc	r24, r25
    15d8:	9a 1f       	adc	r25, r26
    15da:	a1 1d       	adc	r26, r1
    15dc:	68 0f       	add	r22, r24
    15de:	79 1f       	adc	r23, r25
    15e0:	8a 1f       	adc	r24, r26
    15e2:	91 1d       	adc	r25, r1
    15e4:	a1 1d       	adc	r26, r1
    15e6:	6a 0f       	add	r22, r26
    15e8:	71 1d       	adc	r23, r1
    15ea:	81 1d       	adc	r24, r1
    15ec:	91 1d       	adc	r25, r1
    15ee:	a1 1d       	adc	r26, r1
    15f0:	20 d0       	rcall	.+64     	; 0x1632 <__ultoa_invert+0x84>
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <__ultoa_invert+0x48>
    15f4:	68 94       	set
    15f6:	3f 91       	pop	r19
    15f8:	2a e0       	ldi	r18, 0x0A	; 10
    15fa:	26 9f       	mul	r18, r22
    15fc:	11 24       	eor	r1, r1
    15fe:	30 19       	sub	r19, r0
    1600:	30 5d       	subi	r19, 0xD0	; 208
    1602:	31 93       	st	Z+, r19
    1604:	de f6       	brtc	.-74     	; 0x15bc <__ultoa_invert+0xe>
    1606:	cf 01       	movw	r24, r30
    1608:	08 95       	ret
    160a:	46 2f       	mov	r20, r22
    160c:	47 70       	andi	r20, 0x07	; 7
    160e:	40 5d       	subi	r20, 0xD0	; 208
    1610:	41 93       	st	Z+, r20
    1612:	b3 e0       	ldi	r27, 0x03	; 3
    1614:	0f d0       	rcall	.+30     	; 0x1634 <__ultoa_invert+0x86>
    1616:	c9 f7       	brne	.-14     	; 0x160a <__ultoa_invert+0x5c>
    1618:	f6 cf       	rjmp	.-20     	; 0x1606 <__ultoa_invert+0x58>
    161a:	46 2f       	mov	r20, r22
    161c:	4f 70       	andi	r20, 0x0F	; 15
    161e:	40 5d       	subi	r20, 0xD0	; 208
    1620:	4a 33       	cpi	r20, 0x3A	; 58
    1622:	18 f0       	brcs	.+6      	; 0x162a <__ultoa_invert+0x7c>
    1624:	49 5d       	subi	r20, 0xD9	; 217
    1626:	31 fd       	sbrc	r19, 1
    1628:	40 52       	subi	r20, 0x20	; 32
    162a:	41 93       	st	Z+, r20
    162c:	02 d0       	rcall	.+4      	; 0x1632 <__ultoa_invert+0x84>
    162e:	a9 f7       	brne	.-22     	; 0x161a <__ultoa_invert+0x6c>
    1630:	ea cf       	rjmp	.-44     	; 0x1606 <__ultoa_invert+0x58>
    1632:	b4 e0       	ldi	r27, 0x04	; 4
    1634:	a6 95       	lsr	r26
    1636:	97 95       	ror	r25
    1638:	87 95       	ror	r24
    163a:	77 95       	ror	r23
    163c:	67 95       	ror	r22
    163e:	ba 95       	dec	r27
    1640:	c9 f7       	brne	.-14     	; 0x1634 <__ultoa_invert+0x86>
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	61 05       	cpc	r22, r1
    1646:	71 05       	cpc	r23, r1
    1648:	08 95       	ret
    164a:	9b 01       	movw	r18, r22
    164c:	ac 01       	movw	r20, r24
    164e:	0a 2e       	mov	r0, r26
    1650:	06 94       	lsr	r0
    1652:	57 95       	ror	r21
    1654:	47 95       	ror	r20
    1656:	37 95       	ror	r19
    1658:	27 95       	ror	r18
    165a:	ba 95       	dec	r27
    165c:	c9 f7       	brne	.-14     	; 0x1650 <__ultoa_invert+0xa2>
    165e:	62 0f       	add	r22, r18
    1660:	73 1f       	adc	r23, r19
    1662:	84 1f       	adc	r24, r20
    1664:	95 1f       	adc	r25, r21
    1666:	a0 1d       	adc	r26, r0
    1668:	08 95       	ret

0000166a <_exit>:
    166a:	f8 94       	cli

0000166c <__stop_program>:
    166c:	ff cf       	rjmp	.-2      	; 0x166c <__stop_program>
