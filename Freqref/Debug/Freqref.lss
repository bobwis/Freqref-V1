
Freqref.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027c  00800200  000018b0  00001944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000048a  0080047c  0080047c  00001bc0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e8  00000000  00000000  00001c60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a33  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c0e  00000000  00000000  00007b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000241b  00000000  00000000  00009789  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d0c  00000000  00000000  0000bba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ac0  00000000  00000000  0000c8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c2e  00000000  00000000  0000e370  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  00010f9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	66 c4       	rjmp	.+2252   	; 0x92e <__vector_24>
      62:	00 00       	nop
      64:	de c4       	rjmp	.+2492   	; 0xa22 <__vector_25>
      66:	00 00       	nop
      68:	04 c5       	rjmp	.+2568   	; 0xa72 <__vector_26>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	ef c3       	rjmp	.+2014   	; 0x858 <__vector_30>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3f c5       	rjmp	.+2686   	; 0xb10 <__vector_36>
      92:	00 00       	nop
      94:	66 c5       	rjmp	.+2764   	; 0xb62 <__vector_37>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	78 c7       	rjmp	.+3824   	; 0xf9a <__vector_42>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a9 c7       	rjmp	.+3922   	; 0x1010 <__vector_47>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d8 c5       	rjmp	.+2992   	; 0xc7e <__vector_51>
      ce:	00 00       	nop
      d0:	ff c5       	rjmp	.+3070   	; 0xcd0 <__vector_52>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	89 c6       	rjmp	.+3346   	; 0xdec <__vector_54>
      da:	00 00       	nop
      dc:	b0 c6       	rjmp	.+3424   	; 0xe3e <__vector_55>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 eb       	ldi	r30, 0xB0	; 176
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 37       	cpi	r26, 0x7C	; 124
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	29 e0       	ldi	r18, 0x09	; 9
     110:	ac e7       	ldi	r26, 0x7C	; 124
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 30       	cpi	r26, 0x06	; 6
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 b8 08 	call	0x1170	; 0x1170 <main>
     122:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     128:	14 c3       	rjmp	.+1576   	; 0x752 <system_init>
     12a:	08 95       	ret

0000012c <printPacket>:
			0x00,0x00,0x00,0x80,0x96,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
			0x00,0x00,0x00,0x00,0x6F,0x00,0x00,0x00,0x29,0xA8
		};

		sendPacket(packet, sizeof(packet));
	}
     12c:	8f 92       	push	r8
     12e:	9f 92       	push	r9
     130:	af 92       	push	r10
     132:	bf 92       	push	r11
     134:	cf 92       	push	r12
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	00 d0       	rcall	.+0      	; 0x146 <printPacket+0x1a>
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	06 2f       	mov	r16, r22
     14c:	66 23       	and	r22, r22
     14e:	b9 f1       	breq	.+110    	; 0x1be <printPacket+0x92>
     150:	e8 2e       	mov	r14, r24
     152:	f9 2e       	mov	r15, r25
     154:	10 e0       	ldi	r17, 0x00	; 0
     156:	0f 2e       	mov	r0, r31
     158:	f7 e9       	ldi	r31, 0x97	; 151
     15a:	8f 2e       	mov	r8, r31
     15c:	f3 e0       	ldi	r31, 0x03	; 3
     15e:	9f 2e       	mov	r9, r31
     160:	f0 2d       	mov	r31, r0
     162:	0f 2e       	mov	r0, r31
     164:	f9 ee       	ldi	r31, 0xE9	; 233
     166:	af 2e       	mov	r10, r31
     168:	f2 e0       	ldi	r31, 0x02	; 2
     16a:	bf 2e       	mov	r11, r31
     16c:	f0 2d       	mov	r31, r0
     16e:	ce 01       	movw	r24, r28
     170:	01 96       	adiw	r24, 0x01	; 1
     172:	6c 01       	movw	r12, r24
     174:	81 2f       	mov	r24, r17
     176:	8f 70       	andi	r24, 0x0F	; 15
     178:	39 f4       	brne	.+14     	; 0x188 <printPacket+0x5c>
     17a:	9f 92       	push	r9
     17c:	8f 92       	push	r8
     17e:	0e 94 33 09 	call	0x1266	; 0x1266 <printf>
     182:	0f 90       	pop	r0
     184:	0f 90       	pop	r0
     186:	04 c0       	rjmp	.+8      	; 0x190 <printPacket+0x64>
     188:	80 e2       	ldi	r24, 0x20	; 32
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 46 09 	call	0x128c	; 0x128c <putchar>
     190:	f7 01       	movw	r30, r14
     192:	81 91       	ld	r24, Z+
     194:	7f 01       	movw	r14, r30
     196:	1f 92       	push	r1
     198:	8f 93       	push	r24
     19a:	bf 92       	push	r11
     19c:	af 92       	push	r10
     19e:	df 92       	push	r13
     1a0:	cf 92       	push	r12
     1a2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <sprintf>
     1a6:	df 92       	push	r13
     1a8:	cf 92       	push	r12
     1aa:	0e 94 33 09 	call	0x1266	; 0x1266 <printf>
     1ae:	1f 5f       	subi	r17, 0xFF	; 255
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	cd bf       	out	0x3d, r28	; 61
     1ba:	01 13       	cpse	r16, r17
     1bc:	db cf       	rjmp	.-74     	; 0x174 <printPacket+0x48>
     1be:	87 e9       	ldi	r24, 0x97	; 151
     1c0:	93 e0       	ldi	r25, 0x03	; 3
     1c2:	9f 93       	push	r25
     1c4:	8f 93       	push	r24
     1c6:	0e 94 33 09 	call	0x1266	; 0x1266 <printf>
     1ca:	0f 90       	pop	r0
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	ff 90       	pop	r15
     1de:	ef 90       	pop	r14
     1e0:	df 90       	pop	r13
     1e2:	cf 90       	pop	r12
     1e4:	bf 90       	pop	r11
     1e6:	af 90       	pop	r10
     1e8:	9f 90       	pop	r9
     1ea:	8f 90       	pop	r8
     1ec:	08 95       	ret

000001ee <sendPacket>:
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	7c 01       	movw	r14, r24
     1fe:	d6 2e       	mov	r13, r22
     200:	66 23       	and	r22, r22
     202:	69 f0       	breq	.+26     	; 0x21e <sendPacket+0x30>
     204:	ec 01       	movw	r28, r24
     206:	0f ef       	ldi	r16, 0xFF	; 255
     208:	06 0f       	add	r16, r22
     20a:	10 e0       	ldi	r17, 0x00	; 0
     20c:	0f 5f       	subi	r16, 0xFF	; 255
     20e:	1f 4f       	sbci	r17, 0xFF	; 255
     210:	08 0f       	add	r16, r24
     212:	19 1f       	adc	r17, r25
     214:	89 91       	ld	r24, Y+
     216:	f7 d4       	rcall	.+2542   	; 0xc06 <USART_1_write>
     218:	c0 17       	cp	r28, r16
     21a:	d1 07       	cpc	r29, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <sendPacket+0x26>
     21e:	6d 2d       	mov	r22, r13
     220:	c7 01       	movw	r24, r14
     222:	84 df       	rcall	.-248    	; 0x12c <printPacket>
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	08 95       	ret

00000234 <disableNmea>:
     234:	cf 92       	push	r12
     236:	df 92       	push	r13
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	e3 97       	sbiw	r28, 0x33	; 51
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	88 e2       	ldi	r24, 0x28	; 40
     256:	ed e2       	ldi	r30, 0x2D	; 45
     258:	f2 e0       	ldi	r31, 0x02	; 2
     25a:	de 01       	movw	r26, r28
     25c:	11 96       	adiw	r26, 0x01	; 1
     25e:	01 90       	ld	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	8a 95       	dec	r24
     264:	e1 f7       	brne	.-8      	; 0x25e <disableNmea+0x2a>
     266:	8b e0       	ldi	r24, 0x0B	; 11
     268:	e5 e5       	ldi	r30, 0x55	; 85
     26a:	f2 e0       	ldi	r31, 0x02	; 2
     26c:	de 01       	movw	r26, r28
     26e:	99 96       	adiw	r26, 0x29	; 41
     270:	01 90       	ld	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	8a 95       	dec	r24
     276:	e1 f7       	brne	.-8      	; 0x270 <disableNmea+0x3c>
     278:	ce 01       	movw	r24, r28
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	7c 01       	movw	r14, r24
     27e:	6e 01       	movw	r12, r28
     280:	99 e2       	ldi	r25, 0x29	; 41
     282:	c9 0e       	add	r12, r25
     284:	d1 1c       	adc	r13, r1
     286:	8e 01       	movw	r16, r28
     288:	0e 5c       	subi	r16, 0xCE	; 206
     28a:	1f 4f       	sbci	r17, 0xFF	; 255
     28c:	14 c0       	rjmp	.+40     	; 0x2b6 <disableNmea+0x82>
     28e:	91 91       	ld	r25, Z+
     290:	8a a9       	ldd	r24, Y+50	; 0x32
     292:	89 0f       	add	r24, r25
     294:	8a ab       	std	Y+50, r24	; 0x32
     296:	9b a9       	ldd	r25, Y+51	; 0x33
     298:	89 0f       	add	r24, r25
     29a:	8b ab       	std	Y+51, r24	; 0x33
     29c:	e0 17       	cp	r30, r16
     29e:	f1 07       	cpc	r31, r17
     2a0:	b1 f7       	brne	.-20     	; 0x28e <disableNmea+0x5a>
     2a2:	6b e0       	ldi	r22, 0x0B	; 11
     2a4:	ce 01       	movw	r24, r28
     2a6:	89 96       	adiw	r24, 0x29	; 41
     2a8:	a2 df       	rcall	.-188    	; 0x1ee <sendPacket>
     2aa:	e2 e0       	ldi	r30, 0x02	; 2
     2ac:	ee 0e       	add	r14, r30
     2ae:	f1 1c       	adc	r15, r1
     2b0:	ce 14       	cp	r12, r14
     2b2:	df 04       	cpc	r13, r15
     2b4:	51 f0       	breq	.+20     	; 0x2ca <disableNmea+0x96>
     2b6:	f7 01       	movw	r30, r14
     2b8:	80 81       	ld	r24, Z
     2ba:	8f a7       	std	Y+47, r24	; 0x2f
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	88 ab       	std	Y+48, r24	; 0x30
     2c0:	1a aa       	std	Y+50, r1	; 0x32
     2c2:	1b aa       	std	Y+51, r1	; 0x33
     2c4:	fe 01       	movw	r30, r28
     2c6:	bb 96       	adiw	r30, 0x2b	; 43
     2c8:	e2 cf       	rjmp	.-60     	; 0x28e <disableNmea+0x5a>
     2ca:	e3 96       	adiw	r28, 0x33	; 51
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	df 90       	pop	r13
     2e4:	cf 90       	pop	r12
     2e6:	08 95       	ret

000002e8 <changeFrequency>:
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	2e 97       	sbiw	r28, 0x0e	; 14
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	8e e0       	ldi	r24, 0x0E	; 14
     2fe:	ec e7       	ldi	r30, 0x7C	; 124
     300:	f2 e0       	ldi	r31, 0x02	; 2
     302:	de 01       	movw	r26, r28
     304:	11 96       	adiw	r26, 0x01	; 1
     306:	01 90       	ld	r0, Z+
     308:	0d 92       	st	X+, r0
     30a:	8a 95       	dec	r24
     30c:	e1 f7       	brne	.-8      	; 0x306 <changeFrequency+0x1e>
     30e:	6e e0       	ldi	r22, 0x0E	; 14
     310:	ce 01       	movw	r24, r28
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	6c df       	rcall	.-296    	; 0x1ee <sendPacket>
     316:	2e 96       	adiw	r28, 0x0e	; 14
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <disableUnnecessaryChannels>:
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	ac 97       	sbiw	r28, 0x2c	; 44
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
     33c:	8c e2       	ldi	r24, 0x2C	; 44
     33e:	ea e8       	ldi	r30, 0x8A	; 138
     340:	f2 e0       	ldi	r31, 0x02	; 2
     342:	de 01       	movw	r26, r28
     344:	11 96       	adiw	r26, 0x01	; 1
     346:	01 90       	ld	r0, Z+
     348:	0d 92       	st	X+, r0
     34a:	8a 95       	dec	r24
     34c:	e1 f7       	brne	.-8      	; 0x346 <disableUnnecessaryChannels+0x1e>
     34e:	6c e2       	ldi	r22, 0x2C	; 44
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	4c df       	rcall	.-360    	; 0x1ee <sendPacket>
     356:	ac 96       	adiw	r28, 0x2c	; 44
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <enableNavPvt>:
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	2b 97       	sbiw	r28, 0x0b	; 11
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	8b e0       	ldi	r24, 0x0B	; 11
     37e:	e6 eb       	ldi	r30, 0xB6	; 182
     380:	f2 e0       	ldi	r31, 0x02	; 2
     382:	de 01       	movw	r26, r28
     384:	11 96       	adiw	r26, 0x01	; 1
     386:	01 90       	ld	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	8a 95       	dec	r24
     38c:	e1 f7       	brne	.-8      	; 0x386 <enableNavPvt+0x1e>
     38e:	6b e0       	ldi	r22, 0x0B	; 11
     390:	ce 01       	movw	r24, r28
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	2c df       	rcall	.-424    	; 0x1ee <sendPacket>
     396:	2b 96       	adiw	r28, 0x0b	; 11
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <isGoodChecksum>:
			}
		}
	}

	bool isGoodChecksum()
	{
     3a8:	e6 ea       	ldi	r30, 0xA6	; 166
     3aa:	f8 e0       	ldi	r31, 0x08	; 8
     3ac:	4e ef       	ldi	r20, 0xFE	; 254
     3ae:	58 e0       	ldi	r21, 0x08	; 8
		unsigned char CK_A = 0;
		unsigned char CK_B = 0;
     3b0:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	bool isGoodChecksum()
	{
		unsigned char CK_A = 0;
     3b2:	80 e0       	ldi	r24, 0x00	; 0
		unsigned char CK_B = 0;

		for (int i=2; i<(2 + 4 + 84); i++)		// skip sync bytes
		{
			CK_A = CK_A + PACKETstore[i];
     3b4:	21 91       	ld	r18, Z+
     3b6:	82 0f       	add	r24, r18
			CK_B = CK_B + CK_A;
     3b8:	98 0f       	add	r25, r24
	bool isGoodChecksum()
	{
		unsigned char CK_A = 0;
		unsigned char CK_B = 0;

		for (int i=2; i<(2 + 4 + 84); i++)		// skip sync bytes
     3ba:	e4 17       	cp	r30, r20
     3bc:	f5 07       	cpc	r31, r21
     3be:	d1 f7       	brne	.-12     	; 0x3b4 <isGoodChecksum+0xc>
		{
			CK_A = CK_A + PACKETstore[i];
			CK_B = CK_B + CK_A;
		}
		return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
     3c0:	20 91 fe 08 	lds	r18, 0x08FE	; 0x8008fe <PACKETstore+0x5a>
     3c4:	82 13       	cpse	r24, r18
     3c6:	07 c0       	rjmp	.+14     	; 0x3d6 <isGoodChecksum+0x2e>
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	20 91 ff 08 	lds	r18, 0x08FF	; 0x8008ff <PACKETstore+0x5b>
     3ce:	29 17       	cp	r18, r25
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <isGoodChecksum+0x30>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <isGoodChecksum+0x30>
     3d6:	80 e0       	ldi	r24, 0x00	; 0
	}
     3d8:	81 70       	andi	r24, 0x01	; 1
     3da:	08 95       	ret

000003dc <IsPacketReady>:

	// start/complete filling in the current packet
	int IsPacketReady(unsigned char c)
	{
		// get current position in packet
		unsigned char p = UbxGpsv.carriagePosition;
     3dc:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <__data_start+0x3>
		if (p < 4)     // this looks for PVT messages
     3e0:	e4 30       	cpi	r30, 0x04	; 4
     3e2:	70 f4       	brcc	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			// are we starting a packet?
			if (c == UBXGPS_HEADER[p])
     3e4:	2e 2f       	mov	r18, r30
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	d9 01       	movw	r26, r18
     3ea:	a6 56       	subi	r26, 0x66	; 102
     3ec:	bc 4f       	sbci	r27, 0xFC	; 252
     3ee:	9c 91       	ld	r25, X
     3f0:	89 13       	cpse	r24, r25
     3f2:	17 c0       	rjmp	.+46     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			{
				PACKETstore[p++] = c;
     3f4:	ef 5f       	subi	r30, 0xFF	; 255
     3f6:	d9 01       	movw	r26, r18
     3f8:	ac 55       	subi	r26, 0x5C	; 92
     3fa:	b7 4f       	sbci	r27, 0xF7	; 247
     3fc:	8c 93       	st	X, r24
     3fe:	14 c0       	rjmp	.+40     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			}
		}
		else  // found a packet header, start filling
		{
			//if we are here, we've got some of the right packet.  Lets just try getting all the bytes
			if (p < (2 + 4 + 84 + 2))
     400:	ec 35       	cpi	r30, 0x5C	; 92
     402:	90 f4       	brcc	.+36     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			{
				PACKETstore[p++] = c;
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	9e 0f       	add	r25, r30
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	ec 55       	subi	r30, 0x5C	; 92
     40c:	f7 4f       	sbci	r31, 0xF7	; 247
     40e:	80 83       	st	Z, r24
				if (p == (2 + 4 + 84 + 2))
     410:	9c 35       	cpi	r25, 0x5C	; 92
     412:	49 f4       	brne	.+18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
				{
					p = 0;
					UbxGpsv.carriagePosition = p;
     414:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_start+0x3>
					if(isGoodChecksum())
     418:	c7 df       	rcall	.-114    	; 0x3a8 <isGoodChecksum>
     41a:	81 11       	cpse	r24, r1
			if (p < (2 + 4 + 84 + 2))
			{
				PACKETstore[p++] = c;
				if (p == (2 + 4 + 84 + 2))
				{
					p = 0;
     41c:	0a c0       	rjmp	.+20     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     41e:	e0 e0       	ldi	r30, 0x00	; 0
			{
				PACKETstore[p++] = c;
			}
			else
			{
				p = 0;
     420:	03 c0       	rjmp	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     422:	e0 e0       	ldi	r30, 0x00	; 0
		else  // found a packet header, start filling
		{
			//if we are here, we've got some of the right packet.  Lets just try getting all the bytes
			if (p < (2 + 4 + 84 + 2))
			{
				PACKETstore[p++] = c;
     424:	01 c0       	rjmp	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
						return true;
					}
				}
			}
		}
		UbxGpsv.carriagePosition = p;
     426:	e9 2f       	mov	r30, r25
     428:	e0 93 03 02 	sts	0x0203, r30	; 0x800203 <__data_start+0x3>
		return false;
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
				{
					p = 0;
					UbxGpsv.carriagePosition = p;
					if(isGoodChecksum())
					{
						return true;
     430:	08 95       	ret
     432:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}
		UbxGpsv.carriagePosition = p;
		return false;
	}
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	08 95       	ret

00000438 <processgps>:

	// Read chars from the GPS port
	// If there is a PVT packet ready, copy it to the global strct
	// **** NOTE ****  This is called from within Timer 4 Interrupt Service Routine every 4.096mS
	void processgps(void)
	{
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	c8 ef       	ldi	r28, 0xF8	; 248
     43e:	d8 e0       	ldi	r29, 0x08	; 8
				unsigned char ch;
				ch = USART_3_read();
				USART_1_write(ch);
			}
			#endif
			if(IsPacketReady(data))
     440:	0d c0       	rjmp	.+26     	; 0x45c <processgps+0x24>
     442:	c8 d3       	rcall	.+1936   	; 0xbd4 <USART_1_read>
     444:	cb df       	rcall	.-106    	; 0x3dc <IsPacketReady>
     446:	89 2b       	or	r24, r25
     448:	49 f0       	breq	.+18     	; 0x45c <processgps+0x24>
     44a:	ea ea       	ldi	r30, 0xAA	; 170
     44c:	f8 e0       	ldi	r31, 0x08	; 8
     44e:	a4 ef       	ldi	r26, 0xF4	; 244
			{
				for(unsigned int i = offset; i<sizeof(NavPvt); i++)
				{
					*((char*)(&NavPvt) + (i-offset)) = PACKETstore[i];		// copy into global struct
     450:	b7 e0       	ldi	r27, 0x07	; 7
     452:	81 91       	ld	r24, Z+
				USART_1_write(ch);
			}
			#endif
			if(IsPacketReady(data))
			{
				for(unsigned int i = offset; i<sizeof(NavPvt); i++)
     454:	8d 93       	st	X+, r24
     456:	ec 17       	cp	r30, r28
	// **** NOTE ****  This is called from within Timer 4 Interrupt Service Routine every 4.096mS
	void processgps(void)
	{
		const unsigned char offset =6;
		unsigned char data;
		while (USART_1_is_rx_ready())
     458:	fd 07       	cpc	r31, r29
     45a:	d9 f7       	brne	.-10     	; 0x452 <processgps+0x1a>
     45c:	b4 d3       	rcall	.+1896   	; 0xbc6 <USART_1_is_rx_ready>
     45e:	81 11       	cpse	r24, r1
				{
					*((char*)(&NavPvt) + (i-offset)) = PACKETstore[i];		// copy into global struct
				}
			}
		}
	}
     460:	f0 cf       	rjmp	.-32     	; 0x442 <processgps+0xa>
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <setupneo>:

	void setupneo()
	{
		
		// Disabling NMEA messages by sending appropriate packets
		printf("Disabling NMEA messages...\n\r");
     468:	8e ee       	ldi	r24, 0xEE	; 238
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	9f 93       	push	r25
     46e:	8f 93       	push	r24
		disableNmea();
     470:	fa d6       	rcall	.+3572   	; 0x1266 <printf>
     472:	e0 de       	rcall	.-576    	; 0x234 <disableNmea>

			fastdelay_ms(100); // Little delay before flushing
		}
		#endif
		// 	Set reporting frequency to 1 Sec
		printf("Changing receiving frequency to 1 Sec...\n\r");
     474:	8b e0       	ldi	r24, 0x0B	; 11
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	9f 93       	push	r25
		changeFrequency();

		// Disabling unnecessary channels like SBAS or QZSS
		printf("Disabling unnecessary channels...\r\n");
     47a:	8f 93       	push	r24
     47c:	f4 d6       	rcall	.+3560   	; 0x1266 <printf>
     47e:	34 df       	rcall	.-408    	; 0x2e8 <changeFrequency>
		disableUnnecessaryChannels();

		// Enabling NAV-PVT messages
		printf("Enabling NAV-PVT messages...\n\r");
     480:	86 e3       	ldi	r24, 0x36	; 54
     482:	93 e0       	ldi	r25, 0x03	; 3
     484:	08 d7       	rcall	.+3600   	; 0x1296 <puts>
     486:	50 df       	rcall	.-352    	; 0x328 <disableUnnecessaryChannels>
     488:	89 e5       	ldi	r24, 0x59	; 89
		enableNavPvt();
     48a:	93 e0       	ldi	r25, 0x03	; 3

		printf("Auto-configuration is complete!\n\r");
     48c:	9f 93       	push	r25
     48e:	8f 93       	push	r24
     490:	ea d6       	rcall	.+3540   	; 0x1266 <printf>
     492:	6a df       	rcall	.-300    	; 0x368 <enableNavPvt>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	93 e0       	ldi	r25, 0x03	; 3

		fastdelay_ms(100); // Little delay before flushing
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	e4 d6       	rcall	.+3528   	; 0x1266 <printf>
     49e:	84 e6       	ldi	r24, 0x64	; 100
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	4b d5       	rcall	.+2710   	; 0xf3a <fastdelay_ms>
     4a4:	8d b7       	in	r24, 0x3d	; 61
     4a6:	9e b7       	in	r25, 0x3e	; 62
     4a8:	08 96       	adiw	r24, 0x08	; 8
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	9e bf       	out	0x3e, r25	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	8d bf       	out	0x3d, r24	; 61
     4b4:	08 95       	ret

000004b6 <writelcd>:
volatile uint8_t lcdevent = 0;


// send a string to the LCD (len max 255)
void writelcd(char *str)
{
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	
	while (str[i])
     4be:	80 81       	ld	r24, Z
     4c0:	88 23       	and	r24, r24
     4c2:	51 f0       	breq	.+20     	; 0x4d8 <writelcd+0x22>
     4c4:	8f 01       	movw	r16, r30
     4c6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		//		USART_3_write(str[i]);
		USART_2_write(str[i++]);
     4c8:	cf 5f       	subi	r28, 0xFF	; 255
     4ca:	54 d4       	rcall	.+2216   	; 0xd74 <USART_2_write>
// send a string to the LCD (len max 255)
void writelcd(char *str)
{
	unsigned char i = 0;
	
	while (str[i])
     4cc:	f8 01       	movw	r30, r16
     4ce:	ec 0f       	add	r30, r28
     4d0:	f1 1d       	adc	r31, r1
     4d2:	80 81       	ld	r24, Z
     4d4:	81 11       	cpse	r24, r1
     4d6:	f8 cf       	rjmp	.-16     	; 0x4c8 <writelcd+0x12>
	{
		//		USART_3_write(str[i]);
		USART_2_write(str[i++]);
	}
}
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	08 95       	ret

000004e0 <writelcdcmd>:
     4e0:	ea df       	rcall	.-44     	; 0x4b6 <writelcd>
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	47 d4       	rcall	.+2190   	; 0xd74 <USART_2_write>
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	45 d4       	rcall	.+2186   	; 0xd74 <USART_2_write>
     4ea:	8f ef       	ldi	r24, 0xFF	; 255
     4ec:	43 c4       	rjmp	.+2182   	; 0xd74 <USART_2_write>
     4ee:	08 95       	ret

000004f0 <setndig>:
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	a0 97       	sbiw	r28, 0x20	; 32
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	1f 92       	push	r1
     50a:	6f 93       	push	r22
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	8e e9       	ldi	r24, 0x9E	; 158
     512:	93 e0       	ldi	r25, 0x03	; 3
     514:	9f 93       	push	r25
     516:	8f 93       	push	r24
     518:	8e 01       	movw	r16, r28
     51a:	0f 5f       	subi	r16, 0xFF	; 255
     51c:	1f 4f       	sbci	r17, 0xFF	; 255
     51e:	1f 93       	push	r17
     520:	0f 93       	push	r16
     522:	e9 d6       	rcall	.+3538   	; 0x12f6 <sprintf>
     524:	c8 01       	movw	r24, r16
     526:	dc df       	rcall	.-72     	; 0x4e0 <writelcdcmd>
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	a0 96       	adiw	r28, 0x20	; 32
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <getlcdack>:
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <lcdstatus>
     552:	e9 d4       	rcall	.+2514   	; 0xf26 <fastmsectime>
     554:	ec 01       	movw	r28, r24
     556:	89 ea       	ldi	r24, 0xA9	; 169
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	9f 93       	push	r25
     55c:	8f 93       	push	r24
     55e:	83 d6       	rcall	.+3334   	; 0x1266 <printf>
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	c6 50       	subi	r28, 0x06	; 6
     566:	df 4f       	sbci	r29, 0xFF	; 255
     568:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <lcdstatus>
     56c:	9f 3f       	cpi	r25, 0xFF	; 255
     56e:	21 f4       	brne	.+8      	; 0x578 <getlcdack+0x30>
     570:	da d4       	rcall	.+2484   	; 0xf26 <fastmsectime>
     572:	8c 17       	cp	r24, r28
     574:	9d 07       	cpc	r25, r29
     576:	c0 f3       	brcs	.-16     	; 0x568 <getlcdack+0x20>
     578:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <lcdstatus>
     57c:	8f 3f       	cpi	r24, 0xFF	; 255
     57e:	41 f4       	brne	.+16     	; 0x590 <getlcdack+0x48>
     580:	82 ec       	ldi	r24, 0xC2	; 194
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	6e d6       	rcall	.+3292   	; 0x1266 <printf>
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0d c0       	rjmp	.+26     	; 0x5aa <getlcdack+0x62>
     590:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <lcdstatus>
     594:	1f 92       	push	r1
     596:	8f 93       	push	r24
     598:	85 ee       	ldi	r24, 0xE5	; 229
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	62 d6       	rcall	.+3268   	; 0x1266 <printf>
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <lcdstatus>
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <getlcdpage>:
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	87 ef       	ldi	r24, 0xF7	; 247
     5ba:	93 e0       	ldi	r25, 0x03	; 3
     5bc:	91 df       	rcall	.-222    	; 0x4e0 <writelcdcmd>
     5be:	c4 df       	rcall	.-120    	; 0x548 <getlcdack>
     5c0:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <lcdrxbuffer>
     5c4:	86 36       	cpi	r24, 0x66	; 102
     5c6:	81 f4       	brne	.+32     	; 0x5e8 <getlcdpage+0x34>
     5c8:	c0 e8       	ldi	r28, 0x80	; 128
     5ca:	d4 e0       	ldi	r29, 0x04	; 4
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	1f 92       	push	r1
     5d0:	8f 93       	push	r24
     5d2:	8e ef       	ldi	r24, 0xFE	; 254
     5d4:	93 e0       	ldi	r25, 0x03	; 3
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	45 d6       	rcall	.+3210   	; 0x1266 <printf>
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	01 c0       	rjmp	.+2      	; 0x5ea <getlcdpage+0x36>
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <setlcdpage>:
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 81       	ld	r18, Z
     5fa:	22 23       	and	r18, r18
     5fc:	b1 f0       	breq	.+44     	; 0x62a <setlcdpage+0x3a>
     5fe:	16 2f       	mov	r17, r22
     600:	ec 01       	movw	r28, r24
     602:	40 e1       	ldi	r20, 0x10	; 16
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	60 ea       	ldi	r22, 0xA0	; 160
     608:	74 e0       	ldi	r23, 0x04	; 4
     60a:	10 d6       	rcall	.+3104   	; 0x122c <strncmp>
     60c:	89 2b       	or	r24, r25
     60e:	11 f0       	breq	.+4      	; 0x614 <setlcdpage+0x24>
     610:	11 23       	and	r17, r17
     612:	59 f0       	breq	.+22     	; 0x62a <setlcdpage+0x3a>
     614:	82 e1       	ldi	r24, 0x12	; 18
     616:	94 e0       	ldi	r25, 0x04	; 4
     618:	4e df       	rcall	.-356    	; 0x4b6 <writelcd>
     61a:	ce 01       	movw	r24, r28
     61c:	61 df       	rcall	.-318    	; 0x4e0 <writelcdcmd>
     61e:	40 e1       	ldi	r20, 0x10	; 16
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	be 01       	movw	r22, r28
     624:	80 ea       	ldi	r24, 0xA0	; 160
     626:	94 e0       	ldi	r25, 0x04	; 4
     628:	0f d6       	rcall	.+3102   	; 0x1248 <strncpy>
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	08 95       	ret

00000632 <isnexpkt>:
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	ec 01       	movw	r28, r24
     63a:	16 2f       	mov	r17, r22
     63c:	82 d3       	rcall	.+1796   	; 0xd42 <USART_2_read>
     63e:	20 91 7d 04 	lds	r18, 0x047D	; 0x80047d <i.3410>
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	92 0f       	add	r25, r18
     646:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <i.3410>
     64a:	c2 0f       	add	r28, r18
     64c:	d1 1d       	adc	r29, r1
     64e:	88 83       	st	Y, r24
     650:	8f 3f       	cpi	r24, 0xFF	; 255
     652:	71 f4       	brne	.+28     	; 0x670 <isnexpkt+0x3e>
     654:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <__data_end>
     658:	8f 5f       	subi	r24, 0xFF	; 255
     65a:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <__data_end>
     65e:	83 30       	cpi	r24, 0x03	; 3
     660:	49 f4       	brne	.+18     	; 0x674 <isnexpkt+0x42>
     662:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <i.3410>
     666:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <__data_end>
     66a:	89 2f       	mov	r24, r25
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0d c0       	rjmp	.+26     	; 0x68a <isnexpkt+0x58>
     670:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <__data_end>
     674:	91 13       	cpse	r25, r17
     676:	07 c0       	rjmp	.+14     	; 0x686 <isnexpkt+0x54>
     678:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <i.3410>
     67c:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <__data_end>
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	9f ef       	ldi	r25, 0xFF	; 255
     684:	02 c0       	rjmp	.+4      	; 0x68a <isnexpkt+0x58>
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	9f ef       	ldi	r25, 0xFF	; 255
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	08 95       	ret

00000692 <processnex>:
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	cf ef       	ldi	r28, 0xFF	; 255
     69a:	08 e1       	ldi	r16, 0x18	; 24
     69c:	14 e0       	ldi	r17, 0x04	; 4
     69e:	18 c0       	rjmp	.+48     	; 0x6d0 <processnex+0x3e>
     6a0:	60 e2       	ldi	r22, 0x20	; 32
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	94 e0       	ldi	r25, 0x04	; 4
     6a6:	c5 df       	rcall	.-118    	; 0x632 <isnexpkt>
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	a9 f0       	breq	.+42     	; 0x6d6 <processnex+0x44>
     6ac:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <lcdrxbuffer>
     6b0:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <lcdstatus>
     6b4:	83 32       	cpi	r24, 0x23	; 35
     6b6:	50 f4       	brcc	.+20     	; 0x6cc <processnex+0x3a>
     6b8:	1f 92       	push	r1
     6ba:	8f 93       	push	r24
     6bc:	1f 93       	push	r17
     6be:	0f 93       	push	r16
     6c0:	d2 d5       	rcall	.+2980   	; 0x1266 <printf>
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <processnex+0x3e>
     6cc:	c0 93 7e 04 	sts	0x047E, r28	; 0x80047e <lcdevent>
     6d0:	31 d3       	rcall	.+1634   	; 0xd34 <USART_2_is_rx_ready>
     6d2:	81 11       	cpse	r24, r1
     6d4:	e5 cf       	rjmp	.-54     	; 0x6a0 <processnex+0xe>
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	08 95       	ret

000006de <SPI_0_initialization>:
}

void TIMER_1_initialization(void)
{

	TIMER_1_init();
     6de:	23 98       	cbi	0x04, 3	; 4
     6e0:	2b 98       	cbi	0x05, 3	; 5
     6e2:	22 9a       	sbi	0x04, 2	; 4
     6e4:	2a 98       	cbi	0x05, 2	; 5
     6e6:	21 9a       	sbi	0x04, 1	; 4
     6e8:	29 98       	cbi	0x05, 1	; 5
     6ea:	20 9a       	sbi	0x04, 0	; 4
     6ec:	28 98       	cbi	0x05, 0	; 5
     6ee:	12 c1       	rjmp	.+548    	; 0x914 <SPI_0_init>
     6f0:	08 95       	ret

000006f2 <USART_0_initialization>:
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
     6f2:	68 98       	cbi	0x0d, 0	; 13
		DDRE &= ~(1 << pin);

		PORTE |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTE &= ~(1 << pin);
     6f4:	70 98       	cbi	0x0e, 0	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
     6f6:	69 9a       	sbi	0x0d, 1	; 13
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     6f8:	71 98       	cbi	0x0e, 1	; 14
     6fa:	ed c1       	rjmp	.+986    	; 0xad6 <USART_0_init>
     6fc:	08 95       	ret

000006fe <USART_1_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     6fe:	52 98       	cbi	0x0a, 2	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     700:	5a 98       	cbi	0x0b, 2	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     702:	53 9a       	sbi	0x0a, 3	; 10
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_1_init();
     704:	5b 98       	cbi	0x0b, 3	; 11
     706:	9e c2       	rjmp	.+1340   	; 0xc44 <USART_1_init>
     708:	08 95       	ret

0000070a <USART_2_initialization>:
 */
static inline void PORTH_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
     70a:	a1 e0       	ldi	r26, 0x01	; 1
     70c:	b1 e0       	ldi	r27, 0x01	; 1
     70e:	8c 91       	ld	r24, X
     710:	8e 7f       	andi	r24, 0xFE	; 254
     712:	8c 93       	st	X, r24
		DDRH &= ~(1 << pin);

		PORTH |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTH &= ~(1 << pin);
     714:	e2 e0       	ldi	r30, 0x02	; 2
     716:	f1 e0       	ldi	r31, 0x01	; 1
     718:	80 81       	ld	r24, Z
     71a:	8e 7f       	andi	r24, 0xFE	; 254
     71c:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRH |= 1 << pin;
     71e:	8c 91       	ld	r24, X
     720:	82 60       	ori	r24, 0x02	; 2
     722:	8c 93       	st	X, r24
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
     724:	80 81       	ld	r24, Z
     726:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_2_init();
     728:	80 83       	st	Z, r24
     72a:	43 c3       	rjmp	.+1670   	; 0xdb2 <USART_2_init>
     72c:	08 95       	ret

0000072e <USART_3_initialization>:
 */
static inline void PORTJ_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
     72e:	a4 e0       	ldi	r26, 0x04	; 4
     730:	b1 e0       	ldi	r27, 0x01	; 1
     732:	8c 91       	ld	r24, X
     734:	8e 7f       	andi	r24, 0xFE	; 254
     736:	8c 93       	st	X, r24
		DDRJ &= ~(1 << pin);

		PORTJ |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTJ &= ~(1 << pin);
     738:	e5 e0       	ldi	r30, 0x05	; 5
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	80 81       	ld	r24, Z
     73e:	8e 7f       	andi	r24, 0xFE	; 254
     740:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRJ |= 1 << pin;
     742:	8c 91       	ld	r24, X
     744:	82 60       	ori	r24, 0x02	; 2
     746:	8c 93       	st	X, r24
static inline void PORTJ_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTJ |= 1 << pin;
	} else {
		PORTJ &= ~(1 << pin);
     748:	80 81       	ld	r24, Z
     74a:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_3_init();
     74c:	80 83       	st	Z, r24
     74e:	c8 c3       	rjmp	.+1936   	; 0xee0 <USART_3_init>
     750:	08 95       	ret

00000752 <system_init>:
     752:	8f e3       	ldi	r24, 0x3F	; 63
     754:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
     758:	8f ee       	ldi	r24, 0xEF	; 239
     75a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     75e:	81 b1       	in	r24, 0x01	; 1
     760:	11 b8       	out	0x01, r1	; 1
     762:	82 b1       	in	r24, 0x02	; 2
     764:	8f ef       	ldi	r24, 0xFF	; 255
     766:	82 b9       	out	0x02, r24	; 2
     768:	94 b1       	in	r25, 0x04	; 4
     76a:	14 b8       	out	0x04, r1	; 4
     76c:	95 b1       	in	r25, 0x05	; 5
     76e:	85 b9       	out	0x05, r24	; 5
     770:	97 b1       	in	r25, 0x07	; 7
     772:	17 b8       	out	0x07, r1	; 7
     774:	98 b1       	in	r25, 0x08	; 8
     776:	88 b9       	out	0x08, r24	; 8
     778:	9a b1       	in	r25, 0x0a	; 10
     77a:	1a b8       	out	0x0a, r1	; 10
     77c:	9b b1       	in	r25, 0x0b	; 11
     77e:	8b b9       	out	0x0b, r24	; 11
     780:	9d b1       	in	r25, 0x0d	; 13
     782:	1d b8       	out	0x0d, r1	; 13
     784:	9e b1       	in	r25, 0x0e	; 14
     786:	8e b9       	out	0x0e, r24	; 14
     788:	90 b3       	in	r25, 0x10	; 16
     78a:	10 ba       	out	0x10, r1	; 16
     78c:	91 b3       	in	r25, 0x11	; 17
     78e:	81 bb       	out	0x11, r24	; 17
     790:	93 b3       	in	r25, 0x13	; 19
     792:	90 7c       	andi	r25, 0xC0	; 192
     794:	93 bb       	out	0x13, r25	; 19
     796:	94 b3       	in	r25, 0x14	; 20
     798:	9f 63       	ori	r25, 0x3F	; 63
     79a:	94 bb       	out	0x14, r25	; 20
     79c:	e1 e0       	ldi	r30, 0x01	; 1
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	90 81       	ld	r25, Z
     7a2:	10 82       	st	Z, r1
     7a4:	e2 e0       	ldi	r30, 0x02	; 2
     7a6:	f1 e0       	ldi	r31, 0x01	; 1
     7a8:	90 81       	ld	r25, Z
     7aa:	80 83       	st	Z, r24
     7ac:	e4 e0       	ldi	r30, 0x04	; 4
     7ae:	f1 e0       	ldi	r31, 0x01	; 1
     7b0:	90 81       	ld	r25, Z
     7b2:	10 82       	st	Z, r1
     7b4:	e5 e0       	ldi	r30, 0x05	; 5
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	90 81       	ld	r25, Z
     7ba:	80 83       	st	Z, r24
     7bc:	e7 e0       	ldi	r30, 0x07	; 7
     7be:	f1 e0       	ldi	r31, 0x01	; 1
     7c0:	90 81       	ld	r25, Z
     7c2:	10 82       	st	Z, r1
     7c4:	e8 e0       	ldi	r30, 0x08	; 8
     7c6:	f1 e0       	ldi	r31, 0x01	; 1
     7c8:	90 81       	ld	r25, Z
     7ca:	80 83       	st	Z, r24
     7cc:	aa e0       	ldi	r26, 0x0A	; 10
     7ce:	b1 e0       	ldi	r27, 0x01	; 1
     7d0:	9c 91       	ld	r25, X
     7d2:	1c 92       	st	X, r1
     7d4:	eb e0       	ldi	r30, 0x0B	; 11
     7d6:	f1 e0       	ldi	r31, 0x01	; 1
     7d8:	90 81       	ld	r25, Z
     7da:	80 83       	st	Z, r24
     7dc:	0a 9a       	sbi	0x01, 2	; 1
     7de:	12 98       	cbi	0x02, 2	; 2
     7e0:	0b 9a       	sbi	0x01, 3	; 1
     7e2:	13 98       	cbi	0x02, 3	; 2
     7e4:	0c 9a       	sbi	0x01, 4	; 1
     7e6:	14 98       	cbi	0x02, 4	; 2
     7e8:	0d 9a       	sbi	0x01, 5	; 1
     7ea:	15 98       	cbi	0x02, 5	; 2
     7ec:	0e 9a       	sbi	0x01, 6	; 1
     7ee:	16 98       	cbi	0x02, 6	; 2
     7f0:	0f 9a       	sbi	0x01, 7	; 1
     7f2:	17 98       	cbi	0x02, 7	; 2
     7f4:	38 98       	cbi	0x07, 0	; 7
     7f6:	40 98       	cbi	0x08, 0	; 8
     7f8:	39 98       	cbi	0x07, 1	; 7
     7fa:	41 98       	cbi	0x08, 1	; 8
     7fc:	3a 98       	cbi	0x07, 2	; 7
     7fe:	42 98       	cbi	0x08, 2	; 8
     800:	3b 98       	cbi	0x07, 3	; 7
     802:	43 98       	cbi	0x08, 3	; 8
     804:	3c 98       	cbi	0x07, 4	; 7
     806:	44 98       	cbi	0x08, 4	; 8
     808:	3d 98       	cbi	0x07, 5	; 7
     80a:	45 98       	cbi	0x08, 5	; 8
     80c:	3e 98       	cbi	0x07, 6	; 7
     80e:	46 98       	cbi	0x08, 6	; 8
     810:	3f 98       	cbi	0x07, 7	; 7
     812:	47 98       	cbi	0x08, 7	; 8
     814:	8c 91       	ld	r24, X
     816:	81 60       	ori	r24, 0x01	; 1
     818:	8c 93       	st	X, r24
     81a:	80 81       	ld	r24, Z
     81c:	8e 7f       	andi	r24, 0xFE	; 254
     81e:	80 83       	st	Z, r24
     820:	8c 91       	ld	r24, X
     822:	82 60       	ori	r24, 0x02	; 2
     824:	8c 93       	st	X, r24
     826:	80 81       	ld	r24, Z
     828:	82 60       	ori	r24, 0x02	; 2
     82a:	80 83       	st	Z, r24
     82c:	8c 91       	ld	r24, X
     82e:	84 60       	ori	r24, 0x04	; 4
     830:	8c 93       	st	X, r24
     832:	80 81       	ld	r24, Z
     834:	84 60       	ori	r24, 0x04	; 4
     836:	80 83       	st	Z, r24
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	60 e8       	ldi	r22, 0x80	; 128
     83c:	81 e6       	ldi	r24, 0x61	; 97
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	61 d0       	rcall	.+194    	; 0x904 <protected_write_io>
     842:	13 be       	out	0x33, r1	; 51
     844:	15 be       	out	0x35, r1	; 53
     846:	58 d0       	rcall	.+176    	; 0x8f8 <FLASH_0_init>
     848:	4a df       	rcall	.-364    	; 0x6de <SPI_0_initialization>
     84a:	cb d0       	rcall	.+406    	; 0x9e2 <TIMER_0_init>
     84c:	d7 d0       	rcall	.+430    	; 0x9fc <TIMER_1_init>
     84e:	51 df       	rcall	.-350    	; 0x6f2 <USART_0_initialization>
     850:	56 df       	rcall	.-340    	; 0x6fe <USART_1_initialization>
     852:	5b df       	rcall	.-330    	; 0x70a <USART_2_initialization>
     854:	6c cf       	rjmp	.-296    	; 0x72e <USART_3_initialization>
     856:	08 95       	ret

00000858 <__vector_30>:
 *
 * \return Nothing.
 */
void FLASH_0_register_callback(eeprom_write_done_cb_t f)
{
	FLASH_0_desc.cb = f;
     858:	1f 92       	push	r1
     85a:	0f 92       	push	r0
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	0f 92       	push	r0
     860:	11 24       	eor	r1, r1
     862:	0b b6       	in	r0, 0x3b	; 59
     864:	0f 92       	push	r0
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
     87e:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <FLASH_0_desc+0x5>
     882:	81 11       	cpse	r24, r1
     884:	0e c0       	rjmp	.+28     	; 0x8a2 <__vector_30+0x4a>
     886:	e0 eb       	ldi	r30, 0xB0	; 176
     888:	f4 e0       	ldi	r31, 0x04	; 4
     88a:	10 82       	st	Z, r1
     88c:	fb 98       	cbi	0x1f, 3	; 31
     88e:	86 81       	ldd	r24, Z+6	; 0x06
     890:	97 81       	ldd	r25, Z+7	; 0x07
     892:	89 2b       	or	r24, r25
     894:	f1 f0       	breq	.+60     	; 0x8d2 <__vector_30+0x7a>
     896:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <FLASH_0_desc+0x6>
     89a:	f0 91 b7 04 	lds	r31, 0x04B7	; 0x8004b7 <FLASH_0_desc+0x7>
     89e:	19 95       	eicall
     8a0:	18 c0       	rjmp	.+48     	; 0x8d2 <__vector_30+0x7a>
     8a2:	e0 eb       	ldi	r30, 0xB0	; 176
     8a4:	f4 e0       	ldi	r31, 0x04	; 4
     8a6:	81 81       	ldd	r24, Z+1	; 0x01
     8a8:	92 81       	ldd	r25, Z+2	; 0x02
     8aa:	9c 01       	movw	r18, r24
     8ac:	2f 5f       	subi	r18, 0xFF	; 255
     8ae:	3f 4f       	sbci	r19, 0xFF	; 255
     8b0:	32 83       	std	Z+2, r19	; 0x02
     8b2:	21 83       	std	Z+1, r18	; 0x01
     8b4:	92 bd       	out	0x22, r25	; 34
     8b6:	81 bd       	out	0x21, r24	; 33
     8b8:	a3 81       	ldd	r26, Z+3	; 0x03
     8ba:	b4 81       	ldd	r27, Z+4	; 0x04
     8bc:	cd 01       	movw	r24, r26
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	94 83       	std	Z+4, r25	; 0x04
     8c2:	83 83       	std	Z+3, r24	; 0x03
     8c4:	8c 91       	ld	r24, X
     8c6:	80 bd       	out	0x20, r24	; 32
     8c8:	85 81       	ldd	r24, Z+5	; 0x05
     8ca:	81 50       	subi	r24, 0x01	; 1
     8cc:	85 83       	std	Z+5, r24	; 0x05
     8ce:	fa 9a       	sbi	0x1f, 2	; 31
     8d0:	f9 9a       	sbi	0x1f, 1	; 31
     8d2:	ff 91       	pop	r31
     8d4:	ef 91       	pop	r30
     8d6:	bf 91       	pop	r27
     8d8:	af 91       	pop	r26
     8da:	9f 91       	pop	r25
     8dc:	8f 91       	pop	r24
     8de:	7f 91       	pop	r23
     8e0:	6f 91       	pop	r22
     8e2:	5f 91       	pop	r21
     8e4:	4f 91       	pop	r20
     8e6:	3f 91       	pop	r19
     8e8:	2f 91       	pop	r18
     8ea:	0f 90       	pop	r0
     8ec:	0b be       	out	0x3b, r0	; 59
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <FLASH_0_init>:
	//		 | 0 << RWWSRE /* Read-While-Write Section Enable: disabled */
	//		 | 0 << SIGRD /* Signature Row Read: disabled */
	//		 | 0 << RWWSB /* Read-While-Write Busy: disabled */
	//		 | 0 << SPMIE; /* SPM Interrupt Enable: disabled */

	FLASH_0_desc.cb = NULL;
     8f8:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <FLASH_0_desc+0x7>
     8fc:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <FLASH_0_desc+0x6>
	return 0;
}
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	08 95       	ret

00000904 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     904:	2f b7       	in	r18, 0x3f	; 63
	cli
     906:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     908:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     90a:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     90c:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     90e:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     910:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     912:	08 95       	ret

00000914 <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
     914:	e4 e6       	ldi	r30, 0x64	; 100
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	8b 7f       	andi	r24, 0xFB	; 251
     91c:	80 83       	st	Z, r24
     91e:	81 e5       	ldi	r24, 0x51	; 81
     920:	8c bd       	out	0x2c, r24	; 44
     922:	e8 eb       	ldi	r30, 0xB8	; 184
     924:	f4 e0       	ldi	r31, 0x04	; 4
     926:	10 82       	st	Z, r1
     928:	16 82       	std	Z+6, r1	; 0x06
     92a:	15 82       	std	Z+5, r1	; 0x05
     92c:	08 95       	ret

0000092e <__vector_24>:
}

ISR(SPI_STC_vect)
{
     92e:	1f 92       	push	r1
     930:	0f 92       	push	r0
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	0f 92       	push	r0
     936:	11 24       	eor	r1, r1
     938:	0b b6       	in	r0, 0x3b	; 59
     93a:	0f 92       	push	r0
     93c:	2f 93       	push	r18
     93e:	3f 93       	push	r19
     940:	4f 93       	push	r20
     942:	5f 93       	push	r21
     944:	6f 93       	push	r22
     946:	7f 93       	push	r23
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	ef 93       	push	r30
     956:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
     958:	9e b5       	in	r25, 0x2e	; 46
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
     95a:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <SPI_0_desc+0x4>
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	11 f1       	breq	.+68     	; 0x9a6 <__vector_24+0x78>
		*SPI_0_desc.data = rdata;
     962:	c8 eb       	ldi	r28, 0xB8	; 184
     964:	d4 e0       	ldi	r29, 0x04	; 4
     966:	a9 81       	ldd	r26, Y+1	; 0x01
     968:	ba 81       	ldd	r27, Y+2	; 0x02
     96a:	fd 01       	movw	r30, r26
     96c:	91 93       	st	Z+, r25
	}

	SPI_0_desc.data++;
     96e:	fa 83       	std	Y+2, r31	; 0x02
     970:	e9 83       	std	Y+1, r30	; 0x01

	if (SPI_0_desc.type != SPI_READ)
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	19 f0       	breq	.+6      	; 0x97c <__vector_24+0x4e>
		wdata = *SPI_0_desc.data;
     976:	11 96       	adiw	r26, 0x01	; 1
     978:	9c 91       	ld	r25, X
     97a:	01 c0       	rjmp	.+2      	; 0x97e <__vector_24+0x50>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
	uint8_t wdata = 0;
     97c:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
     97e:	e8 eb       	ldi	r30, 0xB8	; 184
     980:	f4 e0       	ldi	r31, 0x04	; 4
     982:	83 81       	ldd	r24, Z+3	; 0x03
     984:	81 50       	subi	r24, 0x01	; 1
     986:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
     988:	88 23       	and	r24, r24
     98a:	11 f0       	breq	.+4      	; 0x990 <__vector_24+0x62>
		// more data to send, send a byte
		SPDR = wdata;
     98c:	9e bd       	out	0x2e, r25	; 46
     98e:	14 c0       	rjmp	.+40     	; 0x9b8 <__vector_24+0x8a>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
     990:	e8 eb       	ldi	r30, 0xB8	; 184
     992:	f4 e0       	ldi	r31, 0x04	; 4
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
     998:	05 80       	ldd	r0, Z+5	; 0x05
     99a:	f6 81       	ldd	r31, Z+6	; 0x06
     99c:	e0 2d       	mov	r30, r0
     99e:	30 97       	sbiw	r30, 0x00	; 0
     9a0:	59 f0       	breq	.+22     	; 0x9b8 <__vector_24+0x8a>
			SPI_0_desc.cb();
     9a2:	19 95       	eicall
		}
	}
}
     9a4:	09 c0       	rjmp	.+18     	; 0x9b8 <__vector_24+0x8a>
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
		*SPI_0_desc.data = rdata;
	}

	SPI_0_desc.data++;
     9a6:	e8 eb       	ldi	r30, 0xB8	; 184
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	a1 81       	ldd	r26, Z+1	; 0x01
     9ac:	b2 81       	ldd	r27, Z+2	; 0x02
     9ae:	cd 01       	movw	r24, r26
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	92 83       	std	Z+2, r25	; 0x02
     9b4:	81 83       	std	Z+1, r24	; 0x01
     9b6:	df cf       	rjmp	.-66     	; 0x976 <__vector_24+0x48>
		SPI_0_desc.status = SPI_DONE;
		if (SPI_0_desc.cb != NULL) {
			SPI_0_desc.cb();
		}
	}
}
     9b8:	ff 91       	pop	r31
     9ba:	ef 91       	pop	r30
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	bf 91       	pop	r27
     9c2:	af 91       	pop	r26
     9c4:	9f 91       	pop	r25
     9c6:	8f 91       	pop	r24
     9c8:	7f 91       	pop	r23
     9ca:	6f 91       	pop	r22
     9cc:	5f 91       	pop	r21
     9ce:	4f 91       	pop	r20
     9d0:	3f 91       	pop	r19
     9d2:	2f 91       	pop	r18
     9d4:	0f 90       	pop	r0
     9d6:	0b be       	out	0x3b, r0	; 59
     9d8:	0f 90       	pop	r0
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	0f 90       	pop	r0
     9de:	1f 90       	pop	r1
     9e0:	18 95       	reti

000009e2 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC4 */
	PRR1 &= ~(1 << PRTIM4);
     9e2:	e5 e6       	ldi	r30, 0x65	; 101
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	8f 7e       	andi	r24, 0xEF	; 239
     9ea:	80 83       	st	Z, r24

	// TCCR4A = (0 << COM4A1) | (0 << COM4A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM4B1) | (0 << COM4B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM41) | (0 << WGM40); /* TC16 Mode 0 Normal */

	TCCR4B = (0 << WGM43) | (0 << WGM42)                /* TC16 Mode 0 Normal */
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

	// OCR4A = 0; /* Output compare A: 0 */

	// OCR4B = 0; /* Output compare B: 0 */

	TIMSK4 = 0 << OCIE4B   /* Output Compare B Match Interrupt Enable: disabled */
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	         | 1 << OCIE4A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE4  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE4; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	08 95       	ret

000009fc <TIMER_1_init>:
 */
int8_t TIMER_1_init()
{

	/* Enable TC5 */
	PRR1 &= ~(1 << PRTIM5);
     9fc:	e5 e6       	ldi	r30, 0x65	; 101
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	8f 7d       	andi	r24, 0xDF	; 223
     a04:	80 83       	st	Z, r24

	// TCCR5A = (0 << COM5A1) | (0 << COM5A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM5B1) | (0 << COM5B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM51) | (0 << WGM50); /* TC16 Mode 0 Normal */

	TCCR5B = (0 << WGM53) | (0 << WGM52)                /* TC16 Mode 0 Normal */
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
	         | 0 << ICES5                               /* Input Capture Edge Select: disabled */
	         | (0 << CS52) | (0 << CS51) | (1 << CS50); /* No prescaling */

	// ICR5 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR5A = 16000; /* Output compare A: 16000 */
     a0c:	80 e8       	ldi	r24, 0x80	; 128
     a0e:	9e e3       	ldi	r25, 0x3E	; 62
     a10:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     a14:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

	// OCR5B = 0; /* Output compare B: 0 */

	TIMSK5 = 0 << OCIE5B   /* Output Compare B Match Interrupt Enable: disabled */
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
	         | 1 << OCIE5A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE5  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE5; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	08 95       	ret

00000a22 <__vector_25>:
	USART_3_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_3_rxbuf[tmptail];
}
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	0b b6       	in	r0, 0x3b	; 59
     a2e:	0f 92       	push	r0
     a30:	8f 93       	push	r24
     a32:	9f 93       	push	r25
     a34:	ef 93       	push	r30
     a36:	ff 93       	push	r31
     a38:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     a3c:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <USART_0_rx_head>
     a40:	ef 5f       	subi	r30, 0xFF	; 255
     a42:	e0 93 e6 06 	sts	0x06E6, r30	; 0x8006e6 <USART_0_rx_head>
     a46:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <USART_0_rx_tail>
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	e9 51       	subi	r30, 0x19	; 25
     a4e:	f9 4f       	sbci	r31, 0xF9	; 249
     a50:	80 83       	st	Z, r24
     a52:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <USART_0_rx_elements>
     a56:	8f 5f       	subi	r24, 0xFF	; 255
     a58:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <USART_0_rx_elements>
     a5c:	ff 91       	pop	r31
     a5e:	ef 91       	pop	r30
     a60:	9f 91       	pop	r25
     a62:	8f 91       	pop	r24
     a64:	0f 90       	pop	r0
     a66:	0b be       	out	0x3b, r0	; 59
     a68:	0f 90       	pop	r0
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	0f 90       	pop	r0
     a6e:	1f 90       	pop	r1
     a70:	18 95       	reti

00000a72 <__vector_26>:
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	0b b6       	in	r0, 0x3b	; 59
     a7e:	0f 92       	push	r0
     a80:	8f 93       	push	r24
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
     a86:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <USART_0_tx_elements>
     a8a:	88 23       	and	r24, r24
     a8c:	89 f0       	breq	.+34     	; 0xab0 <__vector_26+0x3e>
     a8e:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <USART_0_tx_tail>
     a92:	ef 5f       	subi	r30, 0xFF	; 255
     a94:	ef 70       	andi	r30, 0x0F	; 15
     a96:	e0 93 d2 06 	sts	0x06D2, r30	; 0x8006d2 <USART_0_tx_tail>
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	ec 52       	subi	r30, 0x2C	; 44
     a9e:	f9 4f       	sbci	r31, 0xF9	; 249
     aa0:	80 81       	ld	r24, Z
     aa2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     aa6:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <USART_0_tx_elements>
     aaa:	81 50       	subi	r24, 0x01	; 1
     aac:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <USART_0_tx_elements>
     ab0:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <USART_0_tx_elements>
     ab4:	81 11       	cpse	r24, r1
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <__vector_26+0x50>
     ab8:	e1 ec       	ldi	r30, 0xC1	; 193
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	8f 7d       	andi	r24, 0xDF	; 223
     ac0:	80 83       	st	Z, r24
     ac2:	ff 91       	pop	r31
     ac4:	ef 91       	pop	r30
     ac6:	8f 91       	pop	r24
     ac8:	0f 90       	pop	r0
     aca:	0b be       	out	0x3b, r0	; 59
     acc:	0f 90       	pop	r0
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	0f 90       	pop	r0
     ad2:	1f 90       	pop	r1
     ad4:	18 95       	reti

00000ad6 <USART_0_init>:
     ad6:	e4 e6       	ldi	r30, 0x64	; 100
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	8d 7f       	andi	r24, 0xFD	; 253
     ade:	80 83       	st	Z, r24
     ae0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     ae4:	87 e6       	ldi	r24, 0x67	; 103
     ae6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     aea:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     aee:	88 e9       	ldi	r24, 0x98	; 152
     af0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     af4:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <USART_0_rx_tail>
     af8:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <USART_0_rx_head>
     afc:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <USART_0_rx_elements>
     b00:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <USART_0_tx_tail>
     b04:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <USART_0_tx_head>
     b08:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <USART_0_tx_elements>
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	08 95       	ret

00000b10 <__vector_36>:
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	0b b6       	in	r0, 0x3b	; 59
     b1c:	0f 92       	push	r0
     b1e:	8f 93       	push	r24
     b20:	9f 93       	push	r25
     b22:	ef 93       	push	r30
     b24:	ff 93       	push	r31
     b26:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b2a:	e0 91 50 06 	lds	r30, 0x0650	; 0x800650 <USART_1_rx_head>
     b2e:	ef 5f       	subi	r30, 0xFF	; 255
     b30:	ef 77       	andi	r30, 0x7F	; 127
     b32:	e0 93 50 06 	sts	0x0650, r30	; 0x800650 <USART_1_rx_head>
     b36:	90 91 4f 06 	lds	r25, 0x064F	; 0x80064f <USART_1_rx_tail>
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	ef 5a       	subi	r30, 0xAF	; 175
     b3e:	f9 4f       	sbci	r31, 0xF9	; 249
     b40:	80 83       	st	Z, r24
     b42:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <USART_1_rx_elements>
     b46:	8f 5f       	subi	r24, 0xFF	; 255
     b48:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <USART_1_rx_elements>
     b4c:	ff 91       	pop	r31
     b4e:	ef 91       	pop	r30
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	0f 90       	pop	r0
     b56:	0b be       	out	0x3b, r0	; 59
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <__vector_37>:
     b62:	1f 92       	push	r1
     b64:	0f 92       	push	r0
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	0b b6       	in	r0, 0x3b	; 59
     b6e:	0f 92       	push	r0
     b70:	8f 93       	push	r24
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31
     b76:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <USART_1_tx_elements>
     b7a:	88 23       	and	r24, r24
     b7c:	89 f0       	breq	.+34     	; 0xba0 <__vector_37+0x3e>
     b7e:	e0 91 3c 06 	lds	r30, 0x063C	; 0x80063c <USART_1_tx_tail>
     b82:	ef 5f       	subi	r30, 0xFF	; 255
     b84:	ef 70       	andi	r30, 0x0F	; 15
     b86:	e0 93 3c 06 	sts	0x063C, r30	; 0x80063c <USART_1_tx_tail>
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	e2 5c       	subi	r30, 0xC2	; 194
     b8e:	f9 4f       	sbci	r31, 0xF9	; 249
     b90:	80 81       	ld	r24, Z
     b92:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b96:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <USART_1_tx_elements>
     b9a:	81 50       	subi	r24, 0x01	; 1
     b9c:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <USART_1_tx_elements>
     ba0:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <USART_1_tx_elements>
     ba4:	81 11       	cpse	r24, r1
     ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <__vector_37+0x50>
     ba8:	e9 ec       	ldi	r30, 0xC9	; 201
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	8f 7d       	andi	r24, 0xDF	; 223
     bb0:	80 83       	st	Z, r24
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	8f 91       	pop	r24
     bb8:	0f 90       	pop	r0
     bba:	0b be       	out	0x3b, r0	; 59
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <USART_1_is_rx_ready>:
     bc6:	90 91 4e 06 	lds	r25, 0x064E	; 0x80064e <USART_1_rx_elements>
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	91 11       	cpse	r25, r1
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <USART_1_is_rx_ready+0xc>
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	08 95       	ret

00000bd4 <USART_1_read>:
     bd4:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <USART_1_rx_elements>
     bd8:	88 23       	and	r24, r24
     bda:	e1 f3       	breq	.-8      	; 0xbd4 <USART_1_read>
     bdc:	e0 91 4f 06 	lds	r30, 0x064F	; 0x80064f <USART_1_rx_tail>
     be0:	ef 5f       	subi	r30, 0xFF	; 255
     be2:	ef 77       	andi	r30, 0x7F	; 127
     be4:	e0 93 4f 06 	sts	0x064F, r30	; 0x80064f <USART_1_rx_tail>
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	0f 92       	push	r0
     bee:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <USART_1_rx_elements>
     bf2:	81 50       	subi	r24, 0x01	; 1
     bf4:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <USART_1_rx_elements>
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	ef 5a       	subi	r30, 0xAF	; 175
     c00:	f9 4f       	sbci	r31, 0xF9	; 249
     c02:	80 81       	ld	r24, Z
     c04:	08 95       	ret

00000c06 <USART_1_write>:
     c06:	20 91 3d 06 	lds	r18, 0x063D	; 0x80063d <USART_1_tx_head>
     c0a:	2f 5f       	subi	r18, 0xFF	; 255
     c0c:	2f 70       	andi	r18, 0x0F	; 15
     c0e:	90 91 3b 06 	lds	r25, 0x063B	; 0x80063b <USART_1_tx_elements>
     c12:	90 31       	cpi	r25, 0x10	; 16
     c14:	e1 f3       	breq	.-8      	; 0xc0e <USART_1_write+0x8>
     c16:	e2 2f       	mov	r30, r18
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	e2 5c       	subi	r30, 0xC2	; 194
     c1c:	f9 4f       	sbci	r31, 0xF9	; 249
     c1e:	80 83       	st	Z, r24
     c20:	20 93 3d 06 	sts	0x063D, r18	; 0x80063d <USART_1_tx_head>
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	0f 92       	push	r0
     c2a:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <USART_1_tx_elements>
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <USART_1_tx_elements>
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	e9 ec       	ldi	r30, 0xC9	; 201
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	80 62       	ori	r24, 0x20	; 32
     c40:	80 83       	st	Z, r24
     c42:	08 95       	ret

00000c44 <USART_1_init>:
     c44:	e5 e6       	ldi	r30, 0x65	; 101
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	8e 7f       	andi	r24, 0xFE	; 254
     c4c:	80 83       	st	Z, r24
     c4e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     c52:	87 e6       	ldi	r24, 0x67	; 103
     c54:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     c58:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     c5c:	88 e9       	ldi	r24, 0x98	; 152
     c5e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     c62:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <USART_1_rx_tail>
     c66:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <USART_1_rx_head>
     c6a:	10 92 4e 06 	sts	0x064E, r1	; 0x80064e <USART_1_rx_elements>
     c6e:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <USART_1_tx_tail>
     c72:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <USART_1_tx_head>
     c76:	10 92 3b 06 	sts	0x063B, r1	; 0x80063b <USART_1_tx_elements>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	08 95       	ret

00000c7e <__vector_51>:
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	0b b6       	in	r0, 0x3b	; 59
     c8a:	0f 92       	push	r0
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	ef 93       	push	r30
     c92:	ff 93       	push	r31
     c94:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     c98:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <USART_2_rx_head>
     c9c:	ef 5f       	subi	r30, 0xFF	; 255
     c9e:	ef 71       	andi	r30, 0x1F	; 31
     ca0:	e0 93 1a 06 	sts	0x061A, r30	; 0x80061a <USART_2_rx_head>
     ca4:	90 91 19 06 	lds	r25, 0x0619	; 0x800619 <USART_2_rx_tail>
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	e5 5e       	subi	r30, 0xE5	; 229
     cac:	f9 4f       	sbci	r31, 0xF9	; 249
     cae:	80 83       	st	Z, r24
     cb0:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <USART_2_rx_elements>
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <USART_2_rx_elements>
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	9f 91       	pop	r25
     cc0:	8f 91       	pop	r24
     cc2:	0f 90       	pop	r0
     cc4:	0b be       	out	0x3b, r0	; 59
     cc6:	0f 90       	pop	r0
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	0f 90       	pop	r0
     ccc:	1f 90       	pop	r1
     cce:	18 95       	reti

00000cd0 <__vector_52>:
     cd0:	1f 92       	push	r1
     cd2:	0f 92       	push	r0
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	0f 92       	push	r0
     cd8:	11 24       	eor	r1, r1
     cda:	0b b6       	in	r0, 0x3b	; 59
     cdc:	0f 92       	push	r0
     cde:	8f 93       	push	r24
     ce0:	ef 93       	push	r30
     ce2:	ff 93       	push	r31
     ce4:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <USART_2_tx_elements>
     ce8:	88 23       	and	r24, r24
     cea:	89 f0       	breq	.+34     	; 0xd0e <__vector_52+0x3e>
     cec:	e0 91 06 06 	lds	r30, 0x0606	; 0x800606 <USART_2_tx_tail>
     cf0:	ef 5f       	subi	r30, 0xFF	; 255
     cf2:	ef 70       	andi	r30, 0x0F	; 15
     cf4:	e0 93 06 06 	sts	0x0606, r30	; 0x800606 <USART_2_tx_tail>
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	e8 5f       	subi	r30, 0xF8	; 248
     cfc:	f9 4f       	sbci	r31, 0xF9	; 249
     cfe:	80 81       	ld	r24, Z
     d00:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     d04:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <USART_2_tx_elements>
     d08:	81 50       	subi	r24, 0x01	; 1
     d0a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <USART_2_tx_elements>
     d0e:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <USART_2_tx_elements>
     d12:	81 11       	cpse	r24, r1
     d14:	05 c0       	rjmp	.+10     	; 0xd20 <__vector_52+0x50>
     d16:	e1 ed       	ldi	r30, 0xD1	; 209
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 7d       	andi	r24, 0xDF	; 223
     d1e:	80 83       	st	Z, r24
     d20:	ff 91       	pop	r31
     d22:	ef 91       	pop	r30
     d24:	8f 91       	pop	r24
     d26:	0f 90       	pop	r0
     d28:	0b be       	out	0x3b, r0	; 59
     d2a:	0f 90       	pop	r0
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	0f 90       	pop	r0
     d30:	1f 90       	pop	r1
     d32:	18 95       	reti

00000d34 <USART_2_is_rx_ready>:
     d34:	90 91 18 06 	lds	r25, 0x0618	; 0x800618 <USART_2_rx_elements>
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	91 11       	cpse	r25, r1
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <USART_2_is_rx_ready+0xc>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	08 95       	ret

00000d42 <USART_2_read>:
     d42:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <USART_2_rx_elements>
     d46:	88 23       	and	r24, r24
     d48:	e1 f3       	breq	.-8      	; 0xd42 <USART_2_read>
     d4a:	e0 91 19 06 	lds	r30, 0x0619	; 0x800619 <USART_2_rx_tail>
     d4e:	ef 5f       	subi	r30, 0xFF	; 255
     d50:	ef 71       	andi	r30, 0x1F	; 31
     d52:	e0 93 19 06 	sts	0x0619, r30	; 0x800619 <USART_2_rx_tail>
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	0f 92       	push	r0
     d5c:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <USART_2_rx_elements>
     d60:	81 50       	subi	r24, 0x01	; 1
     d62:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <USART_2_rx_elements>
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	e5 5e       	subi	r30, 0xE5	; 229
     d6e:	f9 4f       	sbci	r31, 0xF9	; 249
     d70:	80 81       	ld	r24, Z
     d72:	08 95       	ret

00000d74 <USART_2_write>:
     d74:	20 91 07 06 	lds	r18, 0x0607	; 0x800607 <USART_2_tx_head>
     d78:	2f 5f       	subi	r18, 0xFF	; 255
     d7a:	2f 70       	andi	r18, 0x0F	; 15
     d7c:	90 91 05 06 	lds	r25, 0x0605	; 0x800605 <USART_2_tx_elements>
     d80:	90 31       	cpi	r25, 0x10	; 16
     d82:	e1 f3       	breq	.-8      	; 0xd7c <USART_2_write+0x8>
     d84:	e2 2f       	mov	r30, r18
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	e8 5f       	subi	r30, 0xF8	; 248
     d8a:	f9 4f       	sbci	r31, 0xF9	; 249
     d8c:	80 83       	st	Z, r24
     d8e:	20 93 07 06 	sts	0x0607, r18	; 0x800607 <USART_2_tx_head>
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	0f 92       	push	r0
     d98:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <USART_2_tx_elements>
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <USART_2_tx_elements>
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	e1 ed       	ldi	r30, 0xD1	; 209
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	80 62       	ori	r24, 0x20	; 32
     dae:	80 83       	st	Z, r24
     db0:	08 95       	ret

00000db2 <USART_2_init>:
     db2:	e5 e6       	ldi	r30, 0x65	; 101
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8d 7f       	andi	r24, 0xFD	; 253
     dba:	80 83       	st	Z, r24
     dbc:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     dc0:	87 e6       	ldi	r24, 0x67	; 103
     dc2:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     dc6:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     dca:	88 e9       	ldi	r24, 0x98	; 152
     dcc:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     dd0:	10 92 19 06 	sts	0x0619, r1	; 0x800619 <USART_2_rx_tail>
     dd4:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <USART_2_rx_head>
     dd8:	10 92 18 06 	sts	0x0618, r1	; 0x800618 <USART_2_rx_elements>
     ddc:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <USART_2_tx_tail>
     de0:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <USART_2_tx_head>
     de4:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <USART_2_tx_elements>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	08 95       	ret

00000dec <__vector_54>:
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	0b b6       	in	r0, 0x3b	; 59
     df8:	0f 92       	push	r0
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
     e02:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     e06:	e0 91 c4 05 	lds	r30, 0x05C4	; 0x8005c4 <USART_3_rx_head>
     e0a:	ef 5f       	subi	r30, 0xFF	; 255
     e0c:	ef 73       	andi	r30, 0x3F	; 63
     e0e:	e0 93 c4 05 	sts	0x05C4, r30	; 0x8005c4 <USART_3_rx_head>
     e12:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <USART_3_rx_tail>
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	eb 53       	subi	r30, 0x3B	; 59
     e1a:	fa 4f       	sbci	r31, 0xFA	; 250
     e1c:	80 83       	st	Z, r24
     e1e:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <USART_3_rx_elements>
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <USART_3_rx_elements>
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	9f 91       	pop	r25
     e2e:	8f 91       	pop	r24
     e30:	0f 90       	pop	r0
     e32:	0b be       	out	0x3b, r0	; 59
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_55>:
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	0b b6       	in	r0, 0x3b	; 59
     e4a:	0f 92       	push	r0
     e4c:	8f 93       	push	r24
     e4e:	ef 93       	push	r30
     e50:	ff 93       	push	r31
     e52:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <USART_3_tx_elements>
     e56:	88 23       	and	r24, r24
     e58:	81 f0       	breq	.+32     	; 0xe7a <__vector_55+0x3c>
     e5a:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <USART_3_tx_tail>
     e5e:	ef 5f       	subi	r30, 0xFF	; 255
     e60:	e0 93 c0 04 	sts	0x04C0, r30	; 0x8004c0 <USART_3_tx_tail>
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	ee 53       	subi	r30, 0x3E	; 62
     e68:	fb 4f       	sbci	r31, 0xFB	; 251
     e6a:	80 81       	ld	r24, Z
     e6c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     e70:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <USART_3_tx_elements>
     e74:	81 50       	subi	r24, 0x01	; 1
     e76:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <USART_3_tx_elements>
     e7a:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <USART_3_tx_elements>
     e7e:	81 11       	cpse	r24, r1
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <__vector_55+0x4e>
     e82:	e1 e3       	ldi	r30, 0x31	; 49
     e84:	f1 e0       	ldi	r31, 0x01	; 1
     e86:	80 81       	ld	r24, Z
     e88:	8f 7d       	andi	r24, 0xDF	; 223
     e8a:	80 83       	st	Z, r24
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	8f 91       	pop	r24
     e92:	0f 90       	pop	r0
     e94:	0b be       	out	0x3b, r0	; 59
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <USART_3_write>:
void USART_3_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_3_tx_head + 1) & USART_3_TX_BUFFER_MASK;
     ea0:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <USART_3_tx_head>
     ea4:	9f 5f       	subi	r25, 0xFF	; 255
	/* Wait for free space in buffer */
	while (USART_3_tx_elements == USART_3_TX_BUFFER_SIZE)
     ea6:	20 91 bf 04 	lds	r18, 0x04BF	; 0x8004bf <USART_3_tx_elements>
		;
	/* Store data in buffer */
	USART_3_txbuf[tmphead] = data;
     eaa:	e9 2f       	mov	r30, r25
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	ee 53       	subi	r30, 0x3E	; 62
     eb0:	fb 4f       	sbci	r31, 0xFB	; 251
     eb2:	80 83       	st	Z, r24
	/* Store new index */
	USART_3_tx_head = tmphead;
     eb4:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <USART_3_tx_head>
	ENTER_CRITICAL(W);
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	0f 92       	push	r0
	USART_3_tx_elements++;
     ebe:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <USART_3_tx_elements>
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <USART_3_tx_elements>
	EXIT_CRITICAL(W);
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR3B |= (1 << UDRIE3);
     ecc:	e1 e3       	ldi	r30, 0x31	; 49
     ece:	f1 e0       	ldi	r31, 0x01	; 1
     ed0:	80 81       	ld	r24, Z
     ed2:	80 62       	ori	r24, 0x20	; 32
     ed4:	80 83       	st	Z, r24
     ed6:	08 95       	ret

00000ed8 <USART_3_printCHAR>:
     ed8:	e3 df       	rcall	.-58     	; 0xea0 <USART_3_write>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	08 95       	ret

00000ee0 <USART_3_init>:
     ee0:	e5 e6       	ldi	r30, 0x65	; 101
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8b 7f       	andi	r24, 0xFB	; 251
     ee8:	80 83       	st	Z, r24
     eea:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     eee:	87 e6       	ldi	r24, 0x67	; 103
     ef0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     ef4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     ef8:	88 e9       	ldi	r24, 0x98	; 152
     efa:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     efe:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <USART_3_rx_tail>
     f02:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <USART_3_rx_head>
     f06:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <USART_3_rx_elements>
     f0a:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <USART_3_tx_tail>
     f0e:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <USART_3_tx_head>
     f12:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <USART_3_tx_elements>
     f16:	8a e0       	ldi	r24, 0x0A	; 10
     f18:	92 e0       	ldi	r25, 0x02	; 2
     f1a:	90 93 03 09 	sts	0x0903, r25	; 0x800903 <__iob+0x3>
     f1e:	80 93 02 09 	sts	0x0902, r24	; 0x800902 <__iob+0x2>
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret

00000f26 <fastmsectime>:
			 {
				 return;
			 }
		 }
	 }
 }
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	0f 92       	push	r0
     f2c:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <m4sectimer>
     f30:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <m4sectimer+0x1>
     f34:	0f 90       	pop	r0
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	08 95       	ret

00000f3a <fastdelay_ms>:

 // Uses Hardware timer 4 which is set to 4.096mS interrupt
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <fastdelay_ms+0x6>
     f40:	1f 92       	push	r1
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	0f 92       	push	r0
	 currentms = m4sectimer;
     f4c:	20 91 f2 07 	lds	r18, 0x07F2	; 0x8007f2 <m4sectimer>
     f50:	30 91 f3 07 	lds	r19, 0x07F3	; 0x8007f3 <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
     f58:	3c 83       	std	Y+4, r19	; 0x04
     f5a:	2b 83       	std	Y+3, r18	; 0x03
		 k = j + (uint16_t)count;
     f5c:	2b 81       	ldd	r18, Y+3	; 0x03
     f5e:	3c 81       	ldd	r19, Y+4	; 0x04
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	0f 92       	push	r0
	 currentms = m4sectimer;
     f6e:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <m4sectimer>
     f72:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
		 k = j + (uint16_t)count;
		 while(1) {
			 j = fastmsectime();
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 83       	std	Y+3, r24	; 0x03
			 if (j >= k)
     f7e:	2b 81       	ldd	r18, Y+3	; 0x03
     f80:	3c 81       	ldd	r19, Y+4	; 0x04
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	28 17       	cp	r18, r24
     f88:	39 07       	cpc	r19, r25
     f8a:	70 f3       	brcs	.-36     	; 0xf68 <fastdelay_ms+0x2e>
			 {
				 return;
			 }
		 }
	 }
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <__vector_42>:
volatile uint16_t m4sectimer = 0;		// global 4.096mS tick count (16 bits)
extern void processgps(void);
extern void processnex(void);

ISR(TIMER4_COMPA_vect)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	0b b6       	in	r0, 0x3b	; 59
     fa6:	0f 92       	push	r0
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
static uint8_t divider = 0;

	/* Insert your TIMER_0 compare channel A interrupt handling code here */
	m4sectimer++;
     fc0:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <m4sectimer>
     fc4:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <m4sectimer+0x1>
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <m4sectimer+0x1>
     fce:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <m4sectimer>

	if (divider == 0)
     fd2:	80 91 e9 07 	lds	r24, 0x07E9	; 0x8007e9 <divider.3020>
     fd6:	81 11       	cpse	r24, r1
	{
		processgps();		// see if gps receive packet available and copy to struct if so
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <__vector_42+0x4a>
		divider = 1;
     fda:	2e da       	rcall	.-2980   	; 0x438 <processgps>
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 e9 07 	sts	0x07E9, r24	; 0x8007e9 <divider.3020>
	}
	else
	{
		divider = 0;
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <__vector_42+0x50>
		processnex();		// see if the nextion LCD has sent anything
     fe4:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <divider.3020>
	}

}
     fe8:	54 db       	rcall	.-2392   	; 0x692 <processnex>
     fea:	ff 91       	pop	r31
     fec:	ef 91       	pop	r30
     fee:	bf 91       	pop	r27
     ff0:	af 91       	pop	r26
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	7f 91       	pop	r23
     ff8:	6f 91       	pop	r22
     ffa:	5f 91       	pop	r21
     ffc:	4f 91       	pop	r20
     ffe:	3f 91       	pop	r19
    1000:	2f 91       	pop	r18
    1002:	0f 90       	pop	r0
    1004:	0b be       	out	0x3b, r0	; 59
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	0f 90       	pop	r0
    100c:	1f 90       	pop	r1
    100e:	18 95       	reti

00001010 <__vector_47>:

volatile uint64_t m1sectimer = 0;		// global 1mS tick count (64 bits)

ISR(TIMER5_COMPA_vect)
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
	/* Insert your TIMER_5 compare channel A interrupt handling code here */
	static uint16_t nextcmp = 0;

	nextcmp = nextcmp + 16000;		// 1mSec assuming 16MHz clock
    102c:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <nextcmp.3027>
    1030:	90 91 e8 07 	lds	r25, 0x07E8	; 0x8007e8 <nextcmp.3027+0x1>
    1034:	80 58       	subi	r24, 0x80	; 128
    1036:	91 4c       	sbci	r25, 0xC1	; 193
    1038:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <nextcmp.3027+0x1>
    103c:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <nextcmp.3027>
	OCR5AH = nextcmp >> 8 ;
    1040:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
	OCR5AL = nextcmp & 0xff;
    1044:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <nextcmp.3027>
    1048:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	m1sectimer++;
    104c:	20 91 ea 07 	lds	r18, 0x07EA	; 0x8007ea <m1sectimer>
    1050:	30 91 eb 07 	lds	r19, 0x07EB	; 0x8007eb <m1sectimer+0x1>
    1054:	40 91 ec 07 	lds	r20, 0x07EC	; 0x8007ec <m1sectimer+0x2>
    1058:	50 91 ed 07 	lds	r21, 0x07ED	; 0x8007ed <m1sectimer+0x3>
    105c:	60 91 ee 07 	lds	r22, 0x07EE	; 0x8007ee <m1sectimer+0x4>
    1060:	70 91 ef 07 	lds	r23, 0x07EF	; 0x8007ef <m1sectimer+0x5>
    1064:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <m1sectimer+0x6>
    1068:	90 91 f1 07 	lds	r25, 0x07F1	; 0x8007f1 <m1sectimer+0x7>
    106c:	a1 e0       	ldi	r26, 0x01	; 1
    106e:	be d0       	rcall	.+380    	; 0x11ec <__adddi3_s8>
    1070:	20 93 ea 07 	sts	0x07EA, r18	; 0x8007ea <m1sectimer>
    1074:	30 93 eb 07 	sts	0x07EB, r19	; 0x8007eb <m1sectimer+0x1>
    1078:	40 93 ec 07 	sts	0x07EC, r20	; 0x8007ec <m1sectimer+0x2>
    107c:	50 93 ed 07 	sts	0x07ED, r21	; 0x8007ed <m1sectimer+0x3>
    1080:	60 93 ee 07 	sts	0x07EE, r22	; 0x8007ee <m1sectimer+0x4>
    1084:	70 93 ef 07 	sts	0x07EF, r23	; 0x8007ef <m1sectimer+0x5>
    1088:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <m1sectimer+0x6>
    108c:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <m1sectimer+0x7>
}
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	7f 91       	pop	r23
    1098:	6f 91       	pop	r22
    109a:	5f 91       	pop	r21
    109c:	4f 91       	pop	r20
    109e:	3f 91       	pop	r19
    10a0:	2f 91       	pop	r18
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	1f 90       	pop	r1
    10aa:	18 95       	reti

000010ac <displayclock>:
#include "neo7m.h"
#include "nextion.h"
#include <stdio.h>

void displayclock()
{
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
	unsigned char est;

	est = (NavPvt.hour + 10) % 24;
    10b6:	04 ef       	ldi	r16, 0xF4	; 244
    10b8:	17 e0       	ldi	r17, 0x07	; 7
    10ba:	f8 01       	movw	r30, r16
    10bc:	80 85       	ldd	r24, Z+8	; 0x08
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0a 96       	adiw	r24, 0x0a	; 10
    10c2:	68 e1       	ldi	r22, 0x18	; 24
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	7f d0       	rcall	.+254    	; 0x11c6 <__divmodhi4>
    10c8:	f8 2e       	mov	r15, r24
	setndig("top.n1",est/10);
    10ca:	cd ec       	ldi	r28, 0xCD	; 205
    10cc:	8c 9f       	mul	r24, r28
    10ce:	d1 2d       	mov	r29, r1
    10d0:	11 24       	eor	r1, r1
    10d2:	d6 95       	lsr	r29
    10d4:	d6 95       	lsr	r29
    10d6:	d6 95       	lsr	r29
    10d8:	6d 2f       	mov	r22, r29
    10da:	87 e2       	ldi	r24, 0x27	; 39
    10dc:	94 e0       	ldi	r25, 0x04	; 4
    10de:	08 da       	rcall	.-3056   	; 0x4f0 <setndig>
	setndig("top.n2",est%10);
    10e0:	dd 0f       	add	r29, r29
    10e2:	8d 2f       	mov	r24, r29
    10e4:	88 0f       	add	r24, r24
    10e6:	88 0f       	add	r24, r24
    10e8:	d8 0f       	add	r29, r24
    10ea:	6f 2d       	mov	r22, r15
    10ec:	6d 1b       	sub	r22, r29
    10ee:	8e e2       	ldi	r24, 0x2E	; 46
    10f0:	94 e0       	ldi	r25, 0x04	; 4
    10f2:	fe d9       	rcall	.-3076   	; 0x4f0 <setndig>
	setndig("top.n3",NavPvt.min/10);
    10f4:	f8 01       	movw	r30, r16
    10f6:	61 85       	ldd	r22, Z+9	; 0x09
    10f8:	6c 9f       	mul	r22, r28
    10fa:	61 2d       	mov	r22, r1
    10fc:	11 24       	eor	r1, r1
    10fe:	66 95       	lsr	r22
    1100:	66 95       	lsr	r22
    1102:	66 95       	lsr	r22
    1104:	85 e3       	ldi	r24, 0x35	; 53
    1106:	94 e0       	ldi	r25, 0x04	; 4
    1108:	f3 d9       	rcall	.-3098   	; 0x4f0 <setndig>
	setndig("top.n4",NavPvt.min%10);
    110a:	f8 01       	movw	r30, r16
    110c:	61 85       	ldd	r22, Z+9	; 0x09
    110e:	6c 9f       	mul	r22, r28
    1110:	81 2d       	mov	r24, r1
    1112:	11 24       	eor	r1, r1
    1114:	86 95       	lsr	r24
    1116:	86 95       	lsr	r24
    1118:	86 95       	lsr	r24
    111a:	88 0f       	add	r24, r24
    111c:	98 2f       	mov	r25, r24
    111e:	99 0f       	add	r25, r25
    1120:	99 0f       	add	r25, r25
    1122:	89 0f       	add	r24, r25
    1124:	68 1b       	sub	r22, r24
    1126:	8c e3       	ldi	r24, 0x3C	; 60
    1128:	94 e0       	ldi	r25, 0x04	; 4
    112a:	e2 d9       	rcall	.-3132   	; 0x4f0 <setndig>
	setndig("top.n5",NavPvt.sec/10);
    112c:	f8 01       	movw	r30, r16
    112e:	62 85       	ldd	r22, Z+10	; 0x0a
    1130:	6c 9f       	mul	r22, r28
    1132:	61 2d       	mov	r22, r1
    1134:	11 24       	eor	r1, r1
    1136:	66 95       	lsr	r22
    1138:	66 95       	lsr	r22
    113a:	66 95       	lsr	r22
    113c:	83 e4       	ldi	r24, 0x43	; 67
    113e:	94 e0       	ldi	r25, 0x04	; 4
    1140:	d7 d9       	rcall	.-3154   	; 0x4f0 <setndig>
	setndig("top.n6",NavPvt.sec%10);
    1142:	f8 01       	movw	r30, r16
    1144:	62 85       	ldd	r22, Z+10	; 0x0a
    1146:	6c 9f       	mul	r22, r28
    1148:	c1 2d       	mov	r28, r1
    114a:	11 24       	eor	r1, r1
    114c:	c6 95       	lsr	r28
    114e:	c6 95       	lsr	r28
    1150:	c6 95       	lsr	r28
    1152:	cc 0f       	add	r28, r28
    1154:	8c 2f       	mov	r24, r28
    1156:	88 0f       	add	r24, r24
    1158:	88 0f       	add	r24, r24
    115a:	c8 0f       	add	r28, r24
    115c:	6c 1b       	sub	r22, r28
    115e:	8a e4       	ldi	r24, 0x4A	; 74
    1160:	94 e0       	ldi	r25, 0x04	; 4
    1162:	c6 d9       	rcall	.-3188   	; 0x4f0 <setndig>

}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	08 95       	ret

00001170 <main>:
    1170:	da de       	rcall	.-588    	; 0xf26 <fastmsectime>
    1172:	0e 94 94 00 	call	0x128	; 0x128 <atmel_start_init>
    1176:	78 94       	sei
    1178:	81 e5       	ldi	r24, 0x51	; 81
    117a:	94 e0       	ldi	r25, 0x04	; 4
    117c:	9f 93       	push	r25
    117e:	8f 93       	push	r24
    1180:	72 d0       	rcall	.+228    	; 0x1266 <printf>
    1182:	82 ee       	ldi	r24, 0xE2	; 226
    1184:	94 e0       	ldi	r25, 0x04	; 4
    1186:	d9 de       	rcall	.-590    	; 0xf3a <fastdelay_ms>
    1188:	6f d9       	rcall	.-3362   	; 0x468 <setupneo>
    118a:	8f e5       	ldi	r24, 0x5F	; 95
    118c:	94 e0       	ldi	r25, 0x04	; 4
    118e:	9f 93       	push	r25
    1190:	8f 93       	push	r24
    1192:	69 d0       	rcall	.+210    	; 0x1266 <printf>
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	85 e7       	ldi	r24, 0x75	; 117
    1198:	94 e0       	ldi	r25, 0x04	; 4
    119a:	2a da       	rcall	.-2988   	; 0x5f0 <setlcdpage>
    119c:	c4 de       	rcall	.-632    	; 0xf26 <fastmsectime>
    119e:	ec 01       	movw	r28, r24
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	c9 58       	subi	r28, 0x89	; 137
    11aa:	de 4f       	sbci	r29, 0xFE	; 254
    11ac:	bc de       	rcall	.-648    	; 0xf26 <fastmsectime>
    11ae:	c8 17       	cp	r28, r24
    11b0:	d9 07       	cpc	r29, r25
    11b2:	e0 f7       	brcc	.-8      	; 0x11ac <main+0x3c>
    11b4:	b8 de       	rcall	.-656    	; 0xf26 <fastmsectime>
    11b6:	ec 01       	movw	r28, r24
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	89 e7       	ldi	r24, 0x79	; 121
    11bc:	94 e0       	ldi	r25, 0x04	; 4
    11be:	18 da       	rcall	.-3024   	; 0x5f0 <setlcdpage>
    11c0:	75 df       	rcall	.-278    	; 0x10ac <displayclock>
    11c2:	f8 d9       	rcall	.-3088   	; 0x5b4 <getlcdpage>
    11c4:	f1 cf       	rjmp	.-30     	; 0x11a8 <main+0x38>

000011c6 <__divmodhi4>:
    11c6:	97 fb       	bst	r25, 7
    11c8:	07 2e       	mov	r0, r23
    11ca:	16 f4       	brtc	.+4      	; 0x11d0 <__divmodhi4+0xa>
    11cc:	00 94       	com	r0
    11ce:	06 d0       	rcall	.+12     	; 0x11dc <__divmodhi4_neg1>
    11d0:	77 fd       	sbrc	r23, 7
    11d2:	08 d0       	rcall	.+16     	; 0x11e4 <__divmodhi4_neg2>
    11d4:	17 d0       	rcall	.+46     	; 0x1204 <__udivmodhi4>
    11d6:	07 fc       	sbrc	r0, 7
    11d8:	05 d0       	rcall	.+10     	; 0x11e4 <__divmodhi4_neg2>
    11da:	3e f4       	brtc	.+14     	; 0x11ea <__divmodhi4_exit>

000011dc <__divmodhi4_neg1>:
    11dc:	90 95       	com	r25
    11de:	81 95       	neg	r24
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	08 95       	ret

000011e4 <__divmodhi4_neg2>:
    11e4:	70 95       	com	r23
    11e6:	61 95       	neg	r22
    11e8:	7f 4f       	sbci	r23, 0xFF	; 255

000011ea <__divmodhi4_exit>:
    11ea:	08 95       	ret

000011ec <__adddi3_s8>:
    11ec:	00 24       	eor	r0, r0
    11ee:	a7 fd       	sbrc	r26, 7
    11f0:	00 94       	com	r0
    11f2:	2a 0f       	add	r18, r26
    11f4:	30 1d       	adc	r19, r0
    11f6:	40 1d       	adc	r20, r0
    11f8:	50 1d       	adc	r21, r0
    11fa:	60 1d       	adc	r22, r0
    11fc:	70 1d       	adc	r23, r0
    11fe:	80 1d       	adc	r24, r0
    1200:	90 1d       	adc	r25, r0
    1202:	08 95       	ret

00001204 <__udivmodhi4>:
    1204:	aa 1b       	sub	r26, r26
    1206:	bb 1b       	sub	r27, r27
    1208:	51 e1       	ldi	r21, 0x11	; 17
    120a:	07 c0       	rjmp	.+14     	; 0x121a <__udivmodhi4_ep>

0000120c <__udivmodhi4_loop>:
    120c:	aa 1f       	adc	r26, r26
    120e:	bb 1f       	adc	r27, r27
    1210:	a6 17       	cp	r26, r22
    1212:	b7 07       	cpc	r27, r23
    1214:	10 f0       	brcs	.+4      	; 0x121a <__udivmodhi4_ep>
    1216:	a6 1b       	sub	r26, r22
    1218:	b7 0b       	sbc	r27, r23

0000121a <__udivmodhi4_ep>:
    121a:	88 1f       	adc	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	5a 95       	dec	r21
    1220:	a9 f7       	brne	.-22     	; 0x120c <__udivmodhi4_loop>
    1222:	80 95       	com	r24
    1224:	90 95       	com	r25
    1226:	bc 01       	movw	r22, r24
    1228:	cd 01       	movw	r24, r26
    122a:	08 95       	ret

0000122c <strncmp>:
    122c:	fb 01       	movw	r30, r22
    122e:	dc 01       	movw	r26, r24
    1230:	41 50       	subi	r20, 0x01	; 1
    1232:	50 40       	sbci	r21, 0x00	; 0
    1234:	30 f0       	brcs	.+12     	; 0x1242 <strncmp+0x16>
    1236:	8d 91       	ld	r24, X+
    1238:	01 90       	ld	r0, Z+
    123a:	80 19       	sub	r24, r0
    123c:	19 f4       	brne	.+6      	; 0x1244 <strncmp+0x18>
    123e:	00 20       	and	r0, r0
    1240:	b9 f7       	brne	.-18     	; 0x1230 <strncmp+0x4>
    1242:	88 1b       	sub	r24, r24
    1244:	99 0b       	sbc	r25, r25
    1246:	08 95       	ret

00001248 <strncpy>:
    1248:	fb 01       	movw	r30, r22
    124a:	dc 01       	movw	r26, r24
    124c:	41 50       	subi	r20, 0x01	; 1
    124e:	50 40       	sbci	r21, 0x00	; 0
    1250:	48 f0       	brcs	.+18     	; 0x1264 <strncpy+0x1c>
    1252:	01 90       	ld	r0, Z+
    1254:	0d 92       	st	X+, r0
    1256:	00 20       	and	r0, r0
    1258:	c9 f7       	brne	.-14     	; 0x124c <strncpy+0x4>
    125a:	01 c0       	rjmp	.+2      	; 0x125e <strncpy+0x16>
    125c:	1d 92       	st	X+, r1
    125e:	41 50       	subi	r20, 0x01	; 1
    1260:	50 40       	sbci	r21, 0x00	; 0
    1262:	e0 f7       	brcc	.-8      	; 0x125c <strncpy+0x14>
    1264:	08 95       	ret

00001266 <printf>:
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	ae 01       	movw	r20, r28
    1270:	4a 5f       	subi	r20, 0xFA	; 250
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	fa 01       	movw	r30, r20
    1276:	61 91       	ld	r22, Z+
    1278:	71 91       	ld	r23, Z+
    127a:	af 01       	movw	r20, r30
    127c:	80 91 02 09 	lds	r24, 0x0902	; 0x800902 <__iob+0x2>
    1280:	90 91 03 09 	lds	r25, 0x0903	; 0x800903 <__iob+0x3>
    1284:	66 d0       	rcall	.+204    	; 0x1352 <vfprintf>
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <putchar>:
    128c:	60 91 02 09 	lds	r22, 0x0902	; 0x800902 <__iob+0x2>
    1290:	70 91 03 09 	lds	r23, 0x0903	; 0x800903 <__iob+0x3>
    1294:	71 c2       	rjmp	.+1250   	; 0x1778 <fputc>

00001296 <puts>:
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	e0 91 02 09 	lds	r30, 0x0902	; 0x800902 <__iob+0x2>
    12a2:	f0 91 03 09 	lds	r31, 0x0903	; 0x800903 <__iob+0x3>
    12a6:	23 81       	ldd	r18, Z+3	; 0x03
    12a8:	21 ff       	sbrs	r18, 1
    12aa:	1b c0       	rjmp	.+54     	; 0x12e2 <puts+0x4c>
    12ac:	8c 01       	movw	r16, r24
    12ae:	d0 e0       	ldi	r29, 0x00	; 0
    12b0:	c0 e0       	ldi	r28, 0x00	; 0
    12b2:	f8 01       	movw	r30, r16
    12b4:	81 91       	ld	r24, Z+
    12b6:	8f 01       	movw	r16, r30
    12b8:	60 91 02 09 	lds	r22, 0x0902	; 0x800902 <__iob+0x2>
    12bc:	70 91 03 09 	lds	r23, 0x0903	; 0x800903 <__iob+0x3>
    12c0:	db 01       	movw	r26, r22
    12c2:	18 96       	adiw	r26, 0x08	; 8
    12c4:	ed 91       	ld	r30, X+
    12c6:	fc 91       	ld	r31, X
    12c8:	19 97       	sbiw	r26, 0x09	; 9
    12ca:	88 23       	and	r24, r24
    12cc:	31 f0       	breq	.+12     	; 0x12da <puts+0x44>
    12ce:	19 95       	eicall
    12d0:	89 2b       	or	r24, r25
    12d2:	79 f3       	breq	.-34     	; 0x12b2 <puts+0x1c>
    12d4:	df ef       	ldi	r29, 0xFF	; 255
    12d6:	cf ef       	ldi	r28, 0xFF	; 255
    12d8:	ec cf       	rjmp	.-40     	; 0x12b2 <puts+0x1c>
    12da:	8a e0       	ldi	r24, 0x0A	; 10
    12dc:	19 95       	eicall
    12de:	89 2b       	or	r24, r25
    12e0:	19 f0       	breq	.+6      	; 0x12e8 <puts+0x52>
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	9f ef       	ldi	r25, 0xFF	; 255
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <puts+0x56>
    12e8:	8d 2f       	mov	r24, r29
    12ea:	9c 2f       	mov	r25, r28
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <sprintf>:
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	2e 97       	sbiw	r28, 0x0e	; 14
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	0e 89       	ldd	r16, Y+22	; 0x16
    1310:	1f 89       	ldd	r17, Y+23	; 0x17
    1312:	86 e0       	ldi	r24, 0x06	; 6
    1314:	8c 83       	std	Y+4, r24	; 0x04
    1316:	1a 83       	std	Y+2, r17	; 0x02
    1318:	09 83       	std	Y+1, r16	; 0x01
    131a:	8f ef       	ldi	r24, 0xFF	; 255
    131c:	9f e7       	ldi	r25, 0x7F	; 127
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	ae 01       	movw	r20, r28
    1324:	46 5e       	subi	r20, 0xE6	; 230
    1326:	5f 4f       	sbci	r21, 0xFF	; 255
    1328:	68 8d       	ldd	r22, Y+24	; 0x18
    132a:	79 8d       	ldd	r23, Y+25	; 0x19
    132c:	ce 01       	movw	r24, r28
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	10 d0       	rcall	.+32     	; 0x1352 <vfprintf>
    1332:	ef 81       	ldd	r30, Y+7	; 0x07
    1334:	f8 85       	ldd	r31, Y+8	; 0x08
    1336:	e0 0f       	add	r30, r16
    1338:	f1 1f       	adc	r31, r17
    133a:	10 82       	st	Z, r1
    133c:	2e 96       	adiw	r28, 0x0e	; 14
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	08 95       	ret

00001352 <vfprintf>:
    1352:	2f 92       	push	r2
    1354:	3f 92       	push	r3
    1356:	4f 92       	push	r4
    1358:	5f 92       	push	r5
    135a:	6f 92       	push	r6
    135c:	7f 92       	push	r7
    135e:	8f 92       	push	r8
    1360:	9f 92       	push	r9
    1362:	af 92       	push	r10
    1364:	bf 92       	push	r11
    1366:	cf 92       	push	r12
    1368:	df 92       	push	r13
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	2b 97       	sbiw	r28, 0x0b	; 11
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	6c 01       	movw	r12, r24
    1388:	7b 01       	movw	r14, r22
    138a:	8a 01       	movw	r16, r20
    138c:	fc 01       	movw	r30, r24
    138e:	17 82       	std	Z+7, r1	; 0x07
    1390:	16 82       	std	Z+6, r1	; 0x06
    1392:	83 81       	ldd	r24, Z+3	; 0x03
    1394:	81 ff       	sbrs	r24, 1
    1396:	bf c1       	rjmp	.+894    	; 0x1716 <vfprintf+0x3c4>
    1398:	ce 01       	movw	r24, r28
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	3c 01       	movw	r6, r24
    139e:	f6 01       	movw	r30, r12
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	f7 01       	movw	r30, r14
    13a4:	93 fd       	sbrc	r25, 3
    13a6:	85 91       	lpm	r24, Z+
    13a8:	93 ff       	sbrs	r25, 3
    13aa:	81 91       	ld	r24, Z+
    13ac:	7f 01       	movw	r14, r30
    13ae:	88 23       	and	r24, r24
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <vfprintf+0x62>
    13b2:	ad c1       	rjmp	.+858    	; 0x170e <vfprintf+0x3bc>
    13b4:	85 32       	cpi	r24, 0x25	; 37
    13b6:	39 f4       	brne	.+14     	; 0x13c6 <vfprintf+0x74>
    13b8:	93 fd       	sbrc	r25, 3
    13ba:	85 91       	lpm	r24, Z+
    13bc:	93 ff       	sbrs	r25, 3
    13be:	81 91       	ld	r24, Z+
    13c0:	7f 01       	movw	r14, r30
    13c2:	85 32       	cpi	r24, 0x25	; 37
    13c4:	21 f4       	brne	.+8      	; 0x13ce <vfprintf+0x7c>
    13c6:	b6 01       	movw	r22, r12
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	d6 d1       	rcall	.+940    	; 0x1778 <fputc>
    13cc:	e8 cf       	rjmp	.-48     	; 0x139e <vfprintf+0x4c>
    13ce:	91 2c       	mov	r9, r1
    13d0:	21 2c       	mov	r2, r1
    13d2:	31 2c       	mov	r3, r1
    13d4:	ff e1       	ldi	r31, 0x1F	; 31
    13d6:	f3 15       	cp	r31, r3
    13d8:	d8 f0       	brcs	.+54     	; 0x1410 <vfprintf+0xbe>
    13da:	8b 32       	cpi	r24, 0x2B	; 43
    13dc:	79 f0       	breq	.+30     	; 0x13fc <vfprintf+0xaa>
    13de:	38 f4       	brcc	.+14     	; 0x13ee <vfprintf+0x9c>
    13e0:	80 32       	cpi	r24, 0x20	; 32
    13e2:	79 f0       	breq	.+30     	; 0x1402 <vfprintf+0xb0>
    13e4:	83 32       	cpi	r24, 0x23	; 35
    13e6:	a1 f4       	brne	.+40     	; 0x1410 <vfprintf+0xbe>
    13e8:	23 2d       	mov	r18, r3
    13ea:	20 61       	ori	r18, 0x10	; 16
    13ec:	1d c0       	rjmp	.+58     	; 0x1428 <vfprintf+0xd6>
    13ee:	8d 32       	cpi	r24, 0x2D	; 45
    13f0:	61 f0       	breq	.+24     	; 0x140a <vfprintf+0xb8>
    13f2:	80 33       	cpi	r24, 0x30	; 48
    13f4:	69 f4       	brne	.+26     	; 0x1410 <vfprintf+0xbe>
    13f6:	23 2d       	mov	r18, r3
    13f8:	21 60       	ori	r18, 0x01	; 1
    13fa:	16 c0       	rjmp	.+44     	; 0x1428 <vfprintf+0xd6>
    13fc:	83 2d       	mov	r24, r3
    13fe:	82 60       	ori	r24, 0x02	; 2
    1400:	38 2e       	mov	r3, r24
    1402:	e3 2d       	mov	r30, r3
    1404:	e4 60       	ori	r30, 0x04	; 4
    1406:	3e 2e       	mov	r3, r30
    1408:	2a c0       	rjmp	.+84     	; 0x145e <vfprintf+0x10c>
    140a:	f3 2d       	mov	r31, r3
    140c:	f8 60       	ori	r31, 0x08	; 8
    140e:	1d c0       	rjmp	.+58     	; 0x144a <vfprintf+0xf8>
    1410:	37 fc       	sbrc	r3, 7
    1412:	2d c0       	rjmp	.+90     	; 0x146e <vfprintf+0x11c>
    1414:	20 ed       	ldi	r18, 0xD0	; 208
    1416:	28 0f       	add	r18, r24
    1418:	2a 30       	cpi	r18, 0x0A	; 10
    141a:	40 f0       	brcs	.+16     	; 0x142c <vfprintf+0xda>
    141c:	8e 32       	cpi	r24, 0x2E	; 46
    141e:	b9 f4       	brne	.+46     	; 0x144e <vfprintf+0xfc>
    1420:	36 fc       	sbrc	r3, 6
    1422:	75 c1       	rjmp	.+746    	; 0x170e <vfprintf+0x3bc>
    1424:	23 2d       	mov	r18, r3
    1426:	20 64       	ori	r18, 0x40	; 64
    1428:	32 2e       	mov	r3, r18
    142a:	19 c0       	rjmp	.+50     	; 0x145e <vfprintf+0x10c>
    142c:	36 fe       	sbrs	r3, 6
    142e:	06 c0       	rjmp	.+12     	; 0x143c <vfprintf+0xea>
    1430:	8a e0       	ldi	r24, 0x0A	; 10
    1432:	98 9e       	mul	r9, r24
    1434:	20 0d       	add	r18, r0
    1436:	11 24       	eor	r1, r1
    1438:	92 2e       	mov	r9, r18
    143a:	11 c0       	rjmp	.+34     	; 0x145e <vfprintf+0x10c>
    143c:	ea e0       	ldi	r30, 0x0A	; 10
    143e:	2e 9e       	mul	r2, r30
    1440:	20 0d       	add	r18, r0
    1442:	11 24       	eor	r1, r1
    1444:	22 2e       	mov	r2, r18
    1446:	f3 2d       	mov	r31, r3
    1448:	f0 62       	ori	r31, 0x20	; 32
    144a:	3f 2e       	mov	r3, r31
    144c:	08 c0       	rjmp	.+16     	; 0x145e <vfprintf+0x10c>
    144e:	8c 36       	cpi	r24, 0x6C	; 108
    1450:	21 f4       	brne	.+8      	; 0x145a <vfprintf+0x108>
    1452:	83 2d       	mov	r24, r3
    1454:	80 68       	ori	r24, 0x80	; 128
    1456:	38 2e       	mov	r3, r24
    1458:	02 c0       	rjmp	.+4      	; 0x145e <vfprintf+0x10c>
    145a:	88 36       	cpi	r24, 0x68	; 104
    145c:	41 f4       	brne	.+16     	; 0x146e <vfprintf+0x11c>
    145e:	f7 01       	movw	r30, r14
    1460:	93 fd       	sbrc	r25, 3
    1462:	85 91       	lpm	r24, Z+
    1464:	93 ff       	sbrs	r25, 3
    1466:	81 91       	ld	r24, Z+
    1468:	7f 01       	movw	r14, r30
    146a:	81 11       	cpse	r24, r1
    146c:	b3 cf       	rjmp	.-154    	; 0x13d4 <vfprintf+0x82>
    146e:	98 2f       	mov	r25, r24
    1470:	9f 7d       	andi	r25, 0xDF	; 223
    1472:	95 54       	subi	r25, 0x45	; 69
    1474:	93 30       	cpi	r25, 0x03	; 3
    1476:	28 f4       	brcc	.+10     	; 0x1482 <vfprintf+0x130>
    1478:	0c 5f       	subi	r16, 0xFC	; 252
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	9f e3       	ldi	r25, 0x3F	; 63
    147e:	99 83       	std	Y+1, r25	; 0x01
    1480:	0d c0       	rjmp	.+26     	; 0x149c <vfprintf+0x14a>
    1482:	83 36       	cpi	r24, 0x63	; 99
    1484:	31 f0       	breq	.+12     	; 0x1492 <vfprintf+0x140>
    1486:	83 37       	cpi	r24, 0x73	; 115
    1488:	71 f0       	breq	.+28     	; 0x14a6 <vfprintf+0x154>
    148a:	83 35       	cpi	r24, 0x53	; 83
    148c:	09 f0       	breq	.+2      	; 0x1490 <vfprintf+0x13e>
    148e:	55 c0       	rjmp	.+170    	; 0x153a <vfprintf+0x1e8>
    1490:	20 c0       	rjmp	.+64     	; 0x14d2 <vfprintf+0x180>
    1492:	f8 01       	movw	r30, r16
    1494:	80 81       	ld	r24, Z
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	0e 5f       	subi	r16, 0xFE	; 254
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	88 24       	eor	r8, r8
    149e:	83 94       	inc	r8
    14a0:	91 2c       	mov	r9, r1
    14a2:	53 01       	movw	r10, r6
    14a4:	12 c0       	rjmp	.+36     	; 0x14ca <vfprintf+0x178>
    14a6:	28 01       	movw	r4, r16
    14a8:	f2 e0       	ldi	r31, 0x02	; 2
    14aa:	4f 0e       	add	r4, r31
    14ac:	51 1c       	adc	r5, r1
    14ae:	f8 01       	movw	r30, r16
    14b0:	a0 80       	ld	r10, Z
    14b2:	b1 80       	ldd	r11, Z+1	; 0x01
    14b4:	36 fe       	sbrs	r3, 6
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <vfprintf+0x16c>
    14b8:	69 2d       	mov	r22, r9
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <vfprintf+0x170>
    14be:	6f ef       	ldi	r22, 0xFF	; 255
    14c0:	7f ef       	ldi	r23, 0xFF	; 255
    14c2:	c5 01       	movw	r24, r10
    14c4:	4e d1       	rcall	.+668    	; 0x1762 <strnlen>
    14c6:	4c 01       	movw	r8, r24
    14c8:	82 01       	movw	r16, r4
    14ca:	f3 2d       	mov	r31, r3
    14cc:	ff 77       	andi	r31, 0x7F	; 127
    14ce:	3f 2e       	mov	r3, r31
    14d0:	15 c0       	rjmp	.+42     	; 0x14fc <vfprintf+0x1aa>
    14d2:	28 01       	movw	r4, r16
    14d4:	22 e0       	ldi	r18, 0x02	; 2
    14d6:	42 0e       	add	r4, r18
    14d8:	51 1c       	adc	r5, r1
    14da:	f8 01       	movw	r30, r16
    14dc:	a0 80       	ld	r10, Z
    14de:	b1 80       	ldd	r11, Z+1	; 0x01
    14e0:	36 fe       	sbrs	r3, 6
    14e2:	03 c0       	rjmp	.+6      	; 0x14ea <vfprintf+0x198>
    14e4:	69 2d       	mov	r22, r9
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <vfprintf+0x19c>
    14ea:	6f ef       	ldi	r22, 0xFF	; 255
    14ec:	7f ef       	ldi	r23, 0xFF	; 255
    14ee:	c5 01       	movw	r24, r10
    14f0:	2d d1       	rcall	.+602    	; 0x174c <strnlen_P>
    14f2:	4c 01       	movw	r8, r24
    14f4:	f3 2d       	mov	r31, r3
    14f6:	f0 68       	ori	r31, 0x80	; 128
    14f8:	3f 2e       	mov	r3, r31
    14fa:	82 01       	movw	r16, r4
    14fc:	33 fc       	sbrc	r3, 3
    14fe:	19 c0       	rjmp	.+50     	; 0x1532 <vfprintf+0x1e0>
    1500:	82 2d       	mov	r24, r2
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	88 16       	cp	r8, r24
    1506:	99 06       	cpc	r9, r25
    1508:	a0 f4       	brcc	.+40     	; 0x1532 <vfprintf+0x1e0>
    150a:	b6 01       	movw	r22, r12
    150c:	80 e2       	ldi	r24, 0x20	; 32
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	33 d1       	rcall	.+614    	; 0x1778 <fputc>
    1512:	2a 94       	dec	r2
    1514:	f5 cf       	rjmp	.-22     	; 0x1500 <vfprintf+0x1ae>
    1516:	f5 01       	movw	r30, r10
    1518:	37 fc       	sbrc	r3, 7
    151a:	85 91       	lpm	r24, Z+
    151c:	37 fe       	sbrs	r3, 7
    151e:	81 91       	ld	r24, Z+
    1520:	5f 01       	movw	r10, r30
    1522:	b6 01       	movw	r22, r12
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	28 d1       	rcall	.+592    	; 0x1778 <fputc>
    1528:	21 10       	cpse	r2, r1
    152a:	2a 94       	dec	r2
    152c:	21 e0       	ldi	r18, 0x01	; 1
    152e:	82 1a       	sub	r8, r18
    1530:	91 08       	sbc	r9, r1
    1532:	81 14       	cp	r8, r1
    1534:	91 04       	cpc	r9, r1
    1536:	79 f7       	brne	.-34     	; 0x1516 <vfprintf+0x1c4>
    1538:	e1 c0       	rjmp	.+450    	; 0x16fc <vfprintf+0x3aa>
    153a:	84 36       	cpi	r24, 0x64	; 100
    153c:	11 f0       	breq	.+4      	; 0x1542 <vfprintf+0x1f0>
    153e:	89 36       	cpi	r24, 0x69	; 105
    1540:	39 f5       	brne	.+78     	; 0x1590 <vfprintf+0x23e>
    1542:	f8 01       	movw	r30, r16
    1544:	37 fe       	sbrs	r3, 7
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <vfprintf+0x204>
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	0c 5f       	subi	r16, 0xFC	; 252
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	08 c0       	rjmp	.+16     	; 0x1566 <vfprintf+0x214>
    1556:	60 81       	ld	r22, Z
    1558:	71 81       	ldd	r23, Z+1	; 0x01
    155a:	07 2e       	mov	r0, r23
    155c:	00 0c       	add	r0, r0
    155e:	88 0b       	sbc	r24, r24
    1560:	99 0b       	sbc	r25, r25
    1562:	0e 5f       	subi	r16, 0xFE	; 254
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	f3 2d       	mov	r31, r3
    1568:	ff 76       	andi	r31, 0x6F	; 111
    156a:	3f 2e       	mov	r3, r31
    156c:	97 ff       	sbrs	r25, 7
    156e:	09 c0       	rjmp	.+18     	; 0x1582 <vfprintf+0x230>
    1570:	90 95       	com	r25
    1572:	80 95       	com	r24
    1574:	70 95       	com	r23
    1576:	61 95       	neg	r22
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	8f 4f       	sbci	r24, 0xFF	; 255
    157c:	9f 4f       	sbci	r25, 0xFF	; 255
    157e:	f0 68       	ori	r31, 0x80	; 128
    1580:	3f 2e       	mov	r3, r31
    1582:	2a e0       	ldi	r18, 0x0A	; 10
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	a3 01       	movw	r20, r6
    1588:	33 d1       	rcall	.+614    	; 0x17f0 <__ultoa_invert>
    158a:	88 2e       	mov	r8, r24
    158c:	86 18       	sub	r8, r6
    158e:	44 c0       	rjmp	.+136    	; 0x1618 <vfprintf+0x2c6>
    1590:	85 37       	cpi	r24, 0x75	; 117
    1592:	31 f4       	brne	.+12     	; 0x15a0 <vfprintf+0x24e>
    1594:	23 2d       	mov	r18, r3
    1596:	2f 7e       	andi	r18, 0xEF	; 239
    1598:	b2 2e       	mov	r11, r18
    159a:	2a e0       	ldi	r18, 0x0A	; 10
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	25 c0       	rjmp	.+74     	; 0x15ea <vfprintf+0x298>
    15a0:	93 2d       	mov	r25, r3
    15a2:	99 7f       	andi	r25, 0xF9	; 249
    15a4:	b9 2e       	mov	r11, r25
    15a6:	8f 36       	cpi	r24, 0x6F	; 111
    15a8:	c1 f0       	breq	.+48     	; 0x15da <vfprintf+0x288>
    15aa:	18 f4       	brcc	.+6      	; 0x15b2 <vfprintf+0x260>
    15ac:	88 35       	cpi	r24, 0x58	; 88
    15ae:	79 f0       	breq	.+30     	; 0x15ce <vfprintf+0x27c>
    15b0:	ae c0       	rjmp	.+348    	; 0x170e <vfprintf+0x3bc>
    15b2:	80 37       	cpi	r24, 0x70	; 112
    15b4:	19 f0       	breq	.+6      	; 0x15bc <vfprintf+0x26a>
    15b6:	88 37       	cpi	r24, 0x78	; 120
    15b8:	21 f0       	breq	.+8      	; 0x15c2 <vfprintf+0x270>
    15ba:	a9 c0       	rjmp	.+338    	; 0x170e <vfprintf+0x3bc>
    15bc:	e9 2f       	mov	r30, r25
    15be:	e0 61       	ori	r30, 0x10	; 16
    15c0:	be 2e       	mov	r11, r30
    15c2:	b4 fe       	sbrs	r11, 4
    15c4:	0d c0       	rjmp	.+26     	; 0x15e0 <vfprintf+0x28e>
    15c6:	fb 2d       	mov	r31, r11
    15c8:	f4 60       	ori	r31, 0x04	; 4
    15ca:	bf 2e       	mov	r11, r31
    15cc:	09 c0       	rjmp	.+18     	; 0x15e0 <vfprintf+0x28e>
    15ce:	34 fe       	sbrs	r3, 4
    15d0:	0a c0       	rjmp	.+20     	; 0x15e6 <vfprintf+0x294>
    15d2:	29 2f       	mov	r18, r25
    15d4:	26 60       	ori	r18, 0x06	; 6
    15d6:	b2 2e       	mov	r11, r18
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <vfprintf+0x294>
    15da:	28 e0       	ldi	r18, 0x08	; 8
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	05 c0       	rjmp	.+10     	; 0x15ea <vfprintf+0x298>
    15e0:	20 e1       	ldi	r18, 0x10	; 16
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <vfprintf+0x298>
    15e6:	20 e1       	ldi	r18, 0x10	; 16
    15e8:	32 e0       	ldi	r19, 0x02	; 2
    15ea:	f8 01       	movw	r30, r16
    15ec:	b7 fe       	sbrs	r11, 7
    15ee:	07 c0       	rjmp	.+14     	; 0x15fe <vfprintf+0x2ac>
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	0c 5f       	subi	r16, 0xFC	; 252
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <vfprintf+0x2b8>
    15fe:	60 81       	ld	r22, Z
    1600:	71 81       	ldd	r23, Z+1	; 0x01
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 5f       	subi	r16, 0xFE	; 254
    1608:	1f 4f       	sbci	r17, 0xFF	; 255
    160a:	a3 01       	movw	r20, r6
    160c:	f1 d0       	rcall	.+482    	; 0x17f0 <__ultoa_invert>
    160e:	88 2e       	mov	r8, r24
    1610:	86 18       	sub	r8, r6
    1612:	fb 2d       	mov	r31, r11
    1614:	ff 77       	andi	r31, 0x7F	; 127
    1616:	3f 2e       	mov	r3, r31
    1618:	36 fe       	sbrs	r3, 6
    161a:	0d c0       	rjmp	.+26     	; 0x1636 <vfprintf+0x2e4>
    161c:	23 2d       	mov	r18, r3
    161e:	2e 7f       	andi	r18, 0xFE	; 254
    1620:	a2 2e       	mov	r10, r18
    1622:	89 14       	cp	r8, r9
    1624:	58 f4       	brcc	.+22     	; 0x163c <vfprintf+0x2ea>
    1626:	34 fe       	sbrs	r3, 4
    1628:	0b c0       	rjmp	.+22     	; 0x1640 <vfprintf+0x2ee>
    162a:	32 fc       	sbrc	r3, 2
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <vfprintf+0x2ee>
    162e:	83 2d       	mov	r24, r3
    1630:	8e 7e       	andi	r24, 0xEE	; 238
    1632:	a8 2e       	mov	r10, r24
    1634:	05 c0       	rjmp	.+10     	; 0x1640 <vfprintf+0x2ee>
    1636:	b8 2c       	mov	r11, r8
    1638:	a3 2c       	mov	r10, r3
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <vfprintf+0x2f0>
    163c:	b8 2c       	mov	r11, r8
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <vfprintf+0x2f0>
    1640:	b9 2c       	mov	r11, r9
    1642:	a4 fe       	sbrs	r10, 4
    1644:	0f c0       	rjmp	.+30     	; 0x1664 <vfprintf+0x312>
    1646:	fe 01       	movw	r30, r28
    1648:	e8 0d       	add	r30, r8
    164a:	f1 1d       	adc	r31, r1
    164c:	80 81       	ld	r24, Z
    164e:	80 33       	cpi	r24, 0x30	; 48
    1650:	21 f4       	brne	.+8      	; 0x165a <vfprintf+0x308>
    1652:	9a 2d       	mov	r25, r10
    1654:	99 7e       	andi	r25, 0xE9	; 233
    1656:	a9 2e       	mov	r10, r25
    1658:	09 c0       	rjmp	.+18     	; 0x166c <vfprintf+0x31a>
    165a:	a2 fe       	sbrs	r10, 2
    165c:	06 c0       	rjmp	.+12     	; 0x166a <vfprintf+0x318>
    165e:	b3 94       	inc	r11
    1660:	b3 94       	inc	r11
    1662:	04 c0       	rjmp	.+8      	; 0x166c <vfprintf+0x31a>
    1664:	8a 2d       	mov	r24, r10
    1666:	86 78       	andi	r24, 0x86	; 134
    1668:	09 f0       	breq	.+2      	; 0x166c <vfprintf+0x31a>
    166a:	b3 94       	inc	r11
    166c:	a3 fc       	sbrc	r10, 3
    166e:	10 c0       	rjmp	.+32     	; 0x1690 <vfprintf+0x33e>
    1670:	a0 fe       	sbrs	r10, 0
    1672:	06 c0       	rjmp	.+12     	; 0x1680 <vfprintf+0x32e>
    1674:	b2 14       	cp	r11, r2
    1676:	80 f4       	brcc	.+32     	; 0x1698 <vfprintf+0x346>
    1678:	28 0c       	add	r2, r8
    167a:	92 2c       	mov	r9, r2
    167c:	9b 18       	sub	r9, r11
    167e:	0d c0       	rjmp	.+26     	; 0x169a <vfprintf+0x348>
    1680:	b2 14       	cp	r11, r2
    1682:	58 f4       	brcc	.+22     	; 0x169a <vfprintf+0x348>
    1684:	b6 01       	movw	r22, r12
    1686:	80 e2       	ldi	r24, 0x20	; 32
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	76 d0       	rcall	.+236    	; 0x1778 <fputc>
    168c:	b3 94       	inc	r11
    168e:	f8 cf       	rjmp	.-16     	; 0x1680 <vfprintf+0x32e>
    1690:	b2 14       	cp	r11, r2
    1692:	18 f4       	brcc	.+6      	; 0x169a <vfprintf+0x348>
    1694:	2b 18       	sub	r2, r11
    1696:	02 c0       	rjmp	.+4      	; 0x169c <vfprintf+0x34a>
    1698:	98 2c       	mov	r9, r8
    169a:	21 2c       	mov	r2, r1
    169c:	a4 fe       	sbrs	r10, 4
    169e:	0f c0       	rjmp	.+30     	; 0x16be <vfprintf+0x36c>
    16a0:	b6 01       	movw	r22, r12
    16a2:	80 e3       	ldi	r24, 0x30	; 48
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	68 d0       	rcall	.+208    	; 0x1778 <fputc>
    16a8:	a2 fe       	sbrs	r10, 2
    16aa:	16 c0       	rjmp	.+44     	; 0x16d8 <vfprintf+0x386>
    16ac:	a1 fc       	sbrc	r10, 1
    16ae:	03 c0       	rjmp	.+6      	; 0x16b6 <vfprintf+0x364>
    16b0:	88 e7       	ldi	r24, 0x78	; 120
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <vfprintf+0x368>
    16b6:	88 e5       	ldi	r24, 0x58	; 88
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	b6 01       	movw	r22, r12
    16bc:	0c c0       	rjmp	.+24     	; 0x16d6 <vfprintf+0x384>
    16be:	8a 2d       	mov	r24, r10
    16c0:	86 78       	andi	r24, 0x86	; 134
    16c2:	51 f0       	breq	.+20     	; 0x16d8 <vfprintf+0x386>
    16c4:	a1 fe       	sbrs	r10, 1
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <vfprintf+0x37a>
    16c8:	8b e2       	ldi	r24, 0x2B	; 43
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <vfprintf+0x37c>
    16cc:	80 e2       	ldi	r24, 0x20	; 32
    16ce:	a7 fc       	sbrc	r10, 7
    16d0:	8d e2       	ldi	r24, 0x2D	; 45
    16d2:	b6 01       	movw	r22, r12
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	50 d0       	rcall	.+160    	; 0x1778 <fputc>
    16d8:	89 14       	cp	r8, r9
    16da:	30 f4       	brcc	.+12     	; 0x16e8 <vfprintf+0x396>
    16dc:	b6 01       	movw	r22, r12
    16de:	80 e3       	ldi	r24, 0x30	; 48
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	4a d0       	rcall	.+148    	; 0x1778 <fputc>
    16e4:	9a 94       	dec	r9
    16e6:	f8 cf       	rjmp	.-16     	; 0x16d8 <vfprintf+0x386>
    16e8:	8a 94       	dec	r8
    16ea:	f3 01       	movw	r30, r6
    16ec:	e8 0d       	add	r30, r8
    16ee:	f1 1d       	adc	r31, r1
    16f0:	80 81       	ld	r24, Z
    16f2:	b6 01       	movw	r22, r12
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	40 d0       	rcall	.+128    	; 0x1778 <fputc>
    16f8:	81 10       	cpse	r8, r1
    16fa:	f6 cf       	rjmp	.-20     	; 0x16e8 <vfprintf+0x396>
    16fc:	22 20       	and	r2, r2
    16fe:	09 f4       	brne	.+2      	; 0x1702 <vfprintf+0x3b0>
    1700:	4e ce       	rjmp	.-868    	; 0x139e <vfprintf+0x4c>
    1702:	b6 01       	movw	r22, r12
    1704:	80 e2       	ldi	r24, 0x20	; 32
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	37 d0       	rcall	.+110    	; 0x1778 <fputc>
    170a:	2a 94       	dec	r2
    170c:	f7 cf       	rjmp	.-18     	; 0x16fc <vfprintf+0x3aa>
    170e:	f6 01       	movw	r30, r12
    1710:	86 81       	ldd	r24, Z+6	; 0x06
    1712:	97 81       	ldd	r25, Z+7	; 0x07
    1714:	02 c0       	rjmp	.+4      	; 0x171a <vfprintf+0x3c8>
    1716:	8f ef       	ldi	r24, 0xFF	; 255
    1718:	9f ef       	ldi	r25, 0xFF	; 255
    171a:	2b 96       	adiw	r28, 0x0b	; 11
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	df 90       	pop	r13
    1734:	cf 90       	pop	r12
    1736:	bf 90       	pop	r11
    1738:	af 90       	pop	r10
    173a:	9f 90       	pop	r9
    173c:	8f 90       	pop	r8
    173e:	7f 90       	pop	r7
    1740:	6f 90       	pop	r6
    1742:	5f 90       	pop	r5
    1744:	4f 90       	pop	r4
    1746:	3f 90       	pop	r3
    1748:	2f 90       	pop	r2
    174a:	08 95       	ret

0000174c <strnlen_P>:
    174c:	fc 01       	movw	r30, r24
    174e:	05 90       	lpm	r0, Z+
    1750:	61 50       	subi	r22, 0x01	; 1
    1752:	70 40       	sbci	r23, 0x00	; 0
    1754:	01 10       	cpse	r0, r1
    1756:	d8 f7       	brcc	.-10     	; 0x174e <strnlen_P+0x2>
    1758:	80 95       	com	r24
    175a:	90 95       	com	r25
    175c:	8e 0f       	add	r24, r30
    175e:	9f 1f       	adc	r25, r31
    1760:	08 95       	ret

00001762 <strnlen>:
    1762:	fc 01       	movw	r30, r24
    1764:	61 50       	subi	r22, 0x01	; 1
    1766:	70 40       	sbci	r23, 0x00	; 0
    1768:	01 90       	ld	r0, Z+
    176a:	01 10       	cpse	r0, r1
    176c:	d8 f7       	brcc	.-10     	; 0x1764 <strnlen+0x2>
    176e:	80 95       	com	r24
    1770:	90 95       	com	r25
    1772:	8e 0f       	add	r24, r30
    1774:	9f 1f       	adc	r25, r31
    1776:	08 95       	ret

00001778 <fputc>:
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	fb 01       	movw	r30, r22
    1782:	23 81       	ldd	r18, Z+3	; 0x03
    1784:	21 fd       	sbrc	r18, 1
    1786:	03 c0       	rjmp	.+6      	; 0x178e <fputc+0x16>
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	9f ef       	ldi	r25, 0xFF	; 255
    178c:	2c c0       	rjmp	.+88     	; 0x17e6 <fputc+0x6e>
    178e:	22 ff       	sbrs	r18, 2
    1790:	16 c0       	rjmp	.+44     	; 0x17be <fputc+0x46>
    1792:	46 81       	ldd	r20, Z+6	; 0x06
    1794:	57 81       	ldd	r21, Z+7	; 0x07
    1796:	24 81       	ldd	r18, Z+4	; 0x04
    1798:	35 81       	ldd	r19, Z+5	; 0x05
    179a:	42 17       	cp	r20, r18
    179c:	53 07       	cpc	r21, r19
    179e:	44 f4       	brge	.+16     	; 0x17b0 <fputc+0x38>
    17a0:	a0 81       	ld	r26, Z
    17a2:	b1 81       	ldd	r27, Z+1	; 0x01
    17a4:	9d 01       	movw	r18, r26
    17a6:	2f 5f       	subi	r18, 0xFF	; 255
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	31 83       	std	Z+1, r19	; 0x01
    17ac:	20 83       	st	Z, r18
    17ae:	8c 93       	st	X, r24
    17b0:	26 81       	ldd	r18, Z+6	; 0x06
    17b2:	37 81       	ldd	r19, Z+7	; 0x07
    17b4:	2f 5f       	subi	r18, 0xFF	; 255
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	37 83       	std	Z+7, r19	; 0x07
    17ba:	26 83       	std	Z+6, r18	; 0x06
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <fputc+0x6e>
    17be:	8b 01       	movw	r16, r22
    17c0:	ec 01       	movw	r28, r24
    17c2:	fb 01       	movw	r30, r22
    17c4:	00 84       	ldd	r0, Z+8	; 0x08
    17c6:	f1 85       	ldd	r31, Z+9	; 0x09
    17c8:	e0 2d       	mov	r30, r0
    17ca:	19 95       	eicall
    17cc:	89 2b       	or	r24, r25
    17ce:	e1 f6       	brne	.-72     	; 0x1788 <fputc+0x10>
    17d0:	d8 01       	movw	r26, r16
    17d2:	16 96       	adiw	r26, 0x06	; 6
    17d4:	8d 91       	ld	r24, X+
    17d6:	9c 91       	ld	r25, X
    17d8:	17 97       	sbiw	r26, 0x07	; 7
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	17 96       	adiw	r26, 0x07	; 7
    17de:	9c 93       	st	X, r25
    17e0:	8e 93       	st	-X, r24
    17e2:	16 97       	sbiw	r26, 0x06	; 6
    17e4:	ce 01       	movw	r24, r28
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	08 95       	ret

000017f0 <__ultoa_invert>:
    17f0:	fa 01       	movw	r30, r20
    17f2:	aa 27       	eor	r26, r26
    17f4:	28 30       	cpi	r18, 0x08	; 8
    17f6:	51 f1       	breq	.+84     	; 0x184c <__ultoa_invert+0x5c>
    17f8:	20 31       	cpi	r18, 0x10	; 16
    17fa:	81 f1       	breq	.+96     	; 0x185c <__ultoa_invert+0x6c>
    17fc:	e8 94       	clt
    17fe:	6f 93       	push	r22
    1800:	6e 7f       	andi	r22, 0xFE	; 254
    1802:	6e 5f       	subi	r22, 0xFE	; 254
    1804:	7f 4f       	sbci	r23, 0xFF	; 255
    1806:	8f 4f       	sbci	r24, 0xFF	; 255
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	af 4f       	sbci	r26, 0xFF	; 255
    180c:	b1 e0       	ldi	r27, 0x01	; 1
    180e:	3e d0       	rcall	.+124    	; 0x188c <__ultoa_invert+0x9c>
    1810:	b4 e0       	ldi	r27, 0x04	; 4
    1812:	3c d0       	rcall	.+120    	; 0x188c <__ultoa_invert+0x9c>
    1814:	67 0f       	add	r22, r23
    1816:	78 1f       	adc	r23, r24
    1818:	89 1f       	adc	r24, r25
    181a:	9a 1f       	adc	r25, r26
    181c:	a1 1d       	adc	r26, r1
    181e:	68 0f       	add	r22, r24
    1820:	79 1f       	adc	r23, r25
    1822:	8a 1f       	adc	r24, r26
    1824:	91 1d       	adc	r25, r1
    1826:	a1 1d       	adc	r26, r1
    1828:	6a 0f       	add	r22, r26
    182a:	71 1d       	adc	r23, r1
    182c:	81 1d       	adc	r24, r1
    182e:	91 1d       	adc	r25, r1
    1830:	a1 1d       	adc	r26, r1
    1832:	20 d0       	rcall	.+64     	; 0x1874 <__ultoa_invert+0x84>
    1834:	09 f4       	brne	.+2      	; 0x1838 <__ultoa_invert+0x48>
    1836:	68 94       	set
    1838:	3f 91       	pop	r19
    183a:	2a e0       	ldi	r18, 0x0A	; 10
    183c:	26 9f       	mul	r18, r22
    183e:	11 24       	eor	r1, r1
    1840:	30 19       	sub	r19, r0
    1842:	30 5d       	subi	r19, 0xD0	; 208
    1844:	31 93       	st	Z+, r19
    1846:	de f6       	brtc	.-74     	; 0x17fe <__ultoa_invert+0xe>
    1848:	cf 01       	movw	r24, r30
    184a:	08 95       	ret
    184c:	46 2f       	mov	r20, r22
    184e:	47 70       	andi	r20, 0x07	; 7
    1850:	40 5d       	subi	r20, 0xD0	; 208
    1852:	41 93       	st	Z+, r20
    1854:	b3 e0       	ldi	r27, 0x03	; 3
    1856:	0f d0       	rcall	.+30     	; 0x1876 <__ultoa_invert+0x86>
    1858:	c9 f7       	brne	.-14     	; 0x184c <__ultoa_invert+0x5c>
    185a:	f6 cf       	rjmp	.-20     	; 0x1848 <__ultoa_invert+0x58>
    185c:	46 2f       	mov	r20, r22
    185e:	4f 70       	andi	r20, 0x0F	; 15
    1860:	40 5d       	subi	r20, 0xD0	; 208
    1862:	4a 33       	cpi	r20, 0x3A	; 58
    1864:	18 f0       	brcs	.+6      	; 0x186c <__ultoa_invert+0x7c>
    1866:	49 5d       	subi	r20, 0xD9	; 217
    1868:	31 fd       	sbrc	r19, 1
    186a:	40 52       	subi	r20, 0x20	; 32
    186c:	41 93       	st	Z+, r20
    186e:	02 d0       	rcall	.+4      	; 0x1874 <__ultoa_invert+0x84>
    1870:	a9 f7       	brne	.-22     	; 0x185c <__ultoa_invert+0x6c>
    1872:	ea cf       	rjmp	.-44     	; 0x1848 <__ultoa_invert+0x58>
    1874:	b4 e0       	ldi	r27, 0x04	; 4
    1876:	a6 95       	lsr	r26
    1878:	97 95       	ror	r25
    187a:	87 95       	ror	r24
    187c:	77 95       	ror	r23
    187e:	67 95       	ror	r22
    1880:	ba 95       	dec	r27
    1882:	c9 f7       	brne	.-14     	; 0x1876 <__ultoa_invert+0x86>
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	61 05       	cpc	r22, r1
    1888:	71 05       	cpc	r23, r1
    188a:	08 95       	ret
    188c:	9b 01       	movw	r18, r22
    188e:	ac 01       	movw	r20, r24
    1890:	0a 2e       	mov	r0, r26
    1892:	06 94       	lsr	r0
    1894:	57 95       	ror	r21
    1896:	47 95       	ror	r20
    1898:	37 95       	ror	r19
    189a:	27 95       	ror	r18
    189c:	ba 95       	dec	r27
    189e:	c9 f7       	brne	.-14     	; 0x1892 <__ultoa_invert+0xa2>
    18a0:	62 0f       	add	r22, r18
    18a2:	73 1f       	adc	r23, r19
    18a4:	84 1f       	adc	r24, r20
    18a6:	95 1f       	adc	r25, r21
    18a8:	a0 1d       	adc	r26, r0
    18aa:	08 95       	ret

000018ac <_exit>:
    18ac:	f8 94       	cli

000018ae <__stop_program>:
    18ae:	ff cf       	rjmp	.-2      	; 0x18ae <__stop_program>
