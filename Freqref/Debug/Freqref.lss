
Freqref.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000220  00800200  00001632  000016c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000455  00800420  00800420  000018e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00001988  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005246  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a4e  00000000  00000000  00007066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000213b  00000000  00000000  00008ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c2c  00000000  00000000  0000abf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a01  00000000  00000000  0000b81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027f7  00000000  00000000  0000d21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0000fa14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	74 c3       	rjmp	.+1768   	; 0x74a <__vector_24>
      62:	00 00       	nop
      64:	ec c3       	rjmp	.+2008   	; 0x83e <__vector_25>
      66:	00 00       	nop
      68:	12 c4       	rjmp	.+2084   	; 0x88e <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	fd c2       	rjmp	.+1530   	; 0x674 <__vector_30>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4d c4       	rjmp	.+2202   	; 0x92c <__vector_36>
      92:	00 00       	nop
      94:	74 c4       	rjmp	.+2280   	; 0x97e <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	66 c6       	rjmp	.+3276   	; 0xd76 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8c c6       	rjmp	.+3352   	; 0xdd6 <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e6 c4       	rjmp	.+2508   	; 0xa9a <__vector_51>
      ce:	00 00       	nop
      d0:	0d c5       	rjmp	.+2586   	; 0xaec <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	77 c5       	rjmp	.+2798   	; 0xbc8 <__vector_54>
      da:	00 00       	nop
      dc:	9e c5       	rjmp	.+2876   	; 0xc1a <__vector_55>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e3       	ldi	r30, 0x32	; 50
      fc:	f6 e1       	ldi	r31, 0x16	; 22
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 32       	cpi	r26, 0x20	; 32
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	28 e0       	ldi	r18, 0x08	; 8
     110:	a0 e2       	ldi	r26, 0x20	; 32
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 37       	cpi	r26, 0x75	; 117
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	a9 d6       	rcall	.+3410   	; 0xe72 <main>
     120:	0c 94 17 0b 	jmp	0x162e	; 0x162e <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     126:	23 c2       	rjmp	.+1094   	; 0x56e <system_init>
     128:	08 95       	ret

0000012a <printPacket>:
		0x00,0x00,0x00,0x80,0x96,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
		0x00,0x00,0x00,0x00,0x6F,0x00,0x00,0x00,0x29,0xA8
	};

	sendPacket(packet, sizeof(packet));
}
     12a:	8f 92       	push	r8
     12c:	9f 92       	push	r9
     12e:	af 92       	push	r10
     130:	bf 92       	push	r11
     132:	cf 92       	push	r12
     134:	df 92       	push	r13
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	00 d0       	rcall	.+0      	; 0x144 <printPacket+0x1a>
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	06 2f       	mov	r16, r22
     14a:	66 23       	and	r22, r22
     14c:	99 f1       	breq	.+102    	; 0x1b4 <printPacket+0x8a>
     14e:	e8 2e       	mov	r14, r24
     150:	f9 2e       	mov	r15, r25
     152:	10 e0       	ldi	r17, 0x00	; 0
     154:	0f 2e       	mov	r0, r31
     156:	f7 e9       	ldi	r31, 0x97	; 151
     158:	8f 2e       	mov	r8, r31
     15a:	f3 e0       	ldi	r31, 0x03	; 3
     15c:	9f 2e       	mov	r9, r31
     15e:	f0 2d       	mov	r31, r0
     160:	0f 2e       	mov	r0, r31
     162:	f9 ee       	ldi	r31, 0xE9	; 233
     164:	af 2e       	mov	r10, r31
     166:	f2 e0       	ldi	r31, 0x02	; 2
     168:	bf 2e       	mov	r11, r31
     16a:	f0 2d       	mov	r31, r0
     16c:	ce 01       	movw	r24, r28
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	6c 01       	movw	r12, r24
     172:	81 2f       	mov	r24, r17
     174:	8f 70       	andi	r24, 0x0F	; 15
     176:	31 f4       	brne	.+12     	; 0x184 <printPacket+0x5a>
     178:	9f 92       	push	r9
     17a:	8f 92       	push	r8
     17c:	35 d7       	rcall	.+3690   	; 0xfe8 <printf>
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	03 c0       	rjmp	.+6      	; 0x18a <printPacket+0x60>
     184:	80 e2       	ldi	r24, 0x20	; 32
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	42 d7       	rcall	.+3716   	; 0x100e <putchar>
     18a:	f7 01       	movw	r30, r14
     18c:	81 91       	ld	r24, Z+
     18e:	7f 01       	movw	r14, r30
     190:	1f 92       	push	r1
     192:	8f 93       	push	r24
     194:	bf 92       	push	r11
     196:	af 92       	push	r10
     198:	df 92       	push	r13
     19a:	cf 92       	push	r12
     19c:	6d d7       	rcall	.+3802   	; 0x1078 <sprintf>
     19e:	df 92       	push	r13
     1a0:	cf 92       	push	r12
     1a2:	22 d7       	rcall	.+3652   	; 0xfe8 <printf>
     1a4:	1f 5f       	subi	r17, 0xFF	; 255
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	cd bf       	out	0x3d, r28	; 61
     1b0:	01 13       	cpse	r16, r17
     1b2:	df cf       	rjmp	.-66     	; 0x172 <printPacket+0x48>
     1b4:	87 e9       	ldi	r24, 0x97	; 151
     1b6:	93 e0       	ldi	r25, 0x03	; 3
     1b8:	9f 93       	push	r25
     1ba:	8f 93       	push	r24
     1bc:	15 d7       	rcall	.+3626   	; 0xfe8 <printf>
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	df 90       	pop	r13
     1d6:	cf 90       	pop	r12
     1d8:	bf 90       	pop	r11
     1da:	af 90       	pop	r10
     1dc:	9f 90       	pop	r9
     1de:	8f 90       	pop	r8
     1e0:	08 95       	ret

000001e2 <sendPacket>:
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	7c 01       	movw	r14, r24
     1f2:	d6 2e       	mov	r13, r22
     1f4:	66 23       	and	r22, r22
     1f6:	69 f0       	breq	.+26     	; 0x212 <sendPacket+0x30>
     1f8:	ec 01       	movw	r28, r24
     1fa:	0f ef       	ldi	r16, 0xFF	; 255
     1fc:	06 0f       	add	r16, r22
     1fe:	10 e0       	ldi	r17, 0x00	; 0
     200:	0f 5f       	subi	r16, 0xFF	; 255
     202:	1f 4f       	sbci	r17, 0xFF	; 255
     204:	08 0f       	add	r16, r24
     206:	19 1f       	adc	r17, r25
     208:	89 91       	ld	r24, Y+
     20a:	0b d4       	rcall	.+2070   	; 0xa22 <USART_1_write>
     20c:	c0 17       	cp	r28, r16
     20e:	d1 07       	cpc	r29, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <sendPacket+0x26>
     212:	6d 2d       	mov	r22, r13
     214:	c7 01       	movw	r24, r14
     216:	89 df       	rcall	.-238    	; 0x12a <printPacket>
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	1f 91       	pop	r17
     21e:	0f 91       	pop	r16
     220:	ff 90       	pop	r15
     222:	ef 90       	pop	r14
     224:	df 90       	pop	r13
     226:	08 95       	ret

00000228 <disableNmea>:
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	e3 97       	sbiw	r28, 0x33	; 51
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	de bf       	out	0x3e, r29	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	cd bf       	out	0x3d, r28	; 61
     248:	88 e2       	ldi	r24, 0x28	; 40
     24a:	ed e2       	ldi	r30, 0x2D	; 45
     24c:	f2 e0       	ldi	r31, 0x02	; 2
     24e:	de 01       	movw	r26, r28
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	01 90       	ld	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	8a 95       	dec	r24
     258:	e1 f7       	brne	.-8      	; 0x252 <disableNmea+0x2a>
     25a:	8b e0       	ldi	r24, 0x0B	; 11
     25c:	e5 e5       	ldi	r30, 0x55	; 85
     25e:	f2 e0       	ldi	r31, 0x02	; 2
     260:	de 01       	movw	r26, r28
     262:	99 96       	adiw	r26, 0x29	; 41
     264:	01 90       	ld	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	8a 95       	dec	r24
     26a:	e1 f7       	brne	.-8      	; 0x264 <disableNmea+0x3c>
     26c:	ce 01       	movw	r24, r28
     26e:	01 96       	adiw	r24, 0x01	; 1
     270:	7c 01       	movw	r14, r24
     272:	6e 01       	movw	r12, r28
     274:	99 e2       	ldi	r25, 0x29	; 41
     276:	c9 0e       	add	r12, r25
     278:	d1 1c       	adc	r13, r1
     27a:	8e 01       	movw	r16, r28
     27c:	0e 5c       	subi	r16, 0xCE	; 206
     27e:	1f 4f       	sbci	r17, 0xFF	; 255
     280:	14 c0       	rjmp	.+40     	; 0x2aa <disableNmea+0x82>
     282:	91 91       	ld	r25, Z+
     284:	8a a9       	ldd	r24, Y+50	; 0x32
     286:	89 0f       	add	r24, r25
     288:	8a ab       	std	Y+50, r24	; 0x32
     28a:	9b a9       	ldd	r25, Y+51	; 0x33
     28c:	89 0f       	add	r24, r25
     28e:	8b ab       	std	Y+51, r24	; 0x33
     290:	e0 17       	cp	r30, r16
     292:	f1 07       	cpc	r31, r17
     294:	b1 f7       	brne	.-20     	; 0x282 <disableNmea+0x5a>
     296:	6b e0       	ldi	r22, 0x0B	; 11
     298:	ce 01       	movw	r24, r28
     29a:	89 96       	adiw	r24, 0x29	; 41
     29c:	a2 df       	rcall	.-188    	; 0x1e2 <sendPacket>
     29e:	e2 e0       	ldi	r30, 0x02	; 2
     2a0:	ee 0e       	add	r14, r30
     2a2:	f1 1c       	adc	r15, r1
     2a4:	ce 14       	cp	r12, r14
     2a6:	df 04       	cpc	r13, r15
     2a8:	51 f0       	breq	.+20     	; 0x2be <disableNmea+0x96>
     2aa:	f7 01       	movw	r30, r14
     2ac:	80 81       	ld	r24, Z
     2ae:	8f a7       	std	Y+47, r24	; 0x2f
     2b0:	81 81       	ldd	r24, Z+1	; 0x01
     2b2:	88 ab       	std	Y+48, r24	; 0x30
     2b4:	1a aa       	std	Y+50, r1	; 0x32
     2b6:	1b aa       	std	Y+51, r1	; 0x33
     2b8:	fe 01       	movw	r30, r28
     2ba:	bb 96       	adiw	r30, 0x2b	; 43
     2bc:	e2 cf       	rjmp	.-60     	; 0x282 <disableNmea+0x5a>
     2be:	e3 96       	adiw	r28, 0x33	; 51
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	ef 90       	pop	r14
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	08 95       	ret

000002dc <changeFrequency>:
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	2e 97       	sbiw	r28, 0x0e	; 14
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	8e e0       	ldi	r24, 0x0E	; 14
     2f2:	ec e7       	ldi	r30, 0x7C	; 124
     2f4:	f2 e0       	ldi	r31, 0x02	; 2
     2f6:	de 01       	movw	r26, r28
     2f8:	11 96       	adiw	r26, 0x01	; 1
     2fa:	01 90       	ld	r0, Z+
     2fc:	0d 92       	st	X+, r0
     2fe:	8a 95       	dec	r24
     300:	e1 f7       	brne	.-8      	; 0x2fa <changeFrequency+0x1e>
     302:	6e e0       	ldi	r22, 0x0E	; 14
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	6c df       	rcall	.-296    	; 0x1e2 <sendPacket>
     30a:	2e 96       	adiw	r28, 0x0e	; 14
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <disableUnnecessaryChannels>:
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	ac 97       	sbiw	r28, 0x2c	; 44
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	de bf       	out	0x3e, r29	; 62
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	8c e2       	ldi	r24, 0x2C	; 44
     332:	ea e8       	ldi	r30, 0x8A	; 138
     334:	f2 e0       	ldi	r31, 0x02	; 2
     336:	de 01       	movw	r26, r28
     338:	11 96       	adiw	r26, 0x01	; 1
     33a:	01 90       	ld	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	8a 95       	dec	r24
     340:	e1 f7       	brne	.-8      	; 0x33a <disableUnnecessaryChannels+0x1e>
     342:	6c e2       	ldi	r22, 0x2C	; 44
     344:	ce 01       	movw	r24, r28
     346:	01 96       	adiw	r24, 0x01	; 1
     348:	4c df       	rcall	.-360    	; 0x1e2 <sendPacket>
     34a:	ac 96       	adiw	r28, 0x2c	; 44
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <enableNavPvt>:
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	2b 97       	sbiw	r28, 0x0b	; 11
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	8b e0       	ldi	r24, 0x0B	; 11
     372:	e6 eb       	ldi	r30, 0xB6	; 182
     374:	f2 e0       	ldi	r31, 0x02	; 2
     376:	de 01       	movw	r26, r28
     378:	11 96       	adiw	r26, 0x01	; 1
     37a:	01 90       	ld	r0, Z+
     37c:	0d 92       	st	X+, r0
     37e:	8a 95       	dec	r24
     380:	e1 f7       	brne	.-8      	; 0x37a <enableNavPvt+0x1e>
     382:	6b e0       	ldi	r22, 0x0B	; 11
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	2c df       	rcall	.-424    	; 0x1e2 <sendPacket>
     38a:	2b 96       	adiw	r28, 0x0b	; 11
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <isGoodChecksum>:
	for (int i=2; i<sizeof(4 + 84); i++)
	{ 
		CK_A = CK_A + PACKETstore[i];
		CK_B = CK_B + CK_A; 
	}
	return ((CK_A == PACKETstore[4 + 84 + 1]) && (CK_B == PACKETstore[4 + 84 + 2]));
     39c:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <PACKETstore+0x59>
     3a0:	81 11       	cpse	r24, r1
     3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <isGoodChecksum+0x18>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	20 91 6d 08 	lds	r18, 0x086D	; 0x80086d <PACKETstore+0x5a>
     3ac:	22 23       	and	r18, r18
     3ae:	21 f0       	breq	.+8      	; 0x3b8 <isGoodChecksum+0x1c>
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	08 95       	ret
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
}
     3b8:	08 95       	ret

000003ba <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c)
{
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
     3ba:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <__data_start+0x3>
	if (p < 4)     // this looks for PVT messages
     3be:	e4 30       	cpi	r30, 0x04	; 4
     3c0:	78 f4       	brcc	.+30     	; 0x3e0 <IsPacketReady+0x26>
	{
		// are we starting a packet?
		if (c == UBXGPS_HEADER[p])
     3c2:	2e 2f       	mov	r18, r30
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	d9 01       	movw	r26, r18
     3c8:	a6 56       	subi	r26, 0x66	; 102
     3ca:	bc 4f       	sbci	r27, 0xFC	; 252
     3cc:	9c 91       	ld	r25, X
     3ce:	89 13       	cpse	r24, r25
     3d0:	17 c0       	rjmp	.+46     	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			PACKETstore[p++] = c;
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	9e 0f       	add	r25, r30
     3d6:	f9 01       	movw	r30, r18
     3d8:	ed 5e       	subi	r30, 0xED	; 237
     3da:	f7 4f       	sbci	r31, 0xF7	; 247
     3dc:	80 83       	st	Z, r24
     3de:	11 c0       	rjmp	.+34     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		}
	}
	else  // found a packet header, start filling
	{
		//if we are here, we've got some of the right packet.  Lets just try getting all the bytes
		if(p < 4 + 84 + 2)
     3e0:	ea 35       	cpi	r30, 0x5A	; 90
     3e2:	38 f4       	brcc	.+14     	; 0x3f2 <IsPacketReady+0x38>
		{
			PACKETstore[p++] = c;	
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	9e 0f       	add	r25, r30
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	ed 5e       	subi	r30, 0xED	; 237
     3ec:	f7 4f       	sbci	r31, 0xF7	; 247
     3ee:	80 83       	st	Z, r24
     3f0:	08 c0       	rjmp	.+16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		}
		else  // rx packet size completed
		{
			p = 0;
			UbxGpsv.carriagePosition = p;
     3f2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_start+0x3>
			if(isGoodChecksum())
     3f6:	d2 df       	rcall	.-92     	; 0x39c <isGoodChecksum>
     3f8:	89 2b       	or	r24, r25
		{
			PACKETstore[p++] = c;	
		}
		else  // rx packet size completed
		{
			p = 0;
     3fa:	41 f4       	brne	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3fc:	90 e0       	ldi	r25, 0x00	; 0
		{
			PACKETstore[p++] = c;
		}
		else
		{
			p = 0;
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			{
				return true;
			}
		}
	}
	UbxGpsv.carriagePosition = p;
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_start+0x3>
	return false;
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
		{
			p = 0;
			UbxGpsv.carriagePosition = p;
			if(isGoodChecksum())
			{
				return true;
     40a:	08 95       	ret
     40c:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return false;
}
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	08 95       	ret

00000412 <processgps>:

// Read chars from the GPS port
// If there is a PVT packet ready, copy it to the global strct
// **** NOTE ****  This is called from within Timer 4 Interrupt Service Routine every 4.096mS
void processgps(void)
{
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	c7 e6       	ldi	r28, 0x67	; 103
     418:	d8 e0       	ldi	r29, 0x08	; 8
			unsigned char ch;
			ch = USART_3_read();
			USART_1_write(ch);
		}
#endif
		if(IsPacketReady(data))
     41a:	0d c0       	rjmp	.+26     	; 0x436 <processgps+0x24>
     41c:	e9 d2       	rcall	.+1490   	; 0x9f0 <USART_1_read>
     41e:	cd df       	rcall	.-102    	; 0x3ba <IsPacketReady>
     420:	89 2b       	or	r24, r25
     422:	49 f0       	breq	.+18     	; 0x436 <processgps+0x24>
     424:	e9 e1       	ldi	r30, 0x19	; 25
     426:	f8 e0       	ldi	r31, 0x08	; 8
     428:	a3 e6       	ldi	r26, 0x63	; 99
		{
			for(unsigned int i = offset; i<sizeof(NavPvt); i++)
			{
				*((char*)(&NavPvt) + (i-offset)) = PACKETstore[i];		// copy into global struct
     42a:	b7 e0       	ldi	r27, 0x07	; 7
     42c:	81 91       	ld	r24, Z+
			USART_1_write(ch);
		}
#endif
		if(IsPacketReady(data))
		{
			for(unsigned int i = offset; i<sizeof(NavPvt); i++)
     42e:	8d 93       	st	X+, r24
     430:	ec 17       	cp	r30, r28
// **** NOTE ****  This is called from within Timer 4 Interrupt Service Routine every 4.096mS
void processgps(void)
{
	const unsigned char offset =6;
	unsigned char data;
	while (USART_1_is_rx_ready())
     432:	fd 07       	cpc	r31, r29
     434:	d9 f7       	brne	.-10     	; 0x42c <processgps+0x1a>
     436:	d5 d2       	rcall	.+1450   	; 0x9e2 <USART_1_is_rx_ready>
     438:	81 11       	cpse	r24, r1
			{
				*((char*)(&NavPvt) + (i-offset)) = PACKETstore[i];		// copy into global struct
			}
		}
	}
}
     43a:	f0 cf       	rjmp	.-32     	; 0x41c <processgps+0xa>
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <setupneo>:

void setupneo()
{
	
	// Disabling NMEA messages by sending appropriate packets
	printf("Disabling NMEA messages...\n\r");
     442:	8e ee       	ldi	r24, 0xEE	; 238
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
	disableNmea();
     44a:	ce d5       	rcall	.+2972   	; 0xfe8 <printf>
     44c:	ed de       	rcall	.-550    	; 0x228 <disableNmea>

		fastdelay_ms(100); // Little delay before flushing
	}
	#endif
	// 	Set reporting frequency to 1 Sec
	printf("Changing receiving frequency to 1 Sec...\n\r");
     44e:	8b e0       	ldi	r24, 0x0B	; 11
     450:	93 e0       	ldi	r25, 0x03	; 3
     452:	9f 93       	push	r25
	changeFrequency();

	// Disabling unnecessary channels like SBAS or QZSS
	printf("Disabling unnecessary channels...\r\n");
     454:	8f 93       	push	r24
     456:	c8 d5       	rcall	.+2960   	; 0xfe8 <printf>
     458:	41 df       	rcall	.-382    	; 0x2dc <changeFrequency>
	disableUnnecessaryChannels();

	// Enabling NAV-PVT messages
	printf("Enabling NAV-PVT messages...\n\r");
     45a:	86 e3       	ldi	r24, 0x36	; 54
     45c:	93 e0       	ldi	r25, 0x03	; 3
     45e:	dc d5       	rcall	.+3000   	; 0x1018 <puts>
     460:	5d df       	rcall	.-326    	; 0x31c <disableUnnecessaryChannels>
     462:	89 e5       	ldi	r24, 0x59	; 89
	enableNavPvt();
     464:	93 e0       	ldi	r25, 0x03	; 3

	printf("Auto-configuration is complete!\n\r");
     466:	9f 93       	push	r25
     468:	8f 93       	push	r24
     46a:	be d5       	rcall	.+2940   	; 0xfe8 <printf>
     46c:	77 df       	rcall	.-274    	; 0x35c <enableNavPvt>
     46e:	88 e7       	ldi	r24, 0x78	; 120
     470:	93 e0       	ldi	r25, 0x03	; 3

	fastdelay_ms(100); // Little delay before flushing
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	b8 d5       	rcall	.+2928   	; 0xfe8 <printf>
     478:	84 e6       	ldi	r24, 0x64	; 100
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	4c d4       	rcall	.+2200   	; 0xd16 <fastdelay_ms>
     47e:	8d b7       	in	r24, 0x3d	; 61
     480:	9e b7       	in	r25, 0x3e	; 62
     482:	08 96       	adiw	r24, 0x08	; 8
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	9e bf       	out	0x3e, r25	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	8d bf       	out	0x3d, r24	; 61
     48e:	08 95       	ret

00000490 <setndig>:
	return(i);
}

// write a number digit on the LCD to a num object
void setndig(char *id, uint8_t val)
{
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	60 97       	sbiw	r28, 0x10	; 16
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
	int i;
	char msg[16];
	
	sprintf(msg,"%s.val=%1d\xff\xff\xff",id,val);
     4a8:	1f 92       	push	r1
     4aa:	6f 93       	push	r22
     4ac:	9f 93       	push	r25
     4ae:	8f 93       	push	r24
     4b0:	8e e9       	ldi	r24, 0x9E	; 158
     4b2:	93 e0       	ldi	r25, 0x03	; 3
     4b4:	9f 93       	push	r25
     4b6:	8f 93       	push	r24
     4b8:	ce 01       	movw	r24, r28
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	9f 93       	push	r25
     4be:	8f 93       	push	r24
     4c0:	db d5       	rcall	.+2998   	; 0x1078 <sprintf>
	for (i=0; msg[i]; i++)
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	88 23       	and	r24, r24
     4d0:	49 f0       	breq	.+18     	; 0x4e4 <setndig+0x54>
     4d2:	8e 01       	movw	r16, r28
     4d4:	0e 5f       	subi	r16, 0xFE	; 254
	{
		USART_2_write(msg[i]);
     4d6:	1f 4f       	sbci	r17, 0xFF	; 255
     4d8:	3b d3       	rcall	.+1654   	; 0xb50 <USART_2_write>
{
	int i;
	char msg[16];
	
	sprintf(msg,"%s.val=%1d\xff\xff\xff",id,val);
	for (i=0; msg[i]; i++)
     4da:	f8 01       	movw	r30, r16
     4dc:	81 91       	ld	r24, Z+
     4de:	8f 01       	movw	r16, r30
     4e0:	81 11       	cpse	r24, r1
     4e2:	fa cf       	rjmp	.-12     	; 0x4d8 <setndig+0x48>
	{
		USART_2_write(msg[i]);
	}
}
     4e4:	60 96       	adiw	r28, 0x10	; 16
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	08 95       	ret

000004fa <SPI_0_initialization>:
}

void TIMER_1_initialization(void)
{

	TIMER_1_init();
     4fa:	23 98       	cbi	0x04, 3	; 4
     4fc:	2b 98       	cbi	0x05, 3	; 5
     4fe:	22 9a       	sbi	0x04, 2	; 4
     500:	2a 98       	cbi	0x05, 2	; 5
     502:	21 9a       	sbi	0x04, 1	; 4
     504:	29 98       	cbi	0x05, 1	; 5
     506:	20 9a       	sbi	0x04, 0	; 4
     508:	28 98       	cbi	0x05, 0	; 5
     50a:	12 c1       	rjmp	.+548    	; 0x730 <SPI_0_init>
     50c:	08 95       	ret

0000050e <USART_0_initialization>:
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
     50e:	68 98       	cbi	0x0d, 0	; 13
		DDRE &= ~(1 << pin);

		PORTE |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTE &= ~(1 << pin);
     510:	70 98       	cbi	0x0e, 0	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
     512:	69 9a       	sbi	0x0d, 1	; 13
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     514:	71 98       	cbi	0x0e, 1	; 14
     516:	ed c1       	rjmp	.+986    	; 0x8f2 <USART_0_init>
     518:	08 95       	ret

0000051a <USART_1_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     51a:	52 98       	cbi	0x0a, 2	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     51c:	5a 98       	cbi	0x0b, 2	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     51e:	53 9a       	sbi	0x0a, 3	; 10
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_1_init();
     520:	5b 98       	cbi	0x0b, 3	; 11
     522:	9e c2       	rjmp	.+1340   	; 0xa60 <USART_1_init>
     524:	08 95       	ret

00000526 <USART_2_initialization>:
 */
static inline void PORTH_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
     526:	a1 e0       	ldi	r26, 0x01	; 1
     528:	b1 e0       	ldi	r27, 0x01	; 1
     52a:	8c 91       	ld	r24, X
     52c:	8e 7f       	andi	r24, 0xFE	; 254
     52e:	8c 93       	st	X, r24
		DDRH &= ~(1 << pin);

		PORTH |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTH &= ~(1 << pin);
     530:	e2 e0       	ldi	r30, 0x02	; 2
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	80 81       	ld	r24, Z
     536:	8e 7f       	andi	r24, 0xFE	; 254
     538:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRH |= 1 << pin;
     53a:	8c 91       	ld	r24, X
     53c:	82 60       	ori	r24, 0x02	; 2
     53e:	8c 93       	st	X, r24
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
     540:	80 81       	ld	r24, Z
     542:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_2_init();
     544:	80 83       	st	Z, r24
     546:	23 c3       	rjmp	.+1606   	; 0xb8e <USART_2_init>
     548:	08 95       	ret

0000054a <USART_3_initialization>:
 */
static inline void PORTJ_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
     54a:	a4 e0       	ldi	r26, 0x04	; 4
     54c:	b1 e0       	ldi	r27, 0x01	; 1
     54e:	8c 91       	ld	r24, X
     550:	8e 7f       	andi	r24, 0xFE	; 254
     552:	8c 93       	st	X, r24
		DDRJ &= ~(1 << pin);

		PORTJ |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTJ &= ~(1 << pin);
     554:	e5 e0       	ldi	r30, 0x05	; 5
     556:	f1 e0       	ldi	r31, 0x01	; 1
     558:	80 81       	ld	r24, Z
     55a:	8e 7f       	andi	r24, 0xFE	; 254
     55c:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRJ |= 1 << pin;
     55e:	8c 91       	ld	r24, X
     560:	82 60       	ori	r24, 0x02	; 2
     562:	8c 93       	st	X, r24
static inline void PORTJ_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTJ |= 1 << pin;
	} else {
		PORTJ &= ~(1 << pin);
     564:	80 81       	ld	r24, Z
     566:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_3_init();
     568:	80 83       	st	Z, r24
     56a:	a8 c3       	rjmp	.+1872   	; 0xcbc <USART_3_init>
     56c:	08 95       	ret

0000056e <system_init>:
     56e:	8f e3       	ldi	r24, 0x3F	; 63
     570:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
     574:	8f ee       	ldi	r24, 0xEF	; 239
     576:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     57a:	81 b1       	in	r24, 0x01	; 1
     57c:	11 b8       	out	0x01, r1	; 1
     57e:	82 b1       	in	r24, 0x02	; 2
     580:	8f ef       	ldi	r24, 0xFF	; 255
     582:	82 b9       	out	0x02, r24	; 2
     584:	94 b1       	in	r25, 0x04	; 4
     586:	14 b8       	out	0x04, r1	; 4
     588:	95 b1       	in	r25, 0x05	; 5
     58a:	85 b9       	out	0x05, r24	; 5
     58c:	97 b1       	in	r25, 0x07	; 7
     58e:	17 b8       	out	0x07, r1	; 7
     590:	98 b1       	in	r25, 0x08	; 8
     592:	88 b9       	out	0x08, r24	; 8
     594:	9a b1       	in	r25, 0x0a	; 10
     596:	1a b8       	out	0x0a, r1	; 10
     598:	9b b1       	in	r25, 0x0b	; 11
     59a:	8b b9       	out	0x0b, r24	; 11
     59c:	9d b1       	in	r25, 0x0d	; 13
     59e:	1d b8       	out	0x0d, r1	; 13
     5a0:	9e b1       	in	r25, 0x0e	; 14
     5a2:	8e b9       	out	0x0e, r24	; 14
     5a4:	90 b3       	in	r25, 0x10	; 16
     5a6:	10 ba       	out	0x10, r1	; 16
     5a8:	91 b3       	in	r25, 0x11	; 17
     5aa:	81 bb       	out	0x11, r24	; 17
     5ac:	93 b3       	in	r25, 0x13	; 19
     5ae:	90 7c       	andi	r25, 0xC0	; 192
     5b0:	93 bb       	out	0x13, r25	; 19
     5b2:	94 b3       	in	r25, 0x14	; 20
     5b4:	9f 63       	ori	r25, 0x3F	; 63
     5b6:	94 bb       	out	0x14, r25	; 20
     5b8:	e1 e0       	ldi	r30, 0x01	; 1
     5ba:	f1 e0       	ldi	r31, 0x01	; 1
     5bc:	90 81       	ld	r25, Z
     5be:	10 82       	st	Z, r1
     5c0:	e2 e0       	ldi	r30, 0x02	; 2
     5c2:	f1 e0       	ldi	r31, 0x01	; 1
     5c4:	90 81       	ld	r25, Z
     5c6:	80 83       	st	Z, r24
     5c8:	e4 e0       	ldi	r30, 0x04	; 4
     5ca:	f1 e0       	ldi	r31, 0x01	; 1
     5cc:	90 81       	ld	r25, Z
     5ce:	10 82       	st	Z, r1
     5d0:	e5 e0       	ldi	r30, 0x05	; 5
     5d2:	f1 e0       	ldi	r31, 0x01	; 1
     5d4:	90 81       	ld	r25, Z
     5d6:	80 83       	st	Z, r24
     5d8:	e7 e0       	ldi	r30, 0x07	; 7
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	90 81       	ld	r25, Z
     5de:	10 82       	st	Z, r1
     5e0:	e8 e0       	ldi	r30, 0x08	; 8
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
     5e4:	90 81       	ld	r25, Z
     5e6:	80 83       	st	Z, r24
     5e8:	aa e0       	ldi	r26, 0x0A	; 10
     5ea:	b1 e0       	ldi	r27, 0x01	; 1
     5ec:	9c 91       	ld	r25, X
     5ee:	1c 92       	st	X, r1
     5f0:	eb e0       	ldi	r30, 0x0B	; 11
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	90 81       	ld	r25, Z
     5f6:	80 83       	st	Z, r24
     5f8:	0a 9a       	sbi	0x01, 2	; 1
     5fa:	12 98       	cbi	0x02, 2	; 2
     5fc:	0b 9a       	sbi	0x01, 3	; 1
     5fe:	13 98       	cbi	0x02, 3	; 2
     600:	0c 9a       	sbi	0x01, 4	; 1
     602:	14 98       	cbi	0x02, 4	; 2
     604:	0d 9a       	sbi	0x01, 5	; 1
     606:	15 98       	cbi	0x02, 5	; 2
     608:	0e 9a       	sbi	0x01, 6	; 1
     60a:	16 98       	cbi	0x02, 6	; 2
     60c:	0f 9a       	sbi	0x01, 7	; 1
     60e:	17 98       	cbi	0x02, 7	; 2
     610:	38 98       	cbi	0x07, 0	; 7
     612:	40 98       	cbi	0x08, 0	; 8
     614:	39 98       	cbi	0x07, 1	; 7
     616:	41 98       	cbi	0x08, 1	; 8
     618:	3a 98       	cbi	0x07, 2	; 7
     61a:	42 98       	cbi	0x08, 2	; 8
     61c:	3b 98       	cbi	0x07, 3	; 7
     61e:	43 98       	cbi	0x08, 3	; 8
     620:	3c 98       	cbi	0x07, 4	; 7
     622:	44 98       	cbi	0x08, 4	; 8
     624:	3d 98       	cbi	0x07, 5	; 7
     626:	45 98       	cbi	0x08, 5	; 8
     628:	3e 98       	cbi	0x07, 6	; 7
     62a:	46 98       	cbi	0x08, 6	; 8
     62c:	3f 98       	cbi	0x07, 7	; 7
     62e:	47 98       	cbi	0x08, 7	; 8
     630:	8c 91       	ld	r24, X
     632:	81 60       	ori	r24, 0x01	; 1
     634:	8c 93       	st	X, r24
     636:	80 81       	ld	r24, Z
     638:	8e 7f       	andi	r24, 0xFE	; 254
     63a:	80 83       	st	Z, r24
     63c:	8c 91       	ld	r24, X
     63e:	82 60       	ori	r24, 0x02	; 2
     640:	8c 93       	st	X, r24
     642:	80 81       	ld	r24, Z
     644:	82 60       	ori	r24, 0x02	; 2
     646:	80 83       	st	Z, r24
     648:	8c 91       	ld	r24, X
     64a:	84 60       	ori	r24, 0x04	; 4
     64c:	8c 93       	st	X, r24
     64e:	80 81       	ld	r24, Z
     650:	84 60       	ori	r24, 0x04	; 4
     652:	80 83       	st	Z, r24
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	60 e8       	ldi	r22, 0x80	; 128
     658:	81 e6       	ldi	r24, 0x61	; 97
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	61 d0       	rcall	.+194    	; 0x720 <protected_write_io>
     65e:	13 be       	out	0x33, r1	; 51
     660:	15 be       	out	0x35, r1	; 53
     662:	58 d0       	rcall	.+176    	; 0x714 <FLASH_0_init>
     664:	4a df       	rcall	.-364    	; 0x4fa <SPI_0_initialization>
     666:	cb d0       	rcall	.+406    	; 0x7fe <TIMER_0_init>
     668:	d7 d0       	rcall	.+430    	; 0x818 <TIMER_1_init>
     66a:	51 df       	rcall	.-350    	; 0x50e <USART_0_initialization>
     66c:	56 df       	rcall	.-340    	; 0x51a <USART_1_initialization>
     66e:	5b df       	rcall	.-330    	; 0x526 <USART_2_initialization>
     670:	6c cf       	rjmp	.-296    	; 0x54a <USART_3_initialization>
     672:	08 95       	ret

00000674 <__vector_30>:
 *
 * \return Nothing.
 */
void FLASH_0_register_callback(eeprom_write_done_cb_t f)
{
	FLASH_0_desc.cb = f;
     674:	1f 92       	push	r1
     676:	0f 92       	push	r0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	0b b6       	in	r0, 0x3b	; 59
     680:	0f 92       	push	r0
     682:	2f 93       	push	r18
     684:	3f 93       	push	r19
     686:	4f 93       	push	r20
     688:	5f 93       	push	r21
     68a:	6f 93       	push	r22
     68c:	7f 93       	push	r23
     68e:	8f 93       	push	r24
     690:	9f 93       	push	r25
     692:	af 93       	push	r26
     694:	bf 93       	push	r27
     696:	ef 93       	push	r30
     698:	ff 93       	push	r31
     69a:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <__data_end+0x5>
     69e:	81 11       	cpse	r24, r1
     6a0:	0e c0       	rjmp	.+28     	; 0x6be <__vector_30+0x4a>
     6a2:	e0 e2       	ldi	r30, 0x20	; 32
     6a4:	f4 e0       	ldi	r31, 0x04	; 4
     6a6:	10 82       	st	Z, r1
     6a8:	fb 98       	cbi	0x1f, 3	; 31
     6aa:	86 81       	ldd	r24, Z+6	; 0x06
     6ac:	97 81       	ldd	r25, Z+7	; 0x07
     6ae:	89 2b       	or	r24, r25
     6b0:	f1 f0       	breq	.+60     	; 0x6ee <__vector_30+0x7a>
     6b2:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <__data_end+0x6>
     6b6:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <__data_end+0x7>
     6ba:	19 95       	eicall
     6bc:	18 c0       	rjmp	.+48     	; 0x6ee <__vector_30+0x7a>
     6be:	e0 e2       	ldi	r30, 0x20	; 32
     6c0:	f4 e0       	ldi	r31, 0x04	; 4
     6c2:	81 81       	ldd	r24, Z+1	; 0x01
     6c4:	92 81       	ldd	r25, Z+2	; 0x02
     6c6:	9c 01       	movw	r18, r24
     6c8:	2f 5f       	subi	r18, 0xFF	; 255
     6ca:	3f 4f       	sbci	r19, 0xFF	; 255
     6cc:	32 83       	std	Z+2, r19	; 0x02
     6ce:	21 83       	std	Z+1, r18	; 0x01
     6d0:	92 bd       	out	0x22, r25	; 34
     6d2:	81 bd       	out	0x21, r24	; 33
     6d4:	a3 81       	ldd	r26, Z+3	; 0x03
     6d6:	b4 81       	ldd	r27, Z+4	; 0x04
     6d8:	cd 01       	movw	r24, r26
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	94 83       	std	Z+4, r25	; 0x04
     6de:	83 83       	std	Z+3, r24	; 0x03
     6e0:	8c 91       	ld	r24, X
     6e2:	80 bd       	out	0x20, r24	; 32
     6e4:	85 81       	ldd	r24, Z+5	; 0x05
     6e6:	81 50       	subi	r24, 0x01	; 1
     6e8:	85 83       	std	Z+5, r24	; 0x05
     6ea:	fa 9a       	sbi	0x1f, 2	; 31
     6ec:	f9 9a       	sbi	0x1f, 1	; 31
     6ee:	ff 91       	pop	r31
     6f0:	ef 91       	pop	r30
     6f2:	bf 91       	pop	r27
     6f4:	af 91       	pop	r26
     6f6:	9f 91       	pop	r25
     6f8:	8f 91       	pop	r24
     6fa:	7f 91       	pop	r23
     6fc:	6f 91       	pop	r22
     6fe:	5f 91       	pop	r21
     700:	4f 91       	pop	r20
     702:	3f 91       	pop	r19
     704:	2f 91       	pop	r18
     706:	0f 90       	pop	r0
     708:	0b be       	out	0x3b, r0	; 59
     70a:	0f 90       	pop	r0
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	0f 90       	pop	r0
     710:	1f 90       	pop	r1
     712:	18 95       	reti

00000714 <FLASH_0_init>:
	//		 | 0 << RWWSRE /* Read-While-Write Section Enable: disabled */
	//		 | 0 << SIGRD /* Signature Row Read: disabled */
	//		 | 0 << RWWSB /* Read-While-Write Busy: disabled */
	//		 | 0 << SPMIE; /* SPM Interrupt Enable: disabled */

	FLASH_0_desc.cb = NULL;
     714:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <__data_end+0x7>
     718:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <__data_end+0x6>
	return 0;
}
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	08 95       	ret

00000720 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     720:	2f b7       	in	r18, 0x3f	; 63
	cli
     722:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     724:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     726:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     728:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     72a:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     72c:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     72e:	08 95       	ret

00000730 <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
     730:	e4 e6       	ldi	r30, 0x64	; 100
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	8b 7f       	andi	r24, 0xFB	; 251
     738:	80 83       	st	Z, r24
     73a:	81 e5       	ldi	r24, 0x51	; 81
     73c:	8c bd       	out	0x2c, r24	; 44
     73e:	e8 e2       	ldi	r30, 0x28	; 40
     740:	f4 e0       	ldi	r31, 0x04	; 4
     742:	10 82       	st	Z, r1
     744:	16 82       	std	Z+6, r1	; 0x06
     746:	15 82       	std	Z+5, r1	; 0x05
     748:	08 95       	ret

0000074a <__vector_24>:
}

ISR(SPI_STC_vect)
{
     74a:	1f 92       	push	r1
     74c:	0f 92       	push	r0
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	0f 92       	push	r0
     752:	11 24       	eor	r1, r1
     754:	0b b6       	in	r0, 0x3b	; 59
     756:	0f 92       	push	r0
     758:	2f 93       	push	r18
     75a:	3f 93       	push	r19
     75c:	4f 93       	push	r20
     75e:	5f 93       	push	r21
     760:	6f 93       	push	r22
     762:	7f 93       	push	r23
     764:	8f 93       	push	r24
     766:	9f 93       	push	r25
     768:	af 93       	push	r26
     76a:	bf 93       	push	r27
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
     774:	9e b5       	in	r25, 0x2e	; 46
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
     776:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <SPI_0_desc+0x4>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	11 f1       	breq	.+68     	; 0x7c2 <__vector_24+0x78>
		*SPI_0_desc.data = rdata;
     77e:	c8 e2       	ldi	r28, 0x28	; 40
     780:	d4 e0       	ldi	r29, 0x04	; 4
     782:	a9 81       	ldd	r26, Y+1	; 0x01
     784:	ba 81       	ldd	r27, Y+2	; 0x02
     786:	fd 01       	movw	r30, r26
     788:	91 93       	st	Z+, r25
	}

	SPI_0_desc.data++;
     78a:	fa 83       	std	Y+2, r31	; 0x02
     78c:	e9 83       	std	Y+1, r30	; 0x01

	if (SPI_0_desc.type != SPI_READ)
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	19 f0       	breq	.+6      	; 0x798 <__vector_24+0x4e>
		wdata = *SPI_0_desc.data;
     792:	11 96       	adiw	r26, 0x01	; 1
     794:	9c 91       	ld	r25, X
     796:	01 c0       	rjmp	.+2      	; 0x79a <__vector_24+0x50>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
	uint8_t wdata = 0;
     798:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
     79a:	e8 e2       	ldi	r30, 0x28	; 40
     79c:	f4 e0       	ldi	r31, 0x04	; 4
     79e:	83 81       	ldd	r24, Z+3	; 0x03
     7a0:	81 50       	subi	r24, 0x01	; 1
     7a2:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
     7a4:	88 23       	and	r24, r24
     7a6:	11 f0       	breq	.+4      	; 0x7ac <__vector_24+0x62>
		// more data to send, send a byte
		SPDR = wdata;
     7a8:	9e bd       	out	0x2e, r25	; 46
     7aa:	14 c0       	rjmp	.+40     	; 0x7d4 <__vector_24+0x8a>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
     7ac:	e8 e2       	ldi	r30, 0x28	; 40
     7ae:	f4 e0       	ldi	r31, 0x04	; 4
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
     7b4:	05 80       	ldd	r0, Z+5	; 0x05
     7b6:	f6 81       	ldd	r31, Z+6	; 0x06
     7b8:	e0 2d       	mov	r30, r0
     7ba:	30 97       	sbiw	r30, 0x00	; 0
     7bc:	59 f0       	breq	.+22     	; 0x7d4 <__vector_24+0x8a>
			SPI_0_desc.cb();
     7be:	19 95       	eicall
		}
	}
}
     7c0:	09 c0       	rjmp	.+18     	; 0x7d4 <__vector_24+0x8a>
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
		*SPI_0_desc.data = rdata;
	}

	SPI_0_desc.data++;
     7c2:	e8 e2       	ldi	r30, 0x28	; 40
     7c4:	f4 e0       	ldi	r31, 0x04	; 4
     7c6:	a1 81       	ldd	r26, Z+1	; 0x01
     7c8:	b2 81       	ldd	r27, Z+2	; 0x02
     7ca:	cd 01       	movw	r24, r26
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	92 83       	std	Z+2, r25	; 0x02
     7d0:	81 83       	std	Z+1, r24	; 0x01
     7d2:	df cf       	rjmp	.-66     	; 0x792 <__vector_24+0x48>
		SPI_0_desc.status = SPI_DONE;
		if (SPI_0_desc.cb != NULL) {
			SPI_0_desc.cb();
		}
	}
}
     7d4:	ff 91       	pop	r31
     7d6:	ef 91       	pop	r30
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	0f 90       	pop	r0
     7f2:	0b be       	out	0x3b, r0	; 59
     7f4:	0f 90       	pop	r0
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	0f 90       	pop	r0
     7fa:	1f 90       	pop	r1
     7fc:	18 95       	reti

000007fe <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC4 */
	PRR1 &= ~(1 << PRTIM4);
     7fe:	e5 e6       	ldi	r30, 0x65	; 101
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	8f 7e       	andi	r24, 0xEF	; 239
     806:	80 83       	st	Z, r24

	// TCCR4A = (0 << COM4A1) | (0 << COM4A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM4B1) | (0 << COM4B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM41) | (0 << WGM40); /* TC16 Mode 0 Normal */

	TCCR4B = (0 << WGM43) | (0 << WGM42)                /* TC16 Mode 0 Normal */
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

	// OCR4A = 0; /* Output compare A: 0 */

	// OCR4B = 0; /* Output compare B: 0 */

	TIMSK4 = 0 << OCIE4B   /* Output Compare B Match Interrupt Enable: disabled */
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	         | 1 << OCIE4A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE4  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE4; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	08 95       	ret

00000818 <TIMER_1_init>:
 */
int8_t TIMER_1_init()
{

	/* Enable TC5 */
	PRR1 &= ~(1 << PRTIM5);
     818:	e5 e6       	ldi	r30, 0x65	; 101
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	8f 7d       	andi	r24, 0xDF	; 223
     820:	80 83       	st	Z, r24

	// TCCR5A = (0 << COM5A1) | (0 << COM5A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM5B1) | (0 << COM5B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM51) | (0 << WGM50); /* TC16 Mode 0 Normal */

	TCCR5B = (0 << WGM53) | (0 << WGM52)                /* TC16 Mode 0 Normal */
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
	         | 0 << ICES5                               /* Input Capture Edge Select: disabled */
	         | (0 << CS52) | (0 << CS51) | (1 << CS50); /* No prescaling */

	// ICR5 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR5A = 16000; /* Output compare A: 16000 */
     828:	80 e8       	ldi	r24, 0x80	; 128
     82a:	9e e3       	ldi	r25, 0x3E	; 62
     82c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     830:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

	// OCR5B = 0; /* Output compare B: 0 */

	TIMSK5 = 0 << OCIE5B   /* Output Compare B Match Interrupt Enable: disabled */
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
	         | 1 << OCIE5A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE5  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE5; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	08 95       	ret

0000083e <__vector_25>:
	USART_3_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_3_rxbuf[tmptail];
}
     83e:	1f 92       	push	r1
     840:	0f 92       	push	r0
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	0f 92       	push	r0
     846:	11 24       	eor	r1, r1
     848:	0b b6       	in	r0, 0x3b	; 59
     84a:	0f 92       	push	r0
     84c:	8f 93       	push	r24
     84e:	9f 93       	push	r25
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
     854:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     858:	e0 91 56 06 	lds	r30, 0x0656	; 0x800656 <USART_0_rx_head>
     85c:	ef 5f       	subi	r30, 0xFF	; 255
     85e:	e0 93 56 06 	sts	0x0656, r30	; 0x800656 <USART_0_rx_head>
     862:	90 91 55 06 	lds	r25, 0x0655	; 0x800655 <USART_0_rx_tail>
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	e9 5a       	subi	r30, 0xA9	; 169
     86a:	f9 4f       	sbci	r31, 0xF9	; 249
     86c:	80 83       	st	Z, r24
     86e:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <USART_0_rx_elements>
     872:	8f 5f       	subi	r24, 0xFF	; 255
     874:	80 93 54 06 	sts	0x0654, r24	; 0x800654 <USART_0_rx_elements>
     878:	ff 91       	pop	r31
     87a:	ef 91       	pop	r30
     87c:	9f 91       	pop	r25
     87e:	8f 91       	pop	r24
     880:	0f 90       	pop	r0
     882:	0b be       	out	0x3b, r0	; 59
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	18 95       	reti

0000088e <__vector_26>:
     88e:	1f 92       	push	r1
     890:	0f 92       	push	r0
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	0f 92       	push	r0
     896:	11 24       	eor	r1, r1
     898:	0b b6       	in	r0, 0x3b	; 59
     89a:	0f 92       	push	r0
     89c:	8f 93       	push	r24
     89e:	ef 93       	push	r30
     8a0:	ff 93       	push	r31
     8a2:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <USART_0_tx_elements>
     8a6:	88 23       	and	r24, r24
     8a8:	89 f0       	breq	.+34     	; 0x8cc <__vector_26+0x3e>
     8aa:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <USART_0_tx_tail>
     8ae:	ef 5f       	subi	r30, 0xFF	; 255
     8b0:	ef 70       	andi	r30, 0x0F	; 15
     8b2:	e0 93 42 06 	sts	0x0642, r30	; 0x800642 <USART_0_tx_tail>
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	ec 5b       	subi	r30, 0xBC	; 188
     8ba:	f9 4f       	sbci	r31, 0xF9	; 249
     8bc:	80 81       	ld	r24, Z
     8be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     8c2:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <USART_0_tx_elements>
     8c6:	81 50       	subi	r24, 0x01	; 1
     8c8:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <USART_0_tx_elements>
     8cc:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <USART_0_tx_elements>
     8d0:	81 11       	cpse	r24, r1
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <__vector_26+0x50>
     8d4:	e1 ec       	ldi	r30, 0xC1	; 193
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	8f 7d       	andi	r24, 0xDF	; 223
     8dc:	80 83       	st	Z, r24
     8de:	ff 91       	pop	r31
     8e0:	ef 91       	pop	r30
     8e2:	8f 91       	pop	r24
     8e4:	0f 90       	pop	r0
     8e6:	0b be       	out	0x3b, r0	; 59
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti

000008f2 <USART_0_init>:
     8f2:	e4 e6       	ldi	r30, 0x64	; 100
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	8d 7f       	andi	r24, 0xFD	; 253
     8fa:	80 83       	st	Z, r24
     8fc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     900:	87 e6       	ldi	r24, 0x67	; 103
     902:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     906:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     90a:	88 e9       	ldi	r24, 0x98	; 152
     90c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     910:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <USART_0_rx_tail>
     914:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <USART_0_rx_head>
     918:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <USART_0_rx_elements>
     91c:	10 92 42 06 	sts	0x0642, r1	; 0x800642 <USART_0_tx_tail>
     920:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <USART_0_tx_head>
     924:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <USART_0_tx_elements>
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	08 95       	ret

0000092c <__vector_36>:
     92c:	1f 92       	push	r1
     92e:	0f 92       	push	r0
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	0f 92       	push	r0
     934:	11 24       	eor	r1, r1
     936:	0b b6       	in	r0, 0x3b	; 59
     938:	0f 92       	push	r0
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	ef 93       	push	r30
     940:	ff 93       	push	r31
     942:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     946:	e0 91 c0 05 	lds	r30, 0x05C0	; 0x8005c0 <USART_1_rx_head>
     94a:	ef 5f       	subi	r30, 0xFF	; 255
     94c:	ef 77       	andi	r30, 0x7F	; 127
     94e:	e0 93 c0 05 	sts	0x05C0, r30	; 0x8005c0 <USART_1_rx_head>
     952:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <USART_1_rx_tail>
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	ef 53       	subi	r30, 0x3F	; 63
     95a:	fa 4f       	sbci	r31, 0xFA	; 250
     95c:	80 83       	st	Z, r24
     95e:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <USART_1_rx_elements>
     962:	8f 5f       	subi	r24, 0xFF	; 255
     964:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <USART_1_rx_elements>
     968:	ff 91       	pop	r31
     96a:	ef 91       	pop	r30
     96c:	9f 91       	pop	r25
     96e:	8f 91       	pop	r24
     970:	0f 90       	pop	r0
     972:	0b be       	out	0x3b, r0	; 59
     974:	0f 90       	pop	r0
     976:	0f be       	out	0x3f, r0	; 63
     978:	0f 90       	pop	r0
     97a:	1f 90       	pop	r1
     97c:	18 95       	reti

0000097e <__vector_37>:
     97e:	1f 92       	push	r1
     980:	0f 92       	push	r0
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	0f 92       	push	r0
     986:	11 24       	eor	r1, r1
     988:	0b b6       	in	r0, 0x3b	; 59
     98a:	0f 92       	push	r0
     98c:	8f 93       	push	r24
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31
     992:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <USART_1_tx_elements>
     996:	88 23       	and	r24, r24
     998:	89 f0       	breq	.+34     	; 0x9bc <__vector_37+0x3e>
     99a:	e0 91 ac 05 	lds	r30, 0x05AC	; 0x8005ac <USART_1_tx_tail>
     99e:	ef 5f       	subi	r30, 0xFF	; 255
     9a0:	ef 70       	andi	r30, 0x0F	; 15
     9a2:	e0 93 ac 05 	sts	0x05AC, r30	; 0x8005ac <USART_1_tx_tail>
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	e2 55       	subi	r30, 0x52	; 82
     9aa:	fa 4f       	sbci	r31, 0xFA	; 250
     9ac:	80 81       	ld	r24, Z
     9ae:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     9b2:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <USART_1_tx_elements>
     9b6:	81 50       	subi	r24, 0x01	; 1
     9b8:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <USART_1_tx_elements>
     9bc:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <USART_1_tx_elements>
     9c0:	81 11       	cpse	r24, r1
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <__vector_37+0x50>
     9c4:	e9 ec       	ldi	r30, 0xC9	; 201
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 81       	ld	r24, Z
     9ca:	8f 7d       	andi	r24, 0xDF	; 223
     9cc:	80 83       	st	Z, r24
     9ce:	ff 91       	pop	r31
     9d0:	ef 91       	pop	r30
     9d2:	8f 91       	pop	r24
     9d4:	0f 90       	pop	r0
     9d6:	0b be       	out	0x3b, r0	; 59
     9d8:	0f 90       	pop	r0
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	0f 90       	pop	r0
     9de:	1f 90       	pop	r1
     9e0:	18 95       	reti

000009e2 <USART_1_is_rx_ready>:
     9e2:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <USART_1_rx_elements>
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	91 11       	cpse	r25, r1
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <USART_1_is_rx_ready+0xc>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	08 95       	ret

000009f0 <USART_1_read>:
     9f0:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <USART_1_rx_elements>
     9f4:	88 23       	and	r24, r24
     9f6:	e1 f3       	breq	.-8      	; 0x9f0 <USART_1_read>
     9f8:	e0 91 bf 05 	lds	r30, 0x05BF	; 0x8005bf <USART_1_rx_tail>
     9fc:	ef 5f       	subi	r30, 0xFF	; 255
     9fe:	ef 77       	andi	r30, 0x7F	; 127
     a00:	e0 93 bf 05 	sts	0x05BF, r30	; 0x8005bf <USART_1_rx_tail>
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	0f 92       	push	r0
     a0a:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <USART_1_rx_elements>
     a0e:	81 50       	subi	r24, 0x01	; 1
     a10:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <USART_1_rx_elements>
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	ef 53       	subi	r30, 0x3F	; 63
     a1c:	fa 4f       	sbci	r31, 0xFA	; 250
     a1e:	80 81       	ld	r24, Z
     a20:	08 95       	ret

00000a22 <USART_1_write>:
     a22:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <USART_1_tx_head>
     a26:	2f 5f       	subi	r18, 0xFF	; 255
     a28:	2f 70       	andi	r18, 0x0F	; 15
     a2a:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <USART_1_tx_elements>
     a2e:	90 31       	cpi	r25, 0x10	; 16
     a30:	e1 f3       	breq	.-8      	; 0xa2a <USART_1_write+0x8>
     a32:	e2 2f       	mov	r30, r18
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	e2 55       	subi	r30, 0x52	; 82
     a38:	fa 4f       	sbci	r31, 0xFA	; 250
     a3a:	80 83       	st	Z, r24
     a3c:	20 93 ad 05 	sts	0x05AD, r18	; 0x8005ad <USART_1_tx_head>
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	0f 92       	push	r0
     a46:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <USART_1_tx_elements>
     a4a:	8f 5f       	subi	r24, 0xFF	; 255
     a4c:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <USART_1_tx_elements>
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	e9 ec       	ldi	r30, 0xC9	; 201
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	80 62       	ori	r24, 0x20	; 32
     a5c:	80 83       	st	Z, r24
     a5e:	08 95       	ret

00000a60 <USART_1_init>:
     a60:	e5 e6       	ldi	r30, 0x65	; 101
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	80 83       	st	Z, r24
     a6a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     a6e:	87 e6       	ldi	r24, 0x67	; 103
     a70:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     a74:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     a78:	88 e9       	ldi	r24, 0x98	; 152
     a7a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     a7e:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <USART_1_rx_tail>
     a82:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <USART_1_rx_head>
     a86:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <USART_1_rx_elements>
     a8a:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <USART_1_tx_tail>
     a8e:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <USART_1_tx_head>
     a92:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <USART_1_tx_elements>
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	08 95       	ret

00000a9a <__vector_51>:
     a9a:	1f 92       	push	r1
     a9c:	0f 92       	push	r0
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	0f 92       	push	r0
     aa2:	11 24       	eor	r1, r1
     aa4:	0b b6       	in	r0, 0x3b	; 59
     aa6:	0f 92       	push	r0
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	ef 93       	push	r30
     aae:	ff 93       	push	r31
     ab0:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     ab4:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <USART_2_rx_head>
     ab8:	ef 5f       	subi	r30, 0xFF	; 255
     aba:	ef 71       	andi	r30, 0x1F	; 31
     abc:	e0 93 8a 05 	sts	0x058A, r30	; 0x80058a <USART_2_rx_head>
     ac0:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <USART_2_rx_tail>
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	e5 57       	subi	r30, 0x75	; 117
     ac8:	fa 4f       	sbci	r31, 0xFA	; 250
     aca:	80 83       	st	Z, r24
     acc:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <USART_2_rx_elements>
     ad0:	8f 5f       	subi	r24, 0xFF	; 255
     ad2:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <USART_2_rx_elements>
     ad6:	ff 91       	pop	r31
     ad8:	ef 91       	pop	r30
     ada:	9f 91       	pop	r25
     adc:	8f 91       	pop	r24
     ade:	0f 90       	pop	r0
     ae0:	0b be       	out	0x3b, r0	; 59
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <__vector_52>:
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	0b b6       	in	r0, 0x3b	; 59
     af8:	0f 92       	push	r0
     afa:	8f 93       	push	r24
     afc:	ef 93       	push	r30
     afe:	ff 93       	push	r31
     b00:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <USART_2_tx_elements>
     b04:	88 23       	and	r24, r24
     b06:	89 f0       	breq	.+34     	; 0xb2a <__vector_52+0x3e>
     b08:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <USART_2_tx_tail>
     b0c:	ef 5f       	subi	r30, 0xFF	; 255
     b0e:	ef 70       	andi	r30, 0x0F	; 15
     b10:	e0 93 76 05 	sts	0x0576, r30	; 0x800576 <USART_2_tx_tail>
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	e8 58       	subi	r30, 0x88	; 136
     b18:	fa 4f       	sbci	r31, 0xFA	; 250
     b1a:	80 81       	ld	r24, Z
     b1c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     b20:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <USART_2_tx_elements>
     b24:	81 50       	subi	r24, 0x01	; 1
     b26:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <USART_2_tx_elements>
     b2a:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <USART_2_tx_elements>
     b2e:	81 11       	cpse	r24, r1
     b30:	05 c0       	rjmp	.+10     	; 0xb3c <__vector_52+0x50>
     b32:	e1 ed       	ldi	r30, 0xD1	; 209
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	8f 7d       	andi	r24, 0xDF	; 223
     b3a:	80 83       	st	Z, r24
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	8f 91       	pop	r24
     b42:	0f 90       	pop	r0
     b44:	0b be       	out	0x3b, r0	; 59
     b46:	0f 90       	pop	r0
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	0f 90       	pop	r0
     b4c:	1f 90       	pop	r1
     b4e:	18 95       	reti

00000b50 <USART_2_write>:
     b50:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <USART_2_tx_head>
     b54:	2f 5f       	subi	r18, 0xFF	; 255
     b56:	2f 70       	andi	r18, 0x0F	; 15
     b58:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <USART_2_tx_elements>
     b5c:	90 31       	cpi	r25, 0x10	; 16
     b5e:	e1 f3       	breq	.-8      	; 0xb58 <USART_2_write+0x8>
     b60:	e2 2f       	mov	r30, r18
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	e8 58       	subi	r30, 0x88	; 136
     b66:	fa 4f       	sbci	r31, 0xFA	; 250
     b68:	80 83       	st	Z, r24
     b6a:	20 93 77 05 	sts	0x0577, r18	; 0x800577 <USART_2_tx_head>
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	0f 92       	push	r0
     b74:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <USART_2_tx_elements>
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <USART_2_tx_elements>
     b7e:	0f 90       	pop	r0
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	e1 ed       	ldi	r30, 0xD1	; 209
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	80 62       	ori	r24, 0x20	; 32
     b8a:	80 83       	st	Z, r24
     b8c:	08 95       	ret

00000b8e <USART_2_init>:
     b8e:	e5 e6       	ldi	r30, 0x65	; 101
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	8d 7f       	andi	r24, 0xFD	; 253
     b96:	80 83       	st	Z, r24
     b98:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     b9c:	87 e6       	ldi	r24, 0x67	; 103
     b9e:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     ba2:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     ba6:	88 e9       	ldi	r24, 0x98	; 152
     ba8:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     bac:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <USART_2_rx_tail>
     bb0:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <USART_2_rx_head>
     bb4:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <USART_2_rx_elements>
     bb8:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <USART_2_tx_tail>
     bbc:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <USART_2_tx_head>
     bc0:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <USART_2_tx_elements>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	08 95       	ret

00000bc8 <__vector_54>:
     bc8:	1f 92       	push	r1
     bca:	0f 92       	push	r0
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	0b b6       	in	r0, 0x3b	; 59
     bd4:	0f 92       	push	r0
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
     bda:	ef 93       	push	r30
     bdc:	ff 93       	push	r31
     bde:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     be2:	e0 91 34 05 	lds	r30, 0x0534	; 0x800534 <USART_3_rx_head>
     be6:	ef 5f       	subi	r30, 0xFF	; 255
     be8:	ef 73       	andi	r30, 0x3F	; 63
     bea:	e0 93 34 05 	sts	0x0534, r30	; 0x800534 <USART_3_rx_head>
     bee:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <USART_3_rx_tail>
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	eb 5c       	subi	r30, 0xCB	; 203
     bf6:	fa 4f       	sbci	r31, 0xFA	; 250
     bf8:	80 83       	st	Z, r24
     bfa:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <USART_3_rx_elements>
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <USART_3_rx_elements>
     c04:	ff 91       	pop	r31
     c06:	ef 91       	pop	r30
     c08:	9f 91       	pop	r25
     c0a:	8f 91       	pop	r24
     c0c:	0f 90       	pop	r0
     c0e:	0b be       	out	0x3b, r0	; 59
     c10:	0f 90       	pop	r0
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	0f 90       	pop	r0
     c16:	1f 90       	pop	r1
     c18:	18 95       	reti

00000c1a <__vector_55>:
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
     c24:	0b b6       	in	r0, 0x3b	; 59
     c26:	0f 92       	push	r0
     c28:	8f 93       	push	r24
     c2a:	ef 93       	push	r30
     c2c:	ff 93       	push	r31
     c2e:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <USART_3_tx_elements>
     c32:	88 23       	and	r24, r24
     c34:	81 f0       	breq	.+32     	; 0xc56 <__vector_55+0x3c>
     c36:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <USART_3_tx_tail>
     c3a:	ef 5f       	subi	r30, 0xFF	; 255
     c3c:	e0 93 30 04 	sts	0x0430, r30	; 0x800430 <USART_3_tx_tail>
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	ee 5c       	subi	r30, 0xCE	; 206
     c44:	fb 4f       	sbci	r31, 0xFB	; 251
     c46:	80 81       	ld	r24, Z
     c48:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     c4c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <USART_3_tx_elements>
     c50:	81 50       	subi	r24, 0x01	; 1
     c52:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <USART_3_tx_elements>
     c56:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <USART_3_tx_elements>
     c5a:	81 11       	cpse	r24, r1
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <__vector_55+0x4e>
     c5e:	e1 e3       	ldi	r30, 0x31	; 49
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	80 81       	ld	r24, Z
     c64:	8f 7d       	andi	r24, 0xDF	; 223
     c66:	80 83       	st	Z, r24
     c68:	ff 91       	pop	r31
     c6a:	ef 91       	pop	r30
     c6c:	8f 91       	pop	r24
     c6e:	0f 90       	pop	r0
     c70:	0b be       	out	0x3b, r0	; 59
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <USART_3_write>:
void USART_3_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_3_tx_head + 1) & USART_3_TX_BUFFER_MASK;
     c7c:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <USART_3_tx_head>
     c80:	9f 5f       	subi	r25, 0xFF	; 255
	/* Wait for free space in buffer */
	while (USART_3_tx_elements == USART_3_TX_BUFFER_SIZE)
     c82:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <USART_3_tx_elements>
		;
	/* Store data in buffer */
	USART_3_txbuf[tmphead] = data;
     c86:	e9 2f       	mov	r30, r25
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	ee 5c       	subi	r30, 0xCE	; 206
     c8c:	fb 4f       	sbci	r31, 0xFB	; 251
     c8e:	80 83       	st	Z, r24
	/* Store new index */
	USART_3_tx_head = tmphead;
     c90:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <USART_3_tx_head>
	ENTER_CRITICAL(W);
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	0f 92       	push	r0
	USART_3_tx_elements++;
     c9a:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <USART_3_tx_elements>
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <USART_3_tx_elements>
	EXIT_CRITICAL(W);
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR3B |= (1 << UDRIE3);
     ca8:	e1 e3       	ldi	r30, 0x31	; 49
     caa:	f1 e0       	ldi	r31, 0x01	; 1
     cac:	80 81       	ld	r24, Z
     cae:	80 62       	ori	r24, 0x20	; 32
     cb0:	80 83       	st	Z, r24
     cb2:	08 95       	ret

00000cb4 <USART_3_printCHAR>:
     cb4:	e3 df       	rcall	.-58     	; 0xc7c <USART_3_write>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	08 95       	ret

00000cbc <USART_3_init>:
     cbc:	e5 e6       	ldi	r30, 0x65	; 101
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8b 7f       	andi	r24, 0xFB	; 251
     cc4:	80 83       	st	Z, r24
     cc6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     cca:	87 e6       	ldi	r24, 0x67	; 103
     ccc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     cd0:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     cd4:	88 e9       	ldi	r24, 0x98	; 152
     cd6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     cda:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <USART_3_rx_tail>
     cde:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <USART_3_rx_head>
     ce2:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <USART_3_rx_elements>
     ce6:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <USART_3_tx_tail>
     cea:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <USART_3_tx_head>
     cee:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <USART_3_tx_elements>
     cf2:	8a e0       	ldi	r24, 0x0A	; 10
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	90 93 72 08 	sts	0x0872, r25	; 0x800872 <__iob+0x3>
     cfa:	80 93 71 08 	sts	0x0871, r24	; 0x800871 <__iob+0x2>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	08 95       	ret

00000d02 <fastmsectime>:
			 {
				 return;
			 }
		 }
	 }
 }
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	0f 92       	push	r0
     d08:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <m4sectimer>
     d0c:	90 91 62 07 	lds	r25, 0x0762	; 0x800762 <m4sectimer+0x1>
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	08 95       	ret

00000d16 <fastdelay_ms>:

 // Uses Hardware timer 4 which is set to 4.096mS interrupt
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <fastdelay_ms+0x6>
     d1c:	1f 92       	push	r1
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	0f 92       	push	r0
	 currentms = m4sectimer;
     d28:	20 91 61 07 	lds	r18, 0x0761	; 0x800761 <m4sectimer>
     d2c:	30 91 62 07 	lds	r19, 0x0762	; 0x800762 <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     d30:	0f 90       	pop	r0
     d32:	0f be       	out	0x3f, r0	; 63
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
     d34:	3c 83       	std	Y+4, r19	; 0x04
     d36:	2b 83       	std	Y+3, r18	; 0x03
		 k = j + (uint16_t)count;
     d38:	2b 81       	ldd	r18, Y+3	; 0x03
     d3a:	3c 81       	ldd	r19, Y+4	; 0x04
     d3c:	82 0f       	add	r24, r18
     d3e:	93 1f       	adc	r25, r19
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	89 83       	std	Y+1, r24	; 0x01

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	0f 92       	push	r0
	 currentms = m4sectimer;
     d4a:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <m4sectimer>
     d4e:	90 91 62 07 	lds	r25, 0x0762	; 0x800762 <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
		 k = j + (uint16_t)count;
		 while(1) {
			 j = fastmsectime();
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
			 if (j >= k)
     d5a:	2b 81       	ldd	r18, Y+3	; 0x03
     d5c:	3c 81       	ldd	r19, Y+4	; 0x04
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	70 f3       	brcs	.-36     	; 0xd44 <fastdelay_ms+0x2e>
			 {
				 return;
			 }
		 }
	 }
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <__vector_42>:

volatile uint16_t m4sectimer = 0;		// global 4.096mS tick count (16 bits)
extern void processgps(void);

ISR(TIMER4_COMPA_vect)
{
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	0b b6       	in	r0, 0x3b	; 59
     d82:	0f 92       	push	r0
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	ef 93       	push	r30
     d9a:	ff 93       	push	r31

	/* Insert your TIMER_0 compare channel A interrupt handling code here */
	m4sectimer++;
     d9c:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <m4sectimer>
     da0:	90 91 62 07 	lds	r25, 0x0762	; 0x800762 <m4sectimer+0x1>
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	90 93 62 07 	sts	0x0762, r25	; 0x800762 <m4sectimer+0x1>
     daa:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <m4sectimer>

	processgps();		// see if gps receive packet available and copy to struct if so
}
     dae:	31 db       	rcall	.-2462   	; 0x412 <processgps>
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0b be       	out	0x3b, r0	; 59
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <__vector_47>:

volatile uint64_t m1sectimer = 0;		// global 1mS tick count (64 bits)

ISR(TIMER5_COMPA_vect)
{
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
	/* Insert your TIMER_5 compare channel A interrupt handling code here */
	static uint16_t nextcmp = 0;

	nextcmp = nextcmp + 16000;		// 1mSec assuming 16MHz clock
     df2:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <nextcmp.3024>
     df6:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <nextcmp.3024+0x1>
     dfa:	80 58       	subi	r24, 0x80	; 128
     dfc:	91 4c       	sbci	r25, 0xC1	; 193
     dfe:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <nextcmp.3024+0x1>
     e02:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <nextcmp.3024>
	OCR5AH = nextcmp >> 8 ;
     e06:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
	OCR5AL = nextcmp & 0xff;
     e0a:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <nextcmp.3024>
     e0e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	m1sectimer++;
     e12:	20 91 59 07 	lds	r18, 0x0759	; 0x800759 <m1sectimer>
     e16:	30 91 5a 07 	lds	r19, 0x075A	; 0x80075a <m1sectimer+0x1>
     e1a:	40 91 5b 07 	lds	r20, 0x075B	; 0x80075b <m1sectimer+0x2>
     e1e:	50 91 5c 07 	lds	r21, 0x075C	; 0x80075c <m1sectimer+0x3>
     e22:	60 91 5d 07 	lds	r22, 0x075D	; 0x80075d <m1sectimer+0x4>
     e26:	70 91 5e 07 	lds	r23, 0x075E	; 0x80075e <m1sectimer+0x5>
     e2a:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <m1sectimer+0x6>
     e2e:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <m1sectimer+0x7>
     e32:	a1 e0       	ldi	r26, 0x01	; 1
     e34:	cd d0       	rcall	.+410    	; 0xfd0 <__adddi3_s8>
     e36:	20 93 59 07 	sts	0x0759, r18	; 0x800759 <m1sectimer>
     e3a:	30 93 5a 07 	sts	0x075A, r19	; 0x80075a <m1sectimer+0x1>
     e3e:	40 93 5b 07 	sts	0x075B, r20	; 0x80075b <m1sectimer+0x2>
     e42:	50 93 5c 07 	sts	0x075C, r21	; 0x80075c <m1sectimer+0x3>
     e46:	60 93 5d 07 	sts	0x075D, r22	; 0x80075d <m1sectimer+0x4>
     e4a:	70 93 5e 07 	sts	0x075E, r23	; 0x80075e <m1sectimer+0x5>
     e4e:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <m1sectimer+0x6>
     e52:	90 93 60 07 	sts	0x0760, r25	; 0x800760 <m1sectimer+0x7>
}
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	0f 90       	pop	r0
     e6e:	1f 90       	pop	r1
     e70:	18 95       	reti

00000e72 <main>:
	volatile unsigned char ch;

	now = fastmsectime();

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     e72:	47 df       	rcall	.-370    	; 0xd02 <fastmsectime>
     e74:	58 d9       	rcall	.-3408   	; 0x126 <atmel_start_init>
	sei();
     e76:	78 94       	sei

	printf("Hello World\n\r");
     e78:	84 eb       	ldi	r24, 0xB4	; 180
     e7a:	93 e0       	ldi	r25, 0x03	; 3
     e7c:	9f 93       	push	r25

	fastdelay_ms(5000/4);
     e7e:	8f 93       	push	r24
     e80:	b3 d0       	rcall	.+358    	; 0xfe8 <printf>
     e82:	82 ee       	ldi	r24, 0xE2	; 226

	setupneo();
	printf("Neo7 setup returned\n\r");
     e84:	94 e0       	ldi	r25, 0x04	; 4
     e86:	47 df       	rcall	.-370    	; 0xd16 <fastdelay_ms>
     e88:	dc da       	rcall	.-2632   	; 0x442 <setupneo>
     e8a:	82 ec       	ldi	r24, 0xC2	; 194
     e8c:	93 e0       	ldi	r25, 0x03	; 3

	now = fastmsectime();
     e8e:	9f 93       	push	r25
     e90:	8f 93       	push	r24
     e92:	aa d0       	rcall	.+340    	; 0xfe8 <printf>
     e94:	36 df       	rcall	.-404    	; 0xd02 <fastmsectime>
     e96:	8c 01       	movw	r16, r24
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
		// Update RealPacket

		if (fastmsectime() > (now + 200/4))		// timeout 0.20 secs
		{
			now = fastmsectime();
			setndig("n1",NavPvt.hour/10);
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	c3 e6       	ldi	r28, 0x63	; 99
     ea2:	d7 e0       	ldi	r29, 0x07	; 7
     ea4:	0f 2e       	mov	r0, r31
     ea6:	fd ec       	ldi	r31, 0xCD	; 205
			setndig("n4",NavPvt.min%10);
			setndig("n5",NavPvt.sec/10);
			setndig("n6",NavPvt.sec%10);
#define PRINTDEBUG
#ifdef PRINTDEBUG
			printf("Date  %d %d %d  ", NavPvt.day, NavPvt.month,  NavPvt.year);
     ea8:	bf 2e       	mov	r11, r31
     eaa:	f0 2d       	mov	r31, r0
     eac:	0f 2e       	mov	r0, r31
     eae:	fa ee       	ldi	r31, 0xEA	; 234
     eb0:	cf 2e       	mov	r12, r31
     eb2:	f3 e0       	ldi	r31, 0x03	; 3
			printf("Time %d:%d:%d  UTC     Epoch  %lu\r\n", NavPvt.hour, NavPvt.min,  NavPvt.sec,NavPvt.iTOW);
     eb4:	df 2e       	mov	r13, r31
     eb6:	f0 2d       	mov	r31, r0
     eb8:	0f 2e       	mov	r0, r31
     eba:	fb ef       	ldi	r31, 0xFB	; 251
	{

		//		decodelcd();		// lcd test and debug
		// Update RealPacket

		if (fastmsectime() > (now + 200/4))		// timeout 0.20 secs
     ebc:	ef 2e       	mov	r14, r31
     ebe:	f3 e0       	ldi	r31, 0x03	; 3
     ec0:	ff 2e       	mov	r15, r31
     ec2:	f0 2d       	mov	r31, r0
     ec4:	0e 5c       	subi	r16, 0xCE	; 206
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	1c df       	rcall	.-456    	; 0xd02 <fastmsectime>
		{
			now = fastmsectime();
     eca:	08 17       	cp	r16, r24
     ecc:	19 07       	cpc	r17, r25
     ece:	e0 f7       	brcc	.-8      	; 0xec8 <main+0x56>
			setndig("n1",NavPvt.hour/10);
     ed0:	18 df       	rcall	.-464    	; 0xd02 <fastmsectime>
     ed2:	8c 01       	movw	r16, r24
     ed4:	68 85       	ldd	r22, Y+8	; 0x08
     ed6:	6b 9d       	mul	r22, r11
     ed8:	61 2d       	mov	r22, r1
     eda:	11 24       	eor	r1, r1
     edc:	66 95       	lsr	r22
     ede:	66 95       	lsr	r22
     ee0:	66 95       	lsr	r22
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	88 ed       	ldi	r24, 0xD8	; 216
			setndig("n2",NavPvt.hour%10);
     ee6:	93 e0       	ldi	r25, 0x03	; 3
     ee8:	d3 da       	rcall	.-2650   	; 0x490 <setndig>
     eea:	68 85       	ldd	r22, Y+8	; 0x08
     eec:	6b 9d       	mul	r22, r11
     eee:	81 2d       	mov	r24, r1
     ef0:	11 24       	eor	r1, r1
     ef2:	86 95       	lsr	r24
     ef4:	86 95       	lsr	r24
     ef6:	86 95       	lsr	r24
     ef8:	88 0f       	add	r24, r24
     efa:	98 2f       	mov	r25, r24
     efc:	99 0f       	add	r25, r25
     efe:	99 0f       	add	r25, r25
     f00:	89 0f       	add	r24, r25
     f02:	68 1b       	sub	r22, r24
     f04:	70 e0       	ldi	r23, 0x00	; 0
			setndig("n3",NavPvt.min/10);
     f06:	8b ed       	ldi	r24, 0xDB	; 219
     f08:	93 e0       	ldi	r25, 0x03	; 3
     f0a:	c2 da       	rcall	.-2684   	; 0x490 <setndig>
     f0c:	69 85       	ldd	r22, Y+9	; 0x09
     f0e:	6b 9d       	mul	r22, r11
     f10:	61 2d       	mov	r22, r1
     f12:	11 24       	eor	r1, r1
     f14:	66 95       	lsr	r22
     f16:	66 95       	lsr	r22
     f18:	66 95       	lsr	r22
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	8e ed       	ldi	r24, 0xDE	; 222
			setndig("n4",NavPvt.min%10);
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	b7 da       	rcall	.-2706   	; 0x490 <setndig>
     f22:	69 85       	ldd	r22, Y+9	; 0x09
     f24:	6b 9d       	mul	r22, r11
     f26:	81 2d       	mov	r24, r1
     f28:	11 24       	eor	r1, r1
     f2a:	86 95       	lsr	r24
     f2c:	86 95       	lsr	r24
     f2e:	86 95       	lsr	r24
     f30:	88 0f       	add	r24, r24
     f32:	98 2f       	mov	r25, r24
     f34:	99 0f       	add	r25, r25
     f36:	99 0f       	add	r25, r25
     f38:	89 0f       	add	r24, r25
     f3a:	68 1b       	sub	r22, r24
     f3c:	70 e0       	ldi	r23, 0x00	; 0
			setndig("n5",NavPvt.sec/10);
     f3e:	81 ee       	ldi	r24, 0xE1	; 225
     f40:	93 e0       	ldi	r25, 0x03	; 3
     f42:	a6 da       	rcall	.-2740   	; 0x490 <setndig>
     f44:	6a 85       	ldd	r22, Y+10	; 0x0a
     f46:	6b 9d       	mul	r22, r11
     f48:	61 2d       	mov	r22, r1
     f4a:	11 24       	eor	r1, r1
     f4c:	66 95       	lsr	r22
     f4e:	66 95       	lsr	r22
     f50:	66 95       	lsr	r22
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	84 ee       	ldi	r24, 0xE4	; 228
			setndig("n6",NavPvt.sec%10);
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	9b da       	rcall	.-2762   	; 0x490 <setndig>
     f5a:	6a 85       	ldd	r22, Y+10	; 0x0a
     f5c:	6b 9d       	mul	r22, r11
     f5e:	81 2d       	mov	r24, r1
     f60:	11 24       	eor	r1, r1
     f62:	86 95       	lsr	r24
     f64:	86 95       	lsr	r24
     f66:	86 95       	lsr	r24
     f68:	88 0f       	add	r24, r24
     f6a:	98 2f       	mov	r25, r24
     f6c:	99 0f       	add	r25, r25
     f6e:	99 0f       	add	r25, r25
     f70:	89 0f       	add	r24, r25
     f72:	68 1b       	sub	r22, r24
     f74:	70 e0       	ldi	r23, 0x00	; 0
#define PRINTDEBUG
#ifdef PRINTDEBUG
			printf("Date  %d %d %d  ", NavPvt.day, NavPvt.month,  NavPvt.year);
     f76:	87 ee       	ldi	r24, 0xE7	; 231
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	8a da       	rcall	.-2796   	; 0x490 <setndig>
     f7c:	8d 81       	ldd	r24, Y+5	; 0x05
     f7e:	8f 93       	push	r24
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	8f 93       	push	r24
     f84:	8e 81       	ldd	r24, Y+6	; 0x06
     f86:	1f 92       	push	r1
     f88:	8f 93       	push	r24
     f8a:	8f 81       	ldd	r24, Y+7	; 0x07
     f8c:	1f 92       	push	r1
     f8e:	8f 93       	push	r24
     f90:	df 92       	push	r13
			printf("Time %d:%d:%d  UTC     Epoch  %lu\r\n", NavPvt.hour, NavPvt.min,  NavPvt.sec,NavPvt.iTOW);
     f92:	cf 92       	push	r12
     f94:	29 d0       	rcall	.+82     	; 0xfe8 <printf>
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	8f 93       	push	r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	8f 93       	push	r24
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	8f 93       	push	r24
     fa2:	88 81       	ld	r24, Y
     fa4:	8f 93       	push	r24
     fa6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa8:	1f 92       	push	r1
     faa:	8f 93       	push	r24
     fac:	89 85       	ldd	r24, Y+9	; 0x09
     fae:	1f 92       	push	r1
     fb0:	8f 93       	push	r24
     fb2:	88 85       	ldd	r24, Y+8	; 0x08
     fb4:	1f 92       	push	r1
     fb6:	8f 93       	push	r24
     fb8:	ff 92       	push	r15
     fba:	ef 92       	push	r14
     fbc:	15 d0       	rcall	.+42     	; 0xfe8 <printf>
     fbe:	8d b7       	in	r24, 0x3d	; 61
     fc0:	9e b7       	in	r25, 0x3e	; 62
     fc2:	44 96       	adiw	r24, 0x14	; 20
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	9e bf       	out	0x3e, r25	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	8d bf       	out	0x3d, r24	; 61
     fce:	7a cf       	rjmp	.-268    	; 0xec4 <main+0x52>

00000fd0 <__adddi3_s8>:
     fd0:	00 24       	eor	r0, r0
     fd2:	a7 fd       	sbrc	r26, 7
     fd4:	00 94       	com	r0
     fd6:	2a 0f       	add	r18, r26
     fd8:	30 1d       	adc	r19, r0
     fda:	40 1d       	adc	r20, r0
     fdc:	50 1d       	adc	r21, r0
     fde:	60 1d       	adc	r22, r0
     fe0:	70 1d       	adc	r23, r0
     fe2:	80 1d       	adc	r24, r0
     fe4:	90 1d       	adc	r25, r0
     fe6:	08 95       	ret

00000fe8 <printf>:
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	ae 01       	movw	r20, r28
     ff2:	4a 5f       	subi	r20, 0xFA	; 250
     ff4:	5f 4f       	sbci	r21, 0xFF	; 255
     ff6:	fa 01       	movw	r30, r20
     ff8:	61 91       	ld	r22, Z+
     ffa:	71 91       	ld	r23, Z+
     ffc:	af 01       	movw	r20, r30
     ffe:	80 91 71 08 	lds	r24, 0x0871	; 0x800871 <__iob+0x2>
    1002:	90 91 72 08 	lds	r25, 0x0872	; 0x800872 <__iob+0x3>
    1006:	66 d0       	rcall	.+204    	; 0x10d4 <vfprintf>
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <putchar>:
    100e:	60 91 71 08 	lds	r22, 0x0871	; 0x800871 <__iob+0x2>
    1012:	70 91 72 08 	lds	r23, 0x0872	; 0x800872 <__iob+0x3>
    1016:	71 c2       	rjmp	.+1250   	; 0x14fa <fputc>

00001018 <puts>:
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	e0 91 71 08 	lds	r30, 0x0871	; 0x800871 <__iob+0x2>
    1024:	f0 91 72 08 	lds	r31, 0x0872	; 0x800872 <__iob+0x3>
    1028:	23 81       	ldd	r18, Z+3	; 0x03
    102a:	21 ff       	sbrs	r18, 1
    102c:	1b c0       	rjmp	.+54     	; 0x1064 <puts+0x4c>
    102e:	8c 01       	movw	r16, r24
    1030:	d0 e0       	ldi	r29, 0x00	; 0
    1032:	c0 e0       	ldi	r28, 0x00	; 0
    1034:	f8 01       	movw	r30, r16
    1036:	81 91       	ld	r24, Z+
    1038:	8f 01       	movw	r16, r30
    103a:	60 91 71 08 	lds	r22, 0x0871	; 0x800871 <__iob+0x2>
    103e:	70 91 72 08 	lds	r23, 0x0872	; 0x800872 <__iob+0x3>
    1042:	db 01       	movw	r26, r22
    1044:	18 96       	adiw	r26, 0x08	; 8
    1046:	ed 91       	ld	r30, X+
    1048:	fc 91       	ld	r31, X
    104a:	19 97       	sbiw	r26, 0x09	; 9
    104c:	88 23       	and	r24, r24
    104e:	31 f0       	breq	.+12     	; 0x105c <puts+0x44>
    1050:	19 95       	eicall
    1052:	89 2b       	or	r24, r25
    1054:	79 f3       	breq	.-34     	; 0x1034 <puts+0x1c>
    1056:	df ef       	ldi	r29, 0xFF	; 255
    1058:	cf ef       	ldi	r28, 0xFF	; 255
    105a:	ec cf       	rjmp	.-40     	; 0x1034 <puts+0x1c>
    105c:	8a e0       	ldi	r24, 0x0A	; 10
    105e:	19 95       	eicall
    1060:	89 2b       	or	r24, r25
    1062:	19 f0       	breq	.+6      	; 0x106a <puts+0x52>
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	9f ef       	ldi	r25, 0xFF	; 255
    1068:	02 c0       	rjmp	.+4      	; 0x106e <puts+0x56>
    106a:	8d 2f       	mov	r24, r29
    106c:	9c 2f       	mov	r25, r28
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	08 95       	ret

00001078 <sprintf>:
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	2e 97       	sbiw	r28, 0x0e	; 14
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	0e 89       	ldd	r16, Y+22	; 0x16
    1092:	1f 89       	ldd	r17, Y+23	; 0x17
    1094:	86 e0       	ldi	r24, 0x06	; 6
    1096:	8c 83       	std	Y+4, r24	; 0x04
    1098:	1a 83       	std	Y+2, r17	; 0x02
    109a:	09 83       	std	Y+1, r16	; 0x01
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	9f e7       	ldi	r25, 0x7F	; 127
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	8d 83       	std	Y+5, r24	; 0x05
    10a4:	ae 01       	movw	r20, r28
    10a6:	46 5e       	subi	r20, 0xE6	; 230
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	68 8d       	ldd	r22, Y+24	; 0x18
    10ac:	79 8d       	ldd	r23, Y+25	; 0x19
    10ae:	ce 01       	movw	r24, r28
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	10 d0       	rcall	.+32     	; 0x10d4 <vfprintf>
    10b4:	ef 81       	ldd	r30, Y+7	; 0x07
    10b6:	f8 85       	ldd	r31, Y+8	; 0x08
    10b8:	e0 0f       	add	r30, r16
    10ba:	f1 1f       	adc	r31, r17
    10bc:	10 82       	st	Z, r1
    10be:	2e 96       	adiw	r28, 0x0e	; 14
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	08 95       	ret

000010d4 <vfprintf>:
    10d4:	2f 92       	push	r2
    10d6:	3f 92       	push	r3
    10d8:	4f 92       	push	r4
    10da:	5f 92       	push	r5
    10dc:	6f 92       	push	r6
    10de:	7f 92       	push	r7
    10e0:	8f 92       	push	r8
    10e2:	9f 92       	push	r9
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	2b 97       	sbiw	r28, 0x0b	; 11
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	6c 01       	movw	r12, r24
    110a:	7b 01       	movw	r14, r22
    110c:	8a 01       	movw	r16, r20
    110e:	fc 01       	movw	r30, r24
    1110:	17 82       	std	Z+7, r1	; 0x07
    1112:	16 82       	std	Z+6, r1	; 0x06
    1114:	83 81       	ldd	r24, Z+3	; 0x03
    1116:	81 ff       	sbrs	r24, 1
    1118:	bf c1       	rjmp	.+894    	; 0x1498 <vfprintf+0x3c4>
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	3c 01       	movw	r6, r24
    1120:	f6 01       	movw	r30, r12
    1122:	93 81       	ldd	r25, Z+3	; 0x03
    1124:	f7 01       	movw	r30, r14
    1126:	93 fd       	sbrc	r25, 3
    1128:	85 91       	lpm	r24, Z+
    112a:	93 ff       	sbrs	r25, 3
    112c:	81 91       	ld	r24, Z+
    112e:	7f 01       	movw	r14, r30
    1130:	88 23       	and	r24, r24
    1132:	09 f4       	brne	.+2      	; 0x1136 <vfprintf+0x62>
    1134:	ad c1       	rjmp	.+858    	; 0x1490 <vfprintf+0x3bc>
    1136:	85 32       	cpi	r24, 0x25	; 37
    1138:	39 f4       	brne	.+14     	; 0x1148 <vfprintf+0x74>
    113a:	93 fd       	sbrc	r25, 3
    113c:	85 91       	lpm	r24, Z+
    113e:	93 ff       	sbrs	r25, 3
    1140:	81 91       	ld	r24, Z+
    1142:	7f 01       	movw	r14, r30
    1144:	85 32       	cpi	r24, 0x25	; 37
    1146:	21 f4       	brne	.+8      	; 0x1150 <vfprintf+0x7c>
    1148:	b6 01       	movw	r22, r12
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	d6 d1       	rcall	.+940    	; 0x14fa <fputc>
    114e:	e8 cf       	rjmp	.-48     	; 0x1120 <vfprintf+0x4c>
    1150:	91 2c       	mov	r9, r1
    1152:	21 2c       	mov	r2, r1
    1154:	31 2c       	mov	r3, r1
    1156:	ff e1       	ldi	r31, 0x1F	; 31
    1158:	f3 15       	cp	r31, r3
    115a:	d8 f0       	brcs	.+54     	; 0x1192 <vfprintf+0xbe>
    115c:	8b 32       	cpi	r24, 0x2B	; 43
    115e:	79 f0       	breq	.+30     	; 0x117e <vfprintf+0xaa>
    1160:	38 f4       	brcc	.+14     	; 0x1170 <vfprintf+0x9c>
    1162:	80 32       	cpi	r24, 0x20	; 32
    1164:	79 f0       	breq	.+30     	; 0x1184 <vfprintf+0xb0>
    1166:	83 32       	cpi	r24, 0x23	; 35
    1168:	a1 f4       	brne	.+40     	; 0x1192 <vfprintf+0xbe>
    116a:	23 2d       	mov	r18, r3
    116c:	20 61       	ori	r18, 0x10	; 16
    116e:	1d c0       	rjmp	.+58     	; 0x11aa <vfprintf+0xd6>
    1170:	8d 32       	cpi	r24, 0x2D	; 45
    1172:	61 f0       	breq	.+24     	; 0x118c <vfprintf+0xb8>
    1174:	80 33       	cpi	r24, 0x30	; 48
    1176:	69 f4       	brne	.+26     	; 0x1192 <vfprintf+0xbe>
    1178:	23 2d       	mov	r18, r3
    117a:	21 60       	ori	r18, 0x01	; 1
    117c:	16 c0       	rjmp	.+44     	; 0x11aa <vfprintf+0xd6>
    117e:	83 2d       	mov	r24, r3
    1180:	82 60       	ori	r24, 0x02	; 2
    1182:	38 2e       	mov	r3, r24
    1184:	e3 2d       	mov	r30, r3
    1186:	e4 60       	ori	r30, 0x04	; 4
    1188:	3e 2e       	mov	r3, r30
    118a:	2a c0       	rjmp	.+84     	; 0x11e0 <vfprintf+0x10c>
    118c:	f3 2d       	mov	r31, r3
    118e:	f8 60       	ori	r31, 0x08	; 8
    1190:	1d c0       	rjmp	.+58     	; 0x11cc <vfprintf+0xf8>
    1192:	37 fc       	sbrc	r3, 7
    1194:	2d c0       	rjmp	.+90     	; 0x11f0 <vfprintf+0x11c>
    1196:	20 ed       	ldi	r18, 0xD0	; 208
    1198:	28 0f       	add	r18, r24
    119a:	2a 30       	cpi	r18, 0x0A	; 10
    119c:	40 f0       	brcs	.+16     	; 0x11ae <vfprintf+0xda>
    119e:	8e 32       	cpi	r24, 0x2E	; 46
    11a0:	b9 f4       	brne	.+46     	; 0x11d0 <vfprintf+0xfc>
    11a2:	36 fc       	sbrc	r3, 6
    11a4:	75 c1       	rjmp	.+746    	; 0x1490 <vfprintf+0x3bc>
    11a6:	23 2d       	mov	r18, r3
    11a8:	20 64       	ori	r18, 0x40	; 64
    11aa:	32 2e       	mov	r3, r18
    11ac:	19 c0       	rjmp	.+50     	; 0x11e0 <vfprintf+0x10c>
    11ae:	36 fe       	sbrs	r3, 6
    11b0:	06 c0       	rjmp	.+12     	; 0x11be <vfprintf+0xea>
    11b2:	8a e0       	ldi	r24, 0x0A	; 10
    11b4:	98 9e       	mul	r9, r24
    11b6:	20 0d       	add	r18, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	92 2e       	mov	r9, r18
    11bc:	11 c0       	rjmp	.+34     	; 0x11e0 <vfprintf+0x10c>
    11be:	ea e0       	ldi	r30, 0x0A	; 10
    11c0:	2e 9e       	mul	r2, r30
    11c2:	20 0d       	add	r18, r0
    11c4:	11 24       	eor	r1, r1
    11c6:	22 2e       	mov	r2, r18
    11c8:	f3 2d       	mov	r31, r3
    11ca:	f0 62       	ori	r31, 0x20	; 32
    11cc:	3f 2e       	mov	r3, r31
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <vfprintf+0x10c>
    11d0:	8c 36       	cpi	r24, 0x6C	; 108
    11d2:	21 f4       	brne	.+8      	; 0x11dc <vfprintf+0x108>
    11d4:	83 2d       	mov	r24, r3
    11d6:	80 68       	ori	r24, 0x80	; 128
    11d8:	38 2e       	mov	r3, r24
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <vfprintf+0x10c>
    11dc:	88 36       	cpi	r24, 0x68	; 104
    11de:	41 f4       	brne	.+16     	; 0x11f0 <vfprintf+0x11c>
    11e0:	f7 01       	movw	r30, r14
    11e2:	93 fd       	sbrc	r25, 3
    11e4:	85 91       	lpm	r24, Z+
    11e6:	93 ff       	sbrs	r25, 3
    11e8:	81 91       	ld	r24, Z+
    11ea:	7f 01       	movw	r14, r30
    11ec:	81 11       	cpse	r24, r1
    11ee:	b3 cf       	rjmp	.-154    	; 0x1156 <vfprintf+0x82>
    11f0:	98 2f       	mov	r25, r24
    11f2:	9f 7d       	andi	r25, 0xDF	; 223
    11f4:	95 54       	subi	r25, 0x45	; 69
    11f6:	93 30       	cpi	r25, 0x03	; 3
    11f8:	28 f4       	brcc	.+10     	; 0x1204 <vfprintf+0x130>
    11fa:	0c 5f       	subi	r16, 0xFC	; 252
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	9f e3       	ldi	r25, 0x3F	; 63
    1200:	99 83       	std	Y+1, r25	; 0x01
    1202:	0d c0       	rjmp	.+26     	; 0x121e <vfprintf+0x14a>
    1204:	83 36       	cpi	r24, 0x63	; 99
    1206:	31 f0       	breq	.+12     	; 0x1214 <vfprintf+0x140>
    1208:	83 37       	cpi	r24, 0x73	; 115
    120a:	71 f0       	breq	.+28     	; 0x1228 <vfprintf+0x154>
    120c:	83 35       	cpi	r24, 0x53	; 83
    120e:	09 f0       	breq	.+2      	; 0x1212 <vfprintf+0x13e>
    1210:	55 c0       	rjmp	.+170    	; 0x12bc <vfprintf+0x1e8>
    1212:	20 c0       	rjmp	.+64     	; 0x1254 <vfprintf+0x180>
    1214:	f8 01       	movw	r30, r16
    1216:	80 81       	ld	r24, Z
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	0e 5f       	subi	r16, 0xFE	; 254
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	88 24       	eor	r8, r8
    1220:	83 94       	inc	r8
    1222:	91 2c       	mov	r9, r1
    1224:	53 01       	movw	r10, r6
    1226:	12 c0       	rjmp	.+36     	; 0x124c <vfprintf+0x178>
    1228:	28 01       	movw	r4, r16
    122a:	f2 e0       	ldi	r31, 0x02	; 2
    122c:	4f 0e       	add	r4, r31
    122e:	51 1c       	adc	r5, r1
    1230:	f8 01       	movw	r30, r16
    1232:	a0 80       	ld	r10, Z
    1234:	b1 80       	ldd	r11, Z+1	; 0x01
    1236:	36 fe       	sbrs	r3, 6
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <vfprintf+0x16c>
    123a:	69 2d       	mov	r22, r9
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <vfprintf+0x170>
    1240:	6f ef       	ldi	r22, 0xFF	; 255
    1242:	7f ef       	ldi	r23, 0xFF	; 255
    1244:	c5 01       	movw	r24, r10
    1246:	4e d1       	rcall	.+668    	; 0x14e4 <strnlen>
    1248:	4c 01       	movw	r8, r24
    124a:	82 01       	movw	r16, r4
    124c:	f3 2d       	mov	r31, r3
    124e:	ff 77       	andi	r31, 0x7F	; 127
    1250:	3f 2e       	mov	r3, r31
    1252:	15 c0       	rjmp	.+42     	; 0x127e <vfprintf+0x1aa>
    1254:	28 01       	movw	r4, r16
    1256:	22 e0       	ldi	r18, 0x02	; 2
    1258:	42 0e       	add	r4, r18
    125a:	51 1c       	adc	r5, r1
    125c:	f8 01       	movw	r30, r16
    125e:	a0 80       	ld	r10, Z
    1260:	b1 80       	ldd	r11, Z+1	; 0x01
    1262:	36 fe       	sbrs	r3, 6
    1264:	03 c0       	rjmp	.+6      	; 0x126c <vfprintf+0x198>
    1266:	69 2d       	mov	r22, r9
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <vfprintf+0x19c>
    126c:	6f ef       	ldi	r22, 0xFF	; 255
    126e:	7f ef       	ldi	r23, 0xFF	; 255
    1270:	c5 01       	movw	r24, r10
    1272:	2d d1       	rcall	.+602    	; 0x14ce <strnlen_P>
    1274:	4c 01       	movw	r8, r24
    1276:	f3 2d       	mov	r31, r3
    1278:	f0 68       	ori	r31, 0x80	; 128
    127a:	3f 2e       	mov	r3, r31
    127c:	82 01       	movw	r16, r4
    127e:	33 fc       	sbrc	r3, 3
    1280:	19 c0       	rjmp	.+50     	; 0x12b4 <vfprintf+0x1e0>
    1282:	82 2d       	mov	r24, r2
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	88 16       	cp	r8, r24
    1288:	99 06       	cpc	r9, r25
    128a:	a0 f4       	brcc	.+40     	; 0x12b4 <vfprintf+0x1e0>
    128c:	b6 01       	movw	r22, r12
    128e:	80 e2       	ldi	r24, 0x20	; 32
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	33 d1       	rcall	.+614    	; 0x14fa <fputc>
    1294:	2a 94       	dec	r2
    1296:	f5 cf       	rjmp	.-22     	; 0x1282 <vfprintf+0x1ae>
    1298:	f5 01       	movw	r30, r10
    129a:	37 fc       	sbrc	r3, 7
    129c:	85 91       	lpm	r24, Z+
    129e:	37 fe       	sbrs	r3, 7
    12a0:	81 91       	ld	r24, Z+
    12a2:	5f 01       	movw	r10, r30
    12a4:	b6 01       	movw	r22, r12
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	28 d1       	rcall	.+592    	; 0x14fa <fputc>
    12aa:	21 10       	cpse	r2, r1
    12ac:	2a 94       	dec	r2
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	82 1a       	sub	r8, r18
    12b2:	91 08       	sbc	r9, r1
    12b4:	81 14       	cp	r8, r1
    12b6:	91 04       	cpc	r9, r1
    12b8:	79 f7       	brne	.-34     	; 0x1298 <vfprintf+0x1c4>
    12ba:	e1 c0       	rjmp	.+450    	; 0x147e <vfprintf+0x3aa>
    12bc:	84 36       	cpi	r24, 0x64	; 100
    12be:	11 f0       	breq	.+4      	; 0x12c4 <vfprintf+0x1f0>
    12c0:	89 36       	cpi	r24, 0x69	; 105
    12c2:	39 f5       	brne	.+78     	; 0x1312 <vfprintf+0x23e>
    12c4:	f8 01       	movw	r30, r16
    12c6:	37 fe       	sbrs	r3, 7
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <vfprintf+0x204>
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	0c 5f       	subi	r16, 0xFC	; 252
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
    12d6:	08 c0       	rjmp	.+16     	; 0x12e8 <vfprintf+0x214>
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	07 2e       	mov	r0, r23
    12de:	00 0c       	add	r0, r0
    12e0:	88 0b       	sbc	r24, r24
    12e2:	99 0b       	sbc	r25, r25
    12e4:	0e 5f       	subi	r16, 0xFE	; 254
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	f3 2d       	mov	r31, r3
    12ea:	ff 76       	andi	r31, 0x6F	; 111
    12ec:	3f 2e       	mov	r3, r31
    12ee:	97 ff       	sbrs	r25, 7
    12f0:	09 c0       	rjmp	.+18     	; 0x1304 <vfprintf+0x230>
    12f2:	90 95       	com	r25
    12f4:	80 95       	com	r24
    12f6:	70 95       	com	r23
    12f8:	61 95       	neg	r22
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	8f 4f       	sbci	r24, 0xFF	; 255
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	f0 68       	ori	r31, 0x80	; 128
    1302:	3f 2e       	mov	r3, r31
    1304:	2a e0       	ldi	r18, 0x0A	; 10
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	a3 01       	movw	r20, r6
    130a:	33 d1       	rcall	.+614    	; 0x1572 <__ultoa_invert>
    130c:	88 2e       	mov	r8, r24
    130e:	86 18       	sub	r8, r6
    1310:	44 c0       	rjmp	.+136    	; 0x139a <vfprintf+0x2c6>
    1312:	85 37       	cpi	r24, 0x75	; 117
    1314:	31 f4       	brne	.+12     	; 0x1322 <vfprintf+0x24e>
    1316:	23 2d       	mov	r18, r3
    1318:	2f 7e       	andi	r18, 0xEF	; 239
    131a:	b2 2e       	mov	r11, r18
    131c:	2a e0       	ldi	r18, 0x0A	; 10
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	25 c0       	rjmp	.+74     	; 0x136c <vfprintf+0x298>
    1322:	93 2d       	mov	r25, r3
    1324:	99 7f       	andi	r25, 0xF9	; 249
    1326:	b9 2e       	mov	r11, r25
    1328:	8f 36       	cpi	r24, 0x6F	; 111
    132a:	c1 f0       	breq	.+48     	; 0x135c <vfprintf+0x288>
    132c:	18 f4       	brcc	.+6      	; 0x1334 <vfprintf+0x260>
    132e:	88 35       	cpi	r24, 0x58	; 88
    1330:	79 f0       	breq	.+30     	; 0x1350 <vfprintf+0x27c>
    1332:	ae c0       	rjmp	.+348    	; 0x1490 <vfprintf+0x3bc>
    1334:	80 37       	cpi	r24, 0x70	; 112
    1336:	19 f0       	breq	.+6      	; 0x133e <vfprintf+0x26a>
    1338:	88 37       	cpi	r24, 0x78	; 120
    133a:	21 f0       	breq	.+8      	; 0x1344 <vfprintf+0x270>
    133c:	a9 c0       	rjmp	.+338    	; 0x1490 <vfprintf+0x3bc>
    133e:	e9 2f       	mov	r30, r25
    1340:	e0 61       	ori	r30, 0x10	; 16
    1342:	be 2e       	mov	r11, r30
    1344:	b4 fe       	sbrs	r11, 4
    1346:	0d c0       	rjmp	.+26     	; 0x1362 <vfprintf+0x28e>
    1348:	fb 2d       	mov	r31, r11
    134a:	f4 60       	ori	r31, 0x04	; 4
    134c:	bf 2e       	mov	r11, r31
    134e:	09 c0       	rjmp	.+18     	; 0x1362 <vfprintf+0x28e>
    1350:	34 fe       	sbrs	r3, 4
    1352:	0a c0       	rjmp	.+20     	; 0x1368 <vfprintf+0x294>
    1354:	29 2f       	mov	r18, r25
    1356:	26 60       	ori	r18, 0x06	; 6
    1358:	b2 2e       	mov	r11, r18
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <vfprintf+0x294>
    135c:	28 e0       	ldi	r18, 0x08	; 8
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	05 c0       	rjmp	.+10     	; 0x136c <vfprintf+0x298>
    1362:	20 e1       	ldi	r18, 0x10	; 16
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	02 c0       	rjmp	.+4      	; 0x136c <vfprintf+0x298>
    1368:	20 e1       	ldi	r18, 0x10	; 16
    136a:	32 e0       	ldi	r19, 0x02	; 2
    136c:	f8 01       	movw	r30, r16
    136e:	b7 fe       	sbrs	r11, 7
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <vfprintf+0x2ac>
    1372:	60 81       	ld	r22, Z
    1374:	71 81       	ldd	r23, Z+1	; 0x01
    1376:	82 81       	ldd	r24, Z+2	; 0x02
    1378:	93 81       	ldd	r25, Z+3	; 0x03
    137a:	0c 5f       	subi	r16, 0xFC	; 252
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	06 c0       	rjmp	.+12     	; 0x138c <vfprintf+0x2b8>
    1380:	60 81       	ld	r22, Z
    1382:	71 81       	ldd	r23, Z+1	; 0x01
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 5f       	subi	r16, 0xFE	; 254
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	a3 01       	movw	r20, r6
    138e:	f1 d0       	rcall	.+482    	; 0x1572 <__ultoa_invert>
    1390:	88 2e       	mov	r8, r24
    1392:	86 18       	sub	r8, r6
    1394:	fb 2d       	mov	r31, r11
    1396:	ff 77       	andi	r31, 0x7F	; 127
    1398:	3f 2e       	mov	r3, r31
    139a:	36 fe       	sbrs	r3, 6
    139c:	0d c0       	rjmp	.+26     	; 0x13b8 <vfprintf+0x2e4>
    139e:	23 2d       	mov	r18, r3
    13a0:	2e 7f       	andi	r18, 0xFE	; 254
    13a2:	a2 2e       	mov	r10, r18
    13a4:	89 14       	cp	r8, r9
    13a6:	58 f4       	brcc	.+22     	; 0x13be <vfprintf+0x2ea>
    13a8:	34 fe       	sbrs	r3, 4
    13aa:	0b c0       	rjmp	.+22     	; 0x13c2 <vfprintf+0x2ee>
    13ac:	32 fc       	sbrc	r3, 2
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <vfprintf+0x2ee>
    13b0:	83 2d       	mov	r24, r3
    13b2:	8e 7e       	andi	r24, 0xEE	; 238
    13b4:	a8 2e       	mov	r10, r24
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <vfprintf+0x2ee>
    13b8:	b8 2c       	mov	r11, r8
    13ba:	a3 2c       	mov	r10, r3
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <vfprintf+0x2f0>
    13be:	b8 2c       	mov	r11, r8
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <vfprintf+0x2f0>
    13c2:	b9 2c       	mov	r11, r9
    13c4:	a4 fe       	sbrs	r10, 4
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <vfprintf+0x312>
    13c8:	fe 01       	movw	r30, r28
    13ca:	e8 0d       	add	r30, r8
    13cc:	f1 1d       	adc	r31, r1
    13ce:	80 81       	ld	r24, Z
    13d0:	80 33       	cpi	r24, 0x30	; 48
    13d2:	21 f4       	brne	.+8      	; 0x13dc <vfprintf+0x308>
    13d4:	9a 2d       	mov	r25, r10
    13d6:	99 7e       	andi	r25, 0xE9	; 233
    13d8:	a9 2e       	mov	r10, r25
    13da:	09 c0       	rjmp	.+18     	; 0x13ee <vfprintf+0x31a>
    13dc:	a2 fe       	sbrs	r10, 2
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <vfprintf+0x318>
    13e0:	b3 94       	inc	r11
    13e2:	b3 94       	inc	r11
    13e4:	04 c0       	rjmp	.+8      	; 0x13ee <vfprintf+0x31a>
    13e6:	8a 2d       	mov	r24, r10
    13e8:	86 78       	andi	r24, 0x86	; 134
    13ea:	09 f0       	breq	.+2      	; 0x13ee <vfprintf+0x31a>
    13ec:	b3 94       	inc	r11
    13ee:	a3 fc       	sbrc	r10, 3
    13f0:	10 c0       	rjmp	.+32     	; 0x1412 <vfprintf+0x33e>
    13f2:	a0 fe       	sbrs	r10, 0
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <vfprintf+0x32e>
    13f6:	b2 14       	cp	r11, r2
    13f8:	80 f4       	brcc	.+32     	; 0x141a <vfprintf+0x346>
    13fa:	28 0c       	add	r2, r8
    13fc:	92 2c       	mov	r9, r2
    13fe:	9b 18       	sub	r9, r11
    1400:	0d c0       	rjmp	.+26     	; 0x141c <vfprintf+0x348>
    1402:	b2 14       	cp	r11, r2
    1404:	58 f4       	brcc	.+22     	; 0x141c <vfprintf+0x348>
    1406:	b6 01       	movw	r22, r12
    1408:	80 e2       	ldi	r24, 0x20	; 32
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	76 d0       	rcall	.+236    	; 0x14fa <fputc>
    140e:	b3 94       	inc	r11
    1410:	f8 cf       	rjmp	.-16     	; 0x1402 <vfprintf+0x32e>
    1412:	b2 14       	cp	r11, r2
    1414:	18 f4       	brcc	.+6      	; 0x141c <vfprintf+0x348>
    1416:	2b 18       	sub	r2, r11
    1418:	02 c0       	rjmp	.+4      	; 0x141e <vfprintf+0x34a>
    141a:	98 2c       	mov	r9, r8
    141c:	21 2c       	mov	r2, r1
    141e:	a4 fe       	sbrs	r10, 4
    1420:	0f c0       	rjmp	.+30     	; 0x1440 <vfprintf+0x36c>
    1422:	b6 01       	movw	r22, r12
    1424:	80 e3       	ldi	r24, 0x30	; 48
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	68 d0       	rcall	.+208    	; 0x14fa <fputc>
    142a:	a2 fe       	sbrs	r10, 2
    142c:	16 c0       	rjmp	.+44     	; 0x145a <vfprintf+0x386>
    142e:	a1 fc       	sbrc	r10, 1
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <vfprintf+0x364>
    1432:	88 e7       	ldi	r24, 0x78	; 120
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <vfprintf+0x368>
    1438:	88 e5       	ldi	r24, 0x58	; 88
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	b6 01       	movw	r22, r12
    143e:	0c c0       	rjmp	.+24     	; 0x1458 <vfprintf+0x384>
    1440:	8a 2d       	mov	r24, r10
    1442:	86 78       	andi	r24, 0x86	; 134
    1444:	51 f0       	breq	.+20     	; 0x145a <vfprintf+0x386>
    1446:	a1 fe       	sbrs	r10, 1
    1448:	02 c0       	rjmp	.+4      	; 0x144e <vfprintf+0x37a>
    144a:	8b e2       	ldi	r24, 0x2B	; 43
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <vfprintf+0x37c>
    144e:	80 e2       	ldi	r24, 0x20	; 32
    1450:	a7 fc       	sbrc	r10, 7
    1452:	8d e2       	ldi	r24, 0x2D	; 45
    1454:	b6 01       	movw	r22, r12
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	50 d0       	rcall	.+160    	; 0x14fa <fputc>
    145a:	89 14       	cp	r8, r9
    145c:	30 f4       	brcc	.+12     	; 0x146a <vfprintf+0x396>
    145e:	b6 01       	movw	r22, r12
    1460:	80 e3       	ldi	r24, 0x30	; 48
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	4a d0       	rcall	.+148    	; 0x14fa <fputc>
    1466:	9a 94       	dec	r9
    1468:	f8 cf       	rjmp	.-16     	; 0x145a <vfprintf+0x386>
    146a:	8a 94       	dec	r8
    146c:	f3 01       	movw	r30, r6
    146e:	e8 0d       	add	r30, r8
    1470:	f1 1d       	adc	r31, r1
    1472:	80 81       	ld	r24, Z
    1474:	b6 01       	movw	r22, r12
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	40 d0       	rcall	.+128    	; 0x14fa <fputc>
    147a:	81 10       	cpse	r8, r1
    147c:	f6 cf       	rjmp	.-20     	; 0x146a <vfprintf+0x396>
    147e:	22 20       	and	r2, r2
    1480:	09 f4       	brne	.+2      	; 0x1484 <vfprintf+0x3b0>
    1482:	4e ce       	rjmp	.-868    	; 0x1120 <vfprintf+0x4c>
    1484:	b6 01       	movw	r22, r12
    1486:	80 e2       	ldi	r24, 0x20	; 32
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	37 d0       	rcall	.+110    	; 0x14fa <fputc>
    148c:	2a 94       	dec	r2
    148e:	f7 cf       	rjmp	.-18     	; 0x147e <vfprintf+0x3aa>
    1490:	f6 01       	movw	r30, r12
    1492:	86 81       	ldd	r24, Z+6	; 0x06
    1494:	97 81       	ldd	r25, Z+7	; 0x07
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0x3c8>
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	9f ef       	ldi	r25, 0xFF	; 255
    149c:	2b 96       	adiw	r28, 0x0b	; 11
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	bf 90       	pop	r11
    14ba:	af 90       	pop	r10
    14bc:	9f 90       	pop	r9
    14be:	8f 90       	pop	r8
    14c0:	7f 90       	pop	r7
    14c2:	6f 90       	pop	r6
    14c4:	5f 90       	pop	r5
    14c6:	4f 90       	pop	r4
    14c8:	3f 90       	pop	r3
    14ca:	2f 90       	pop	r2
    14cc:	08 95       	ret

000014ce <strnlen_P>:
    14ce:	fc 01       	movw	r30, r24
    14d0:	05 90       	lpm	r0, Z+
    14d2:	61 50       	subi	r22, 0x01	; 1
    14d4:	70 40       	sbci	r23, 0x00	; 0
    14d6:	01 10       	cpse	r0, r1
    14d8:	d8 f7       	brcc	.-10     	; 0x14d0 <strnlen_P+0x2>
    14da:	80 95       	com	r24
    14dc:	90 95       	com	r25
    14de:	8e 0f       	add	r24, r30
    14e0:	9f 1f       	adc	r25, r31
    14e2:	08 95       	ret

000014e4 <strnlen>:
    14e4:	fc 01       	movw	r30, r24
    14e6:	61 50       	subi	r22, 0x01	; 1
    14e8:	70 40       	sbci	r23, 0x00	; 0
    14ea:	01 90       	ld	r0, Z+
    14ec:	01 10       	cpse	r0, r1
    14ee:	d8 f7       	brcc	.-10     	; 0x14e6 <strnlen+0x2>
    14f0:	80 95       	com	r24
    14f2:	90 95       	com	r25
    14f4:	8e 0f       	add	r24, r30
    14f6:	9f 1f       	adc	r25, r31
    14f8:	08 95       	ret

000014fa <fputc>:
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	fb 01       	movw	r30, r22
    1504:	23 81       	ldd	r18, Z+3	; 0x03
    1506:	21 fd       	sbrc	r18, 1
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <fputc+0x16>
    150a:	8f ef       	ldi	r24, 0xFF	; 255
    150c:	9f ef       	ldi	r25, 0xFF	; 255
    150e:	2c c0       	rjmp	.+88     	; 0x1568 <fputc+0x6e>
    1510:	22 ff       	sbrs	r18, 2
    1512:	16 c0       	rjmp	.+44     	; 0x1540 <fputc+0x46>
    1514:	46 81       	ldd	r20, Z+6	; 0x06
    1516:	57 81       	ldd	r21, Z+7	; 0x07
    1518:	24 81       	ldd	r18, Z+4	; 0x04
    151a:	35 81       	ldd	r19, Z+5	; 0x05
    151c:	42 17       	cp	r20, r18
    151e:	53 07       	cpc	r21, r19
    1520:	44 f4       	brge	.+16     	; 0x1532 <fputc+0x38>
    1522:	a0 81       	ld	r26, Z
    1524:	b1 81       	ldd	r27, Z+1	; 0x01
    1526:	9d 01       	movw	r18, r26
    1528:	2f 5f       	subi	r18, 0xFF	; 255
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	31 83       	std	Z+1, r19	; 0x01
    152e:	20 83       	st	Z, r18
    1530:	8c 93       	st	X, r24
    1532:	26 81       	ldd	r18, Z+6	; 0x06
    1534:	37 81       	ldd	r19, Z+7	; 0x07
    1536:	2f 5f       	subi	r18, 0xFF	; 255
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	37 83       	std	Z+7, r19	; 0x07
    153c:	26 83       	std	Z+6, r18	; 0x06
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <fputc+0x6e>
    1540:	8b 01       	movw	r16, r22
    1542:	ec 01       	movw	r28, r24
    1544:	fb 01       	movw	r30, r22
    1546:	00 84       	ldd	r0, Z+8	; 0x08
    1548:	f1 85       	ldd	r31, Z+9	; 0x09
    154a:	e0 2d       	mov	r30, r0
    154c:	19 95       	eicall
    154e:	89 2b       	or	r24, r25
    1550:	e1 f6       	brne	.-72     	; 0x150a <fputc+0x10>
    1552:	d8 01       	movw	r26, r16
    1554:	16 96       	adiw	r26, 0x06	; 6
    1556:	8d 91       	ld	r24, X+
    1558:	9c 91       	ld	r25, X
    155a:	17 97       	sbiw	r26, 0x07	; 7
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	17 96       	adiw	r26, 0x07	; 7
    1560:	9c 93       	st	X, r25
    1562:	8e 93       	st	-X, r24
    1564:	16 97       	sbiw	r26, 0x06	; 6
    1566:	ce 01       	movw	r24, r28
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <__ultoa_invert>:
    1572:	fa 01       	movw	r30, r20
    1574:	aa 27       	eor	r26, r26
    1576:	28 30       	cpi	r18, 0x08	; 8
    1578:	51 f1       	breq	.+84     	; 0x15ce <__ultoa_invert+0x5c>
    157a:	20 31       	cpi	r18, 0x10	; 16
    157c:	81 f1       	breq	.+96     	; 0x15de <__ultoa_invert+0x6c>
    157e:	e8 94       	clt
    1580:	6f 93       	push	r22
    1582:	6e 7f       	andi	r22, 0xFE	; 254
    1584:	6e 5f       	subi	r22, 0xFE	; 254
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	8f 4f       	sbci	r24, 0xFF	; 255
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	af 4f       	sbci	r26, 0xFF	; 255
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	3e d0       	rcall	.+124    	; 0x160e <__ultoa_invert+0x9c>
    1592:	b4 e0       	ldi	r27, 0x04	; 4
    1594:	3c d0       	rcall	.+120    	; 0x160e <__ultoa_invert+0x9c>
    1596:	67 0f       	add	r22, r23
    1598:	78 1f       	adc	r23, r24
    159a:	89 1f       	adc	r24, r25
    159c:	9a 1f       	adc	r25, r26
    159e:	a1 1d       	adc	r26, r1
    15a0:	68 0f       	add	r22, r24
    15a2:	79 1f       	adc	r23, r25
    15a4:	8a 1f       	adc	r24, r26
    15a6:	91 1d       	adc	r25, r1
    15a8:	a1 1d       	adc	r26, r1
    15aa:	6a 0f       	add	r22, r26
    15ac:	71 1d       	adc	r23, r1
    15ae:	81 1d       	adc	r24, r1
    15b0:	91 1d       	adc	r25, r1
    15b2:	a1 1d       	adc	r26, r1
    15b4:	20 d0       	rcall	.+64     	; 0x15f6 <__ultoa_invert+0x84>
    15b6:	09 f4       	brne	.+2      	; 0x15ba <__ultoa_invert+0x48>
    15b8:	68 94       	set
    15ba:	3f 91       	pop	r19
    15bc:	2a e0       	ldi	r18, 0x0A	; 10
    15be:	26 9f       	mul	r18, r22
    15c0:	11 24       	eor	r1, r1
    15c2:	30 19       	sub	r19, r0
    15c4:	30 5d       	subi	r19, 0xD0	; 208
    15c6:	31 93       	st	Z+, r19
    15c8:	de f6       	brtc	.-74     	; 0x1580 <__ultoa_invert+0xe>
    15ca:	cf 01       	movw	r24, r30
    15cc:	08 95       	ret
    15ce:	46 2f       	mov	r20, r22
    15d0:	47 70       	andi	r20, 0x07	; 7
    15d2:	40 5d       	subi	r20, 0xD0	; 208
    15d4:	41 93       	st	Z+, r20
    15d6:	b3 e0       	ldi	r27, 0x03	; 3
    15d8:	0f d0       	rcall	.+30     	; 0x15f8 <__ultoa_invert+0x86>
    15da:	c9 f7       	brne	.-14     	; 0x15ce <__ultoa_invert+0x5c>
    15dc:	f6 cf       	rjmp	.-20     	; 0x15ca <__ultoa_invert+0x58>
    15de:	46 2f       	mov	r20, r22
    15e0:	4f 70       	andi	r20, 0x0F	; 15
    15e2:	40 5d       	subi	r20, 0xD0	; 208
    15e4:	4a 33       	cpi	r20, 0x3A	; 58
    15e6:	18 f0       	brcs	.+6      	; 0x15ee <__ultoa_invert+0x7c>
    15e8:	49 5d       	subi	r20, 0xD9	; 217
    15ea:	31 fd       	sbrc	r19, 1
    15ec:	40 52       	subi	r20, 0x20	; 32
    15ee:	41 93       	st	Z+, r20
    15f0:	02 d0       	rcall	.+4      	; 0x15f6 <__ultoa_invert+0x84>
    15f2:	a9 f7       	brne	.-22     	; 0x15de <__ultoa_invert+0x6c>
    15f4:	ea cf       	rjmp	.-44     	; 0x15ca <__ultoa_invert+0x58>
    15f6:	b4 e0       	ldi	r27, 0x04	; 4
    15f8:	a6 95       	lsr	r26
    15fa:	97 95       	ror	r25
    15fc:	87 95       	ror	r24
    15fe:	77 95       	ror	r23
    1600:	67 95       	ror	r22
    1602:	ba 95       	dec	r27
    1604:	c9 f7       	brne	.-14     	; 0x15f8 <__ultoa_invert+0x86>
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	61 05       	cpc	r22, r1
    160a:	71 05       	cpc	r23, r1
    160c:	08 95       	ret
    160e:	9b 01       	movw	r18, r22
    1610:	ac 01       	movw	r20, r24
    1612:	0a 2e       	mov	r0, r26
    1614:	06 94       	lsr	r0
    1616:	57 95       	ror	r21
    1618:	47 95       	ror	r20
    161a:	37 95       	ror	r19
    161c:	27 95       	ror	r18
    161e:	ba 95       	dec	r27
    1620:	c9 f7       	brne	.-14     	; 0x1614 <__ultoa_invert+0xa2>
    1622:	62 0f       	add	r22, r18
    1624:	73 1f       	adc	r23, r19
    1626:	84 1f       	adc	r24, r20
    1628:	95 1f       	adc	r25, r21
    162a:	a0 1d       	adc	r26, r0
    162c:	08 95       	ret

0000162e <_exit>:
    162e:	f8 94       	cli

00001630 <__stop_program>:
    1630:	ff cf       	rjmp	.-2      	; 0x1630 <__stop_program>
