
Freqref.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e8  00800200  000015f2  00001686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033f  008003e8  008003e8  0000186e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00001910  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052cd  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001add  00000000  00000000  00007075  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021c1  00000000  00000000  00008b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be8  00000000  00000000  0000ad14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019fd  00000000  00000000  0000b8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002763  00000000  00000000  0000d2f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0000fa5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	95 c3       	rjmp	.+1834   	; 0x78c <__vector_24>
      62:	00 00       	nop
      64:	0d c4       	rjmp	.+2074   	; 0x880 <__vector_25>
      66:	00 00       	nop
      68:	33 c4       	rjmp	.+2150   	; 0x8d0 <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c3       	rjmp	.+1596   	; 0x6b6 <__vector_30>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6e c4       	rjmp	.+2268   	; 0x96e <__vector_36>
      92:	00 00       	nop
      94:	95 c4       	rjmp	.+2346   	; 0x9c0 <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ab c6       	rjmp	.+3414   	; 0xe00 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b8 c6       	rjmp	.+3440   	; 0xe2e <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	07 c5       	rjmp	.+2574   	; 0xadc <__vector_51>
      ce:	00 00       	nop
      d0:	2e c5       	rjmp	.+2652   	; 0xb2e <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	98 c5       	rjmp	.+2864   	; 0xc0a <__vector_54>
      da:	00 00       	nop
      dc:	bf c5       	rjmp	.+2942   	; 0xc5c <__vector_55>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ef       	ldi	r30, 0xF2	; 242
      fc:	f5 e1       	ldi	r31, 0x15	; 21
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 3e       	cpi	r26, 0xE8	; 232
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	27 e0       	ldi	r18, 0x07	; 7
     110:	a8 ee       	ldi	r26, 0xE8	; 232
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 32       	cpi	r26, 0x27	; 39
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	d5 d6       	rcall	.+3498   	; 0xeca <main>
     120:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     126:	44 c2       	rjmp	.+1160   	; 0x5b0 <system_init>
     128:	08 95       	ret

0000012a <printPacket>:


void calculateChecksum()
{
	memset(UbxGpsv.checksum, 0, 2);
    for (int i = 0; i < UbxGpsv.size; i++) 
     12a:	8f 92       	push	r8
     12c:	9f 92       	push	r9
     12e:	af 92       	push	r10
     130:	bf 92       	push	r11
     132:	cf 92       	push	r12
     134:	df 92       	push	r13
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	00 d0       	rcall	.+0      	; 0x144 <printPacket+0x1a>
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	06 2f       	mov	r16, r22
     14a:	66 23       	and	r22, r22
     14c:	99 f1       	breq	.+102    	; 0x1b4 <printPacket+0x8a>
     14e:	e8 2e       	mov	r14, r24
     150:	f9 2e       	mov	r15, r25
     152:	10 e0       	ldi	r17, 0x00	; 0
     154:	0f 2e       	mov	r0, r31
     156:	fb e9       	ldi	r31, 0x9B	; 155
     158:	8f 2e       	mov	r8, r31
     15a:	f3 e0       	ldi	r31, 0x03	; 3
     15c:	9f 2e       	mov	r9, r31
     15e:	f0 2d       	mov	r31, r0
     160:	0f 2e       	mov	r0, r31
     162:	f7 eb       	ldi	r31, 0xB7	; 183
     164:	af 2e       	mov	r10, r31
     166:	f2 e0       	ldi	r31, 0x02	; 2
     168:	bf 2e       	mov	r11, r31
     16a:	f0 2d       	mov	r31, r0
     16c:	ce 01       	movw	r24, r28
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	6c 01       	movw	r12, r24
     172:	81 2f       	mov	r24, r17
     174:	8f 70       	andi	r24, 0x0F	; 15
     176:	31 f4       	brne	.+12     	; 0x184 <printPacket+0x5a>
     178:	9f 92       	push	r9
     17a:	8f 92       	push	r8
     17c:	15 d7       	rcall	.+3626   	; 0xfa8 <printf>
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	03 c0       	rjmp	.+6      	; 0x18a <printPacket+0x60>
     184:	80 e2       	ldi	r24, 0x20	; 32
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	22 d7       	rcall	.+3652   	; 0xfce <putchar>
     18a:	f7 01       	movw	r30, r14
     18c:	81 91       	ld	r24, Z+
     18e:	7f 01       	movw	r14, r30
     190:	1f 92       	push	r1
     192:	8f 93       	push	r24
     194:	bf 92       	push	r11
     196:	af 92       	push	r10
     198:	df 92       	push	r13
     19a:	cf 92       	push	r12
     19c:	4d d7       	rcall	.+3738   	; 0x1038 <sprintf>
     19e:	df 92       	push	r13
     1a0:	cf 92       	push	r12
     1a2:	02 d7       	rcall	.+3588   	; 0xfa8 <printf>
     1a4:	1f 5f       	subi	r17, 0xFF	; 255
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	cd bf       	out	0x3d, r28	; 61
     1b0:	01 13       	cpse	r16, r17
     1b2:	df cf       	rjmp	.-66     	; 0x172 <printPacket+0x48>
     1b4:	8b e9       	ldi	r24, 0x9B	; 155
     1b6:	93 e0       	ldi	r25, 0x03	; 3
     1b8:	9f 93       	push	r25
     1ba:	8f 93       	push	r24
     1bc:	f5 d6       	rcall	.+3562   	; 0xfa8 <printf>
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	df 90       	pop	r13
     1d6:	cf 90       	pop	r12
     1d8:	bf 90       	pop	r11
     1da:	af 90       	pop	r10
     1dc:	9f 90       	pop	r9
     1de:	8f 90       	pop	r8
     1e0:	08 95       	ret

000001e2 <sendPacket>:
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	7c 01       	movw	r14, r24
     1f2:	d6 2e       	mov	r13, r22
     1f4:	66 23       	and	r22, r22
     1f6:	69 f0       	breq	.+26     	; 0x212 <sendPacket+0x30>
     1f8:	ec 01       	movw	r28, r24
     1fa:	0f ef       	ldi	r16, 0xFF	; 255
     1fc:	06 0f       	add	r16, r22
     1fe:	10 e0       	ldi	r17, 0x00	; 0
     200:	0f 5f       	subi	r16, 0xFF	; 255
     202:	1f 4f       	sbci	r17, 0xFF	; 255
     204:	08 0f       	add	r16, r24
     206:	19 1f       	adc	r17, r25
     208:	89 91       	ld	r24, Y+
     20a:	2c d4       	rcall	.+2136   	; 0xa64 <USART_1_write>
     20c:	c0 17       	cp	r28, r16
     20e:	d1 07       	cpc	r29, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <sendPacket+0x26>
     212:	6d 2d       	mov	r22, r13
     214:	c7 01       	movw	r24, r14
     216:	89 df       	rcall	.-238    	; 0x12a <printPacket>
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	1f 91       	pop	r17
     21e:	0f 91       	pop	r16
     220:	ff 90       	pop	r15
     222:	ef 90       	pop	r14
     224:	df 90       	pop	r13
     226:	08 95       	ret

00000228 <disableNmea>:
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	e3 97       	sbiw	r28, 0x33	; 51
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	de bf       	out	0x3e, r29	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	cd bf       	out	0x3d, r28	; 61
     248:	88 e2       	ldi	r24, 0x28	; 40
     24a:	e3 e2       	ldi	r30, 0x23	; 35
     24c:	f2 e0       	ldi	r31, 0x02	; 2
     24e:	de 01       	movw	r26, r28
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	01 90       	ld	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	8a 95       	dec	r24
     258:	e1 f7       	brne	.-8      	; 0x252 <disableNmea+0x2a>
     25a:	8b e0       	ldi	r24, 0x0B	; 11
     25c:	eb e4       	ldi	r30, 0x4B	; 75
     25e:	f2 e0       	ldi	r31, 0x02	; 2
     260:	de 01       	movw	r26, r28
     262:	99 96       	adiw	r26, 0x29	; 41
     264:	01 90       	ld	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	8a 95       	dec	r24
     26a:	e1 f7       	brne	.-8      	; 0x264 <disableNmea+0x3c>
     26c:	ce 01       	movw	r24, r28
     26e:	01 96       	adiw	r24, 0x01	; 1
     270:	7c 01       	movw	r14, r24
     272:	6e 01       	movw	r12, r28
     274:	99 e2       	ldi	r25, 0x29	; 41
     276:	c9 0e       	add	r12, r25
     278:	d1 1c       	adc	r13, r1
     27a:	8e 01       	movw	r16, r28
     27c:	0e 5c       	subi	r16, 0xCE	; 206
     27e:	1f 4f       	sbci	r17, 0xFF	; 255
     280:	14 c0       	rjmp	.+40     	; 0x2aa <disableNmea+0x82>
     282:	91 91       	ld	r25, Z+
     284:	8a a9       	ldd	r24, Y+50	; 0x32
     286:	89 0f       	add	r24, r25
     288:	8a ab       	std	Y+50, r24	; 0x32
     28a:	9b a9       	ldd	r25, Y+51	; 0x33
     28c:	89 0f       	add	r24, r25
     28e:	8b ab       	std	Y+51, r24	; 0x33
     290:	e0 17       	cp	r30, r16
     292:	f1 07       	cpc	r31, r17
     294:	b1 f7       	brne	.-20     	; 0x282 <disableNmea+0x5a>
     296:	6b e0       	ldi	r22, 0x0B	; 11
     298:	ce 01       	movw	r24, r28
     29a:	89 96       	adiw	r24, 0x29	; 41
     29c:	a2 df       	rcall	.-188    	; 0x1e2 <sendPacket>
     29e:	e2 e0       	ldi	r30, 0x02	; 2
     2a0:	ee 0e       	add	r14, r30
     2a2:	f1 1c       	adc	r15, r1
     2a4:	ce 14       	cp	r12, r14
     2a6:	df 04       	cpc	r13, r15
     2a8:	51 f0       	breq	.+20     	; 0x2be <disableNmea+0x96>
     2aa:	f7 01       	movw	r30, r14
     2ac:	80 81       	ld	r24, Z
     2ae:	8f a7       	std	Y+47, r24	; 0x2f
     2b0:	81 81       	ldd	r24, Z+1	; 0x01
     2b2:	88 ab       	std	Y+48, r24	; 0x30
     2b4:	1a aa       	std	Y+50, r1	; 0x32
     2b6:	1b aa       	std	Y+51, r1	; 0x33
     2b8:	fe 01       	movw	r30, r28
     2ba:	bb 96       	adiw	r30, 0x2b	; 43
     2bc:	e2 cf       	rjmp	.-60     	; 0x282 <disableNmea+0x5a>
     2be:	e3 96       	adiw	r28, 0x33	; 51
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	ef 90       	pop	r14
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	08 95       	ret

000002dc <changeFrequency>:
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	2e 97       	sbiw	r28, 0x0e	; 14
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	8e e0       	ldi	r24, 0x0E	; 14
     2f2:	e2 e7       	ldi	r30, 0x72	; 114
     2f4:	f2 e0       	ldi	r31, 0x02	; 2
     2f6:	de 01       	movw	r26, r28
     2f8:	11 96       	adiw	r26, 0x01	; 1
     2fa:	01 90       	ld	r0, Z+
     2fc:	0d 92       	st	X+, r0
     2fe:	8a 95       	dec	r24
     300:	e1 f7       	brne	.-8      	; 0x2fa <changeFrequency+0x1e>
     302:	6e e0       	ldi	r22, 0x0E	; 14
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	6c df       	rcall	.-296    	; 0x1e2 <sendPacket>
     30a:	2e 96       	adiw	r28, 0x0e	; 14
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <disableUnnecessaryChannels>:
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	ac 97       	sbiw	r28, 0x2c	; 44
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	de bf       	out	0x3e, r29	; 62
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	8c e2       	ldi	r24, 0x2C	; 44
     332:	e0 e8       	ldi	r30, 0x80	; 128
     334:	f2 e0       	ldi	r31, 0x02	; 2
     336:	de 01       	movw	r26, r28
     338:	11 96       	adiw	r26, 0x01	; 1
     33a:	01 90       	ld	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	8a 95       	dec	r24
     340:	e1 f7       	brne	.-8      	; 0x33a <disableUnnecessaryChannels+0x1e>
     342:	6c e2       	ldi	r22, 0x2C	; 44
     344:	ce 01       	movw	r24, r28
     346:	01 96       	adiw	r24, 0x01	; 1
     348:	4c df       	rcall	.-360    	; 0x1e2 <sendPacket>
     34a:	ac 96       	adiw	r28, 0x2c	; 44
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <enableNavPvt>:
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	2b 97       	sbiw	r28, 0x0b	; 11
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	8b e0       	ldi	r24, 0x0B	; 11
     372:	ec ea       	ldi	r30, 0xAC	; 172
     374:	f2 e0       	ldi	r31, 0x02	; 2
     376:	de 01       	movw	r26, r28
     378:	11 96       	adiw	r26, 0x01	; 1
     37a:	01 90       	ld	r0, Z+
     37c:	0d 92       	st	X+, r0
     37e:	8a 95       	dec	r24
     380:	e1 f7       	brne	.-8      	; 0x37a <enableNavPvt+0x1e>
     382:	6b e0       	ldi	r22, 0x0B	; 11
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	2c df       	rcall	.-424    	; 0x1e2 <sendPacket>
     38a:	2b 96       	adiw	r28, 0x0b	; 11
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c)  
{   
   // get current position in packet
   unsigned char p = UbxGpsv.carriagePosition; 
     39c:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <__data_end+0x3>
   if (p < 2)     // this should only care about PVT messages
     3a0:	92 30       	cpi	r25, 0x02	; 2
     3a2:	70 f4       	brcc	.+28     	; 0x3c0 <IsPacketReady+0x24>
   {		
		// are we starting a packet?
		if (c == UBXGPS_HEADER[p]) 
     3a4:	29 2f       	mov	r18, r25
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	f9 01       	movw	r30, r18
     3aa:	e2 56       	subi	r30, 0x62	; 98
     3ac:	fc 4f       	sbci	r31, 0xFC	; 252
     3ae:	40 81       	ld	r20, Z
     3b0:	84 13       	cpse	r24, r20
     3b2:	14 c0       	rjmp	.+40     	; 0x3dc <IsPacketReady+0x40>
		{
			PACKETstore[p] = c;
     3b4:	f9 01       	movw	r30, r18
     3b6:	eb 53       	subi	r30, 0x3B	; 59
     3b8:	f9 4f       	sbci	r31, 0xF9	; 249
     3ba:	80 83       	st	Z, r24
			p++; 			
     3bc:	9f 5f       	subi	r25, 0xFF	; 255
     3be:	0f c0       	rjmp	.+30     	; 0x3de <IsPacketReady+0x42>
   // found a packet header, start filling
   else 
   
   {
		//if we are here, we've got some of the right packet.  Lets just try getting all 86 bytes
		if(p <93)
     3c0:	9d 35       	cpi	r25, 0x5D	; 93
     3c2:	38 f4       	brcc	.+14     	; 0x3d2 <IsPacketReady+0x36>
		{
			PACKETstore[p] = c;
     3c4:	e9 2f       	mov	r30, r25
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	eb 53       	subi	r30, 0x3B	; 59
     3ca:	f9 4f       	sbci	r31, 0xF9	; 249
     3cc:	80 83       	st	Z, r24
			p++;
     3ce:	9f 5f       	subi	r25, 0xFF	; 255
     3d0:	06 c0       	rjmp	.+12     	; 0x3de <IsPacketReady+0x42>
		 
		}
		else
		{
			p=0;
			UbxGpsv.carriagePosition =p;
     3d2:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <__data_end+0x3>
			return true;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	08 95       	ret
			PACKETstore[p] = c;
			p++; 			
		} 
		else 
		{ 
			p = 0;
     3dc:	90 e0       	ldi	r25, 0x00	; 0
		p = 0;
		printf("Out of packet*\r\n");
     }
    }
*/	 
	UbxGpsv.carriagePosition =p;
     3de:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <__data_end+0x3>
	return false;
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
}
     3e6:	08 95       	ret

000003e8 <loop>:



// If there is data from the receiver, read it and send to the PC or vice versa
void loop() 
{
     3e8:	cf 93       	push	r28
	const unsigned char offset =6;
	unsigned char data;
	if (USART_1_is_rx_ready()) 
     3ea:	df 93       	push	r29
     3ec:	1b d3       	rcall	.+1590   	; 0xa24 <USART_1_is_rx_ready>
	{
		data = USART_1_read();
     3ee:	88 23       	and	r24, r24
	 	//USART_3_write(data);
		
		

		if(IsPacketReady(data))
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <loop+0xc>
     3f2:	3e c0       	rjmp	.+124    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     3f4:	1e d3       	rcall	.+1596   	; 0xa32 <USART_1_read>
     3f6:	d2 df       	rcall	.-92     	; 0x39c <IsPacketReady>
     3f8:	89 2b       	or	r24, r25
     3fa:	d1 f1       	breq	.+116    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     3fc:	eb ec       	ldi	r30, 0xCB	; 203
     3fe:	f6 e0       	ldi	r31, 0x06	; 6
     400:	a5 e1       	ldi	r26, 0x15	; 21
     402:	b6 e0       	ldi	r27, 0x06	; 6
		{
		//	printf("Packet ready\r\n");
		//	printPacket(PACKETstore,92);
			for(unsigned int i = offset; i<sizeof(realPacket); i++){
			    *((char*)(&realPacket) + (i-offset)) = PACKETstore[i];
     404:	29 e1       	ldi	r18, 0x19	; 25
     406:	37 e0       	ldi	r19, 0x07	; 7

		if(IsPacketReady(data))
		{
		//	printf("Packet ready\r\n");
		//	printPacket(PACKETstore,92);
			for(unsigned int i = offset; i<sizeof(realPacket); i++){
     408:	81 91       	ld	r24, Z+
     40a:	8d 93       	st	X+, r24
     40c:	e2 17       	cp	r30, r18
			    *((char*)(&realPacket) + (i-offset)) = PACKETstore[i];
			}
#if 1
			printf("Date  %d %d %d  ", realPacket.day, realPacket.month,  realPacket.year);
     40e:	f3 07       	cpc	r31, r19
     410:	d9 f7       	brne	.-10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     412:	c5 e1       	ldi	r28, 0x15	; 21
     414:	d6 e0       	ldi	r29, 0x06	; 6
     416:	8d 81       	ldd	r24, Y+5	; 0x05
     418:	8f 93       	push	r24
     41a:	8c 81       	ldd	r24, Y+4	; 0x04
     41c:	8f 93       	push	r24
     41e:	8e 81       	ldd	r24, Y+6	; 0x06
     420:	1f 92       	push	r1
     422:	8f 93       	push	r24
     424:	8f 81       	ldd	r24, Y+7	; 0x07
     426:	1f 92       	push	r1
     428:	8f 93       	push	r24
     42a:	8c eb       	ldi	r24, 0xBC	; 188
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	9f 93       	push	r25
			printf("Time %d:%d:%d  UTC     Epoch  %lu\r\n", realPacket.hour, realPacket.min,  realPacket.sec,realPacket.iTOW);
     430:	8f 93       	push	r24
     432:	ba d5       	rcall	.+2932   	; 0xfa8 <printf>
     434:	8b 81       	ldd	r24, Y+3	; 0x03
     436:	8f 93       	push	r24
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	8f 93       	push	r24
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	8f 93       	push	r24
     440:	88 81       	ld	r24, Y
     442:	8f 93       	push	r24
     444:	8a 85       	ldd	r24, Y+10	; 0x0a
     446:	1f 92       	push	r1
     448:	8f 93       	push	r24
     44a:	89 85       	ldd	r24, Y+9	; 0x09
     44c:	1f 92       	push	r1
     44e:	8f 93       	push	r24
     450:	88 85       	ldd	r24, Y+8	; 0x08
     452:	1f 92       	push	r1
     454:	8f 93       	push	r24
     456:	8d ec       	ldi	r24, 0xCD	; 205
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	9f 93       	push	r25
     45c:	8f 93       	push	r24
     45e:	a4 d5       	rcall	.+2888   	; 0xfa8 <printf>
     460:	8d b7       	in	r24, 0x3d	; 61
     462:	9e b7       	in	r25, 0x3e	; 62
     464:	44 96       	adiw	r24, 0x14	; 20
#endif

		}
	}
	if (USART_3_is_rx_ready()) 
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	9e bf       	out	0x3e, r25	; 62
     46c:	0f be       	out	0x3f, r0	; 63
	{
		USART_1_write(USART_3_read());
     46e:	8d bf       	out	0x3d, r24	; 61
     470:	27 d4       	rcall	.+2126   	; 0xcc0 <USART_3_is_rx_ready>
     472:	88 23       	and	r24, r24
     474:	11 f0       	breq	.+4      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	}
}
     476:	2b d4       	rcall	.+2134   	; 0xcce <USART_3_read>
     478:	f5 d2       	rcall	.+1514   	; 0xa64 <USART_1_write>
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <updategps>:
     480:	b3 cf       	rjmp	.-154    	; 0x3e8 <loop>
     482:	08 95       	ret

00000484 <setupneo>:
     484:	81 ef       	ldi	r24, 0xF1	; 241
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	8d d5       	rcall	.+2842   	; 0xfa8 <printf>
     48e:	cc de       	rcall	.-616    	; 0x228 <disableNmea>
     490:	8e e0       	ldi	r24, 0x0E	; 14
     492:	93 e0       	ldi	r25, 0x03	; 3
     494:	9f 93       	push	r25
     496:	8f 93       	push	r24
     498:	87 d5       	rcall	.+2830   	; 0xfa8 <printf>
     49a:	20 df       	rcall	.-448    	; 0x2dc <changeFrequency>
     49c:	8a e3       	ldi	r24, 0x3A	; 58
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	9b d5       	rcall	.+2870   	; 0xfd8 <puts>
     4a2:	3c df       	rcall	.-392    	; 0x31c <disableUnnecessaryChannels>
     4a4:	8d e5       	ldi	r24, 0x5D	; 93
     4a6:	93 e0       	ldi	r25, 0x03	; 3
     4a8:	9f 93       	push	r25
     4aa:	8f 93       	push	r24
     4ac:	7d d5       	rcall	.+2810   	; 0xfa8 <printf>
     4ae:	56 df       	rcall	.-340    	; 0x35c <enableNavPvt>
     4b0:	8c e7       	ldi	r24, 0x7C	; 124
     4b2:	93 e0       	ldi	r25, 0x03	; 3
     4b4:	9f 93       	push	r25
     4b6:	8f 93       	push	r24
     4b8:	77 d5       	rcall	.+2798   	; 0xfa8 <printf>
     4ba:	84 e6       	ldi	r24, 0x64	; 100
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	70 d4       	rcall	.+2272   	; 0xda0 <fastdelay_ms>
     4c0:	8d b7       	in	r24, 0x3d	; 61
     4c2:	9e b7       	in	r25, 0x3e	; 62
     4c4:	08 96       	adiw	r24, 0x08	; 8
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	9e bf       	out	0x3e, r25	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	8d bf       	out	0x3d, r24	; 61
     4d0:	08 95       	ret

000004d2 <setndig>:
	return(i);
}

// write a number digit on the LCD to a num object
void setndig(char *id, uint8_t val)
{
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	60 97       	sbiw	r28, 0x10	; 16
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
	int i;
	char msg[16];
	
	sprintf(msg,"%s.val=%1d\xff\xff\xff",id,val);
     4ea:	1f 92       	push	r1
     4ec:	6f 93       	push	r22
     4ee:	9f 93       	push	r25
     4f0:	8f 93       	push	r24
     4f2:	82 ea       	ldi	r24, 0xA2	; 162
     4f4:	93 e0       	ldi	r25, 0x03	; 3
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	ce 01       	movw	r24, r28
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	9f 93       	push	r25
     500:	8f 93       	push	r24
     502:	9a d5       	rcall	.+2868   	; 0x1038 <sprintf>
	for (i=0; msg[i]; i++)
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	88 23       	and	r24, r24
     512:	49 f0       	breq	.+18     	; 0x526 <setndig+0x54>
     514:	8e 01       	movw	r16, r28
     516:	0e 5f       	subi	r16, 0xFE	; 254
	{
		USART_2_write(msg[i]);
     518:	1f 4f       	sbci	r17, 0xFF	; 255
     51a:	3b d3       	rcall	.+1654   	; 0xb92 <USART_2_write>
{
	int i;
	char msg[16];
	
	sprintf(msg,"%s.val=%1d\xff\xff\xff",id,val);
	for (i=0; msg[i]; i++)
     51c:	f8 01       	movw	r30, r16
     51e:	81 91       	ld	r24, Z+
     520:	8f 01       	movw	r16, r30
     522:	81 11       	cpse	r24, r1
     524:	fa cf       	rjmp	.-12     	; 0x51a <setndig+0x48>
	{
		USART_2_write(msg[i]);
	}
}
     526:	60 96       	adiw	r28, 0x10	; 16
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	08 95       	ret

0000053c <SPI_0_initialization>:
}

void TIMER_1_initialization(void)
{

	TIMER_1_init();
     53c:	23 98       	cbi	0x04, 3	; 4
     53e:	2b 98       	cbi	0x05, 3	; 5
     540:	22 9a       	sbi	0x04, 2	; 4
     542:	2a 98       	cbi	0x05, 2	; 5
     544:	21 9a       	sbi	0x04, 1	; 4
     546:	29 98       	cbi	0x05, 1	; 5
     548:	20 9a       	sbi	0x04, 0	; 4
     54a:	28 98       	cbi	0x05, 0	; 5
     54c:	12 c1       	rjmp	.+548    	; 0x772 <SPI_0_init>
     54e:	08 95       	ret

00000550 <USART_0_initialization>:
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
     550:	68 98       	cbi	0x0d, 0	; 13
		DDRE &= ~(1 << pin);

		PORTE |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTE &= ~(1 << pin);
     552:	70 98       	cbi	0x0e, 0	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
     554:	69 9a       	sbi	0x0d, 1	; 13
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     556:	71 98       	cbi	0x0e, 1	; 14
     558:	ed c1       	rjmp	.+986    	; 0x934 <USART_0_init>
     55a:	08 95       	ret

0000055c <USART_1_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     55c:	52 98       	cbi	0x0a, 2	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     55e:	5a 98       	cbi	0x0b, 2	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     560:	53 9a       	sbi	0x0a, 3	; 10
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_1_init();
     562:	5b 98       	cbi	0x0b, 3	; 11
     564:	9e c2       	rjmp	.+1340   	; 0xaa2 <USART_1_init>
     566:	08 95       	ret

00000568 <USART_2_initialization>:
 */
static inline void PORTH_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
     568:	a1 e0       	ldi	r26, 0x01	; 1
     56a:	b1 e0       	ldi	r27, 0x01	; 1
     56c:	8c 91       	ld	r24, X
     56e:	8e 7f       	andi	r24, 0xFE	; 254
     570:	8c 93       	st	X, r24
		DDRH &= ~(1 << pin);

		PORTH |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTH &= ~(1 << pin);
     572:	e2 e0       	ldi	r30, 0x02	; 2
     574:	f1 e0       	ldi	r31, 0x01	; 1
     576:	80 81       	ld	r24, Z
     578:	8e 7f       	andi	r24, 0xFE	; 254
     57a:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRH |= 1 << pin;
     57c:	8c 91       	ld	r24, X
     57e:	82 60       	ori	r24, 0x02	; 2
     580:	8c 93       	st	X, r24
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
     582:	80 81       	ld	r24, Z
     584:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_2_init();
     586:	80 83       	st	Z, r24
     588:	23 c3       	rjmp	.+1606   	; 0xbd0 <USART_2_init>
     58a:	08 95       	ret

0000058c <USART_3_initialization>:
 */
static inline void PORTJ_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
     58c:	a4 e0       	ldi	r26, 0x04	; 4
     58e:	b1 e0       	ldi	r27, 0x01	; 1
     590:	8c 91       	ld	r24, X
     592:	8e 7f       	andi	r24, 0xFE	; 254
     594:	8c 93       	st	X, r24
		DDRJ &= ~(1 << pin);

		PORTJ |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTJ &= ~(1 << pin);
     596:	e5 e0       	ldi	r30, 0x05	; 5
     598:	f1 e0       	ldi	r31, 0x01	; 1
     59a:	80 81       	ld	r24, Z
     59c:	8e 7f       	andi	r24, 0xFE	; 254
     59e:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRJ |= 1 << pin;
     5a0:	8c 91       	ld	r24, X
     5a2:	82 60       	ori	r24, 0x02	; 2
     5a4:	8c 93       	st	X, r24
static inline void PORTJ_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTJ |= 1 << pin;
	} else {
		PORTJ &= ~(1 << pin);
     5a6:	80 81       	ld	r24, Z
     5a8:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_3_init();
     5aa:	80 83       	st	Z, r24
     5ac:	cc c3       	rjmp	.+1944   	; 0xd46 <USART_3_init>
     5ae:	08 95       	ret

000005b0 <system_init>:
     5b0:	8f e3       	ldi	r24, 0x3F	; 63
     5b2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
     5b6:	8f ee       	ldi	r24, 0xEF	; 239
     5b8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     5bc:	81 b1       	in	r24, 0x01	; 1
     5be:	11 b8       	out	0x01, r1	; 1
     5c0:	82 b1       	in	r24, 0x02	; 2
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	82 b9       	out	0x02, r24	; 2
     5c6:	94 b1       	in	r25, 0x04	; 4
     5c8:	14 b8       	out	0x04, r1	; 4
     5ca:	95 b1       	in	r25, 0x05	; 5
     5cc:	85 b9       	out	0x05, r24	; 5
     5ce:	97 b1       	in	r25, 0x07	; 7
     5d0:	17 b8       	out	0x07, r1	; 7
     5d2:	98 b1       	in	r25, 0x08	; 8
     5d4:	88 b9       	out	0x08, r24	; 8
     5d6:	9a b1       	in	r25, 0x0a	; 10
     5d8:	1a b8       	out	0x0a, r1	; 10
     5da:	9b b1       	in	r25, 0x0b	; 11
     5dc:	8b b9       	out	0x0b, r24	; 11
     5de:	9d b1       	in	r25, 0x0d	; 13
     5e0:	1d b8       	out	0x0d, r1	; 13
     5e2:	9e b1       	in	r25, 0x0e	; 14
     5e4:	8e b9       	out	0x0e, r24	; 14
     5e6:	90 b3       	in	r25, 0x10	; 16
     5e8:	10 ba       	out	0x10, r1	; 16
     5ea:	91 b3       	in	r25, 0x11	; 17
     5ec:	81 bb       	out	0x11, r24	; 17
     5ee:	93 b3       	in	r25, 0x13	; 19
     5f0:	90 7c       	andi	r25, 0xC0	; 192
     5f2:	93 bb       	out	0x13, r25	; 19
     5f4:	94 b3       	in	r25, 0x14	; 20
     5f6:	9f 63       	ori	r25, 0x3F	; 63
     5f8:	94 bb       	out	0x14, r25	; 20
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	90 81       	ld	r25, Z
     600:	10 82       	st	Z, r1
     602:	e2 e0       	ldi	r30, 0x02	; 2
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	90 81       	ld	r25, Z
     608:	80 83       	st	Z, r24
     60a:	e4 e0       	ldi	r30, 0x04	; 4
     60c:	f1 e0       	ldi	r31, 0x01	; 1
     60e:	90 81       	ld	r25, Z
     610:	10 82       	st	Z, r1
     612:	e5 e0       	ldi	r30, 0x05	; 5
     614:	f1 e0       	ldi	r31, 0x01	; 1
     616:	90 81       	ld	r25, Z
     618:	80 83       	st	Z, r24
     61a:	e7 e0       	ldi	r30, 0x07	; 7
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	90 81       	ld	r25, Z
     620:	10 82       	st	Z, r1
     622:	e8 e0       	ldi	r30, 0x08	; 8
     624:	f1 e0       	ldi	r31, 0x01	; 1
     626:	90 81       	ld	r25, Z
     628:	80 83       	st	Z, r24
     62a:	aa e0       	ldi	r26, 0x0A	; 10
     62c:	b1 e0       	ldi	r27, 0x01	; 1
     62e:	9c 91       	ld	r25, X
     630:	1c 92       	st	X, r1
     632:	eb e0       	ldi	r30, 0x0B	; 11
     634:	f1 e0       	ldi	r31, 0x01	; 1
     636:	90 81       	ld	r25, Z
     638:	80 83       	st	Z, r24
     63a:	0a 9a       	sbi	0x01, 2	; 1
     63c:	12 98       	cbi	0x02, 2	; 2
     63e:	0b 9a       	sbi	0x01, 3	; 1
     640:	13 98       	cbi	0x02, 3	; 2
     642:	0c 9a       	sbi	0x01, 4	; 1
     644:	14 98       	cbi	0x02, 4	; 2
     646:	0d 9a       	sbi	0x01, 5	; 1
     648:	15 98       	cbi	0x02, 5	; 2
     64a:	0e 9a       	sbi	0x01, 6	; 1
     64c:	16 98       	cbi	0x02, 6	; 2
     64e:	0f 9a       	sbi	0x01, 7	; 1
     650:	17 98       	cbi	0x02, 7	; 2
     652:	38 98       	cbi	0x07, 0	; 7
     654:	40 98       	cbi	0x08, 0	; 8
     656:	39 98       	cbi	0x07, 1	; 7
     658:	41 98       	cbi	0x08, 1	; 8
     65a:	3a 98       	cbi	0x07, 2	; 7
     65c:	42 98       	cbi	0x08, 2	; 8
     65e:	3b 98       	cbi	0x07, 3	; 7
     660:	43 98       	cbi	0x08, 3	; 8
     662:	3c 98       	cbi	0x07, 4	; 7
     664:	44 98       	cbi	0x08, 4	; 8
     666:	3d 98       	cbi	0x07, 5	; 7
     668:	45 98       	cbi	0x08, 5	; 8
     66a:	3e 98       	cbi	0x07, 6	; 7
     66c:	46 98       	cbi	0x08, 6	; 8
     66e:	3f 98       	cbi	0x07, 7	; 7
     670:	47 98       	cbi	0x08, 7	; 8
     672:	8c 91       	ld	r24, X
     674:	81 60       	ori	r24, 0x01	; 1
     676:	8c 93       	st	X, r24
     678:	80 81       	ld	r24, Z
     67a:	8e 7f       	andi	r24, 0xFE	; 254
     67c:	80 83       	st	Z, r24
     67e:	8c 91       	ld	r24, X
     680:	82 60       	ori	r24, 0x02	; 2
     682:	8c 93       	st	X, r24
     684:	80 81       	ld	r24, Z
     686:	82 60       	ori	r24, 0x02	; 2
     688:	80 83       	st	Z, r24
     68a:	8c 91       	ld	r24, X
     68c:	84 60       	ori	r24, 0x04	; 4
     68e:	8c 93       	st	X, r24
     690:	80 81       	ld	r24, Z
     692:	84 60       	ori	r24, 0x04	; 4
     694:	80 83       	st	Z, r24
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	60 e8       	ldi	r22, 0x80	; 128
     69a:	81 e6       	ldi	r24, 0x61	; 97
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	61 d0       	rcall	.+194    	; 0x762 <protected_write_io>
     6a0:	13 be       	out	0x33, r1	; 51
     6a2:	15 be       	out	0x35, r1	; 53
     6a4:	58 d0       	rcall	.+176    	; 0x756 <FLASH_0_init>
     6a6:	4a df       	rcall	.-364    	; 0x53c <SPI_0_initialization>
     6a8:	cb d0       	rcall	.+406    	; 0x840 <TIMER_0_init>
     6aa:	d7 d0       	rcall	.+430    	; 0x85a <TIMER_1_init>
     6ac:	51 df       	rcall	.-350    	; 0x550 <USART_0_initialization>
     6ae:	56 df       	rcall	.-340    	; 0x55c <USART_1_initialization>
     6b0:	5b df       	rcall	.-330    	; 0x568 <USART_2_initialization>
     6b2:	6c cf       	rjmp	.-296    	; 0x58c <USART_3_initialization>
     6b4:	08 95       	ret

000006b6 <__vector_30>:
 *
 * \return Nothing.
 */
void FLASH_0_register_callback(eeprom_write_done_cb_t f)
{
	FLASH_0_desc.cb = f;
     6b6:	1f 92       	push	r1
     6b8:	0f 92       	push	r0
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	0f 92       	push	r0
     6be:	11 24       	eor	r1, r1
     6c0:	0b b6       	in	r0, 0x3b	; 59
     6c2:	0f 92       	push	r0
     6c4:	2f 93       	push	r18
     6c6:	3f 93       	push	r19
     6c8:	4f 93       	push	r20
     6ca:	5f 93       	push	r21
     6cc:	6f 93       	push	r22
     6ce:	7f 93       	push	r23
     6d0:	8f 93       	push	r24
     6d2:	9f 93       	push	r25
     6d4:	af 93       	push	r26
     6d6:	bf 93       	push	r27
     6d8:	ef 93       	push	r30
     6da:	ff 93       	push	r31
     6dc:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <FLASH_0_desc+0x5>
     6e0:	81 11       	cpse	r24, r1
     6e2:	0e c0       	rjmp	.+28     	; 0x700 <__vector_30+0x4a>
     6e4:	e2 ef       	ldi	r30, 0xF2	; 242
     6e6:	f3 e0       	ldi	r31, 0x03	; 3
     6e8:	10 82       	st	Z, r1
     6ea:	fb 98       	cbi	0x1f, 3	; 31
     6ec:	86 81       	ldd	r24, Z+6	; 0x06
     6ee:	97 81       	ldd	r25, Z+7	; 0x07
     6f0:	89 2b       	or	r24, r25
     6f2:	f1 f0       	breq	.+60     	; 0x730 <__vector_30+0x7a>
     6f4:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <FLASH_0_desc+0x6>
     6f8:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <FLASH_0_desc+0x7>
     6fc:	19 95       	eicall
     6fe:	18 c0       	rjmp	.+48     	; 0x730 <__vector_30+0x7a>
     700:	e2 ef       	ldi	r30, 0xF2	; 242
     702:	f3 e0       	ldi	r31, 0x03	; 3
     704:	81 81       	ldd	r24, Z+1	; 0x01
     706:	92 81       	ldd	r25, Z+2	; 0x02
     708:	9c 01       	movw	r18, r24
     70a:	2f 5f       	subi	r18, 0xFF	; 255
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	32 83       	std	Z+2, r19	; 0x02
     710:	21 83       	std	Z+1, r18	; 0x01
     712:	92 bd       	out	0x22, r25	; 34
     714:	81 bd       	out	0x21, r24	; 33
     716:	a3 81       	ldd	r26, Z+3	; 0x03
     718:	b4 81       	ldd	r27, Z+4	; 0x04
     71a:	cd 01       	movw	r24, r26
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	94 83       	std	Z+4, r25	; 0x04
     720:	83 83       	std	Z+3, r24	; 0x03
     722:	8c 91       	ld	r24, X
     724:	80 bd       	out	0x20, r24	; 32
     726:	85 81       	ldd	r24, Z+5	; 0x05
     728:	81 50       	subi	r24, 0x01	; 1
     72a:	85 83       	std	Z+5, r24	; 0x05
     72c:	fa 9a       	sbi	0x1f, 2	; 31
     72e:	f9 9a       	sbi	0x1f, 1	; 31
     730:	ff 91       	pop	r31
     732:	ef 91       	pop	r30
     734:	bf 91       	pop	r27
     736:	af 91       	pop	r26
     738:	9f 91       	pop	r25
     73a:	8f 91       	pop	r24
     73c:	7f 91       	pop	r23
     73e:	6f 91       	pop	r22
     740:	5f 91       	pop	r21
     742:	4f 91       	pop	r20
     744:	3f 91       	pop	r19
     746:	2f 91       	pop	r18
     748:	0f 90       	pop	r0
     74a:	0b be       	out	0x3b, r0	; 59
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <FLASH_0_init>:
	//		 | 0 << RWWSRE /* Read-While-Write Section Enable: disabled */
	//		 | 0 << SIGRD /* Signature Row Read: disabled */
	//		 | 0 << RWWSB /* Read-While-Write Busy: disabled */
	//		 | 0 << SPMIE; /* SPM Interrupt Enable: disabled */

	FLASH_0_desc.cb = NULL;
     756:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <FLASH_0_desc+0x7>
     75a:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <FLASH_0_desc+0x6>
	return 0;
}
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	08 95       	ret

00000762 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     762:	2f b7       	in	r18, 0x3f	; 63
	cli
     764:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     766:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     768:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     76a:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     76c:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     76e:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     770:	08 95       	ret

00000772 <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
     772:	e4 e6       	ldi	r30, 0x64	; 100
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	8b 7f       	andi	r24, 0xFB	; 251
     77a:	80 83       	st	Z, r24
     77c:	81 e5       	ldi	r24, 0x51	; 81
     77e:	8c bd       	out	0x2c, r24	; 44
     780:	ea ef       	ldi	r30, 0xFA	; 250
     782:	f3 e0       	ldi	r31, 0x03	; 3
     784:	10 82       	st	Z, r1
     786:	16 82       	std	Z+6, r1	; 0x06
     788:	15 82       	std	Z+5, r1	; 0x05
     78a:	08 95       	ret

0000078c <__vector_24>:
}

ISR(SPI_STC_vect)
{
     78c:	1f 92       	push	r1
     78e:	0f 92       	push	r0
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	0f 92       	push	r0
     794:	11 24       	eor	r1, r1
     796:	0b b6       	in	r0, 0x3b	; 59
     798:	0f 92       	push	r0
     79a:	2f 93       	push	r18
     79c:	3f 93       	push	r19
     79e:	4f 93       	push	r20
     7a0:	5f 93       	push	r21
     7a2:	6f 93       	push	r22
     7a4:	7f 93       	push	r23
     7a6:	8f 93       	push	r24
     7a8:	9f 93       	push	r25
     7aa:	af 93       	push	r26
     7ac:	bf 93       	push	r27
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ef 93       	push	r30
     7b4:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
     7b6:	9e b5       	in	r25, 0x2e	; 46
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
     7b8:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <SPI_0_desc+0x4>
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	11 f1       	breq	.+68     	; 0x804 <__vector_24+0x78>
		*SPI_0_desc.data = rdata;
     7c0:	ca ef       	ldi	r28, 0xFA	; 250
     7c2:	d3 e0       	ldi	r29, 0x03	; 3
     7c4:	a9 81       	ldd	r26, Y+1	; 0x01
     7c6:	ba 81       	ldd	r27, Y+2	; 0x02
     7c8:	fd 01       	movw	r30, r26
     7ca:	91 93       	st	Z+, r25
	}

	SPI_0_desc.data++;
     7cc:	fa 83       	std	Y+2, r31	; 0x02
     7ce:	e9 83       	std	Y+1, r30	; 0x01

	if (SPI_0_desc.type != SPI_READ)
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	19 f0       	breq	.+6      	; 0x7da <__vector_24+0x4e>
		wdata = *SPI_0_desc.data;
     7d4:	11 96       	adiw	r26, 0x01	; 1
     7d6:	9c 91       	ld	r25, X
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <__vector_24+0x50>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
	uint8_t wdata = 0;
     7da:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
     7dc:	ea ef       	ldi	r30, 0xFA	; 250
     7de:	f3 e0       	ldi	r31, 0x03	; 3
     7e0:	83 81       	ldd	r24, Z+3	; 0x03
     7e2:	81 50       	subi	r24, 0x01	; 1
     7e4:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
     7e6:	88 23       	and	r24, r24
     7e8:	11 f0       	breq	.+4      	; 0x7ee <__vector_24+0x62>
		// more data to send, send a byte
		SPDR = wdata;
     7ea:	9e bd       	out	0x2e, r25	; 46
     7ec:	14 c0       	rjmp	.+40     	; 0x816 <__vector_24+0x8a>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
     7ee:	ea ef       	ldi	r30, 0xFA	; 250
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	83 e0       	ldi	r24, 0x03	; 3
     7f4:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
     7f6:	05 80       	ldd	r0, Z+5	; 0x05
     7f8:	f6 81       	ldd	r31, Z+6	; 0x06
     7fa:	e0 2d       	mov	r30, r0
     7fc:	30 97       	sbiw	r30, 0x00	; 0
     7fe:	59 f0       	breq	.+22     	; 0x816 <__vector_24+0x8a>
			SPI_0_desc.cb();
     800:	19 95       	eicall
		}
	}
}
     802:	09 c0       	rjmp	.+18     	; 0x816 <__vector_24+0x8a>
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
		*SPI_0_desc.data = rdata;
	}

	SPI_0_desc.data++;
     804:	ea ef       	ldi	r30, 0xFA	; 250
     806:	f3 e0       	ldi	r31, 0x03	; 3
     808:	a1 81       	ldd	r26, Z+1	; 0x01
     80a:	b2 81       	ldd	r27, Z+2	; 0x02
     80c:	cd 01       	movw	r24, r26
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	92 83       	std	Z+2, r25	; 0x02
     812:	81 83       	std	Z+1, r24	; 0x01
     814:	df cf       	rjmp	.-66     	; 0x7d4 <__vector_24+0x48>
		SPI_0_desc.status = SPI_DONE;
		if (SPI_0_desc.cb != NULL) {
			SPI_0_desc.cb();
		}
	}
}
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	bf 91       	pop	r27
     820:	af 91       	pop	r26
     822:	9f 91       	pop	r25
     824:	8f 91       	pop	r24
     826:	7f 91       	pop	r23
     828:	6f 91       	pop	r22
     82a:	5f 91       	pop	r21
     82c:	4f 91       	pop	r20
     82e:	3f 91       	pop	r19
     830:	2f 91       	pop	r18
     832:	0f 90       	pop	r0
     834:	0b be       	out	0x3b, r0	; 59
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC4 */
	PRR1 &= ~(1 << PRTIM4);
     840:	e5 e6       	ldi	r30, 0x65	; 101
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	8f 7e       	andi	r24, 0xEF	; 239
     848:	80 83       	st	Z, r24

	// TCCR4A = (0 << COM4A1) | (0 << COM4A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM4B1) | (0 << COM4B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM41) | (0 << WGM40); /* TC16 Mode 0 Normal */

	TCCR4B = (0 << WGM43) | (0 << WGM42)                /* TC16 Mode 0 Normal */
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

	// OCR4A = 0; /* Output compare A: 0 */

	// OCR4B = 0; /* Output compare B: 0 */

	TIMSK4 = 0 << OCIE4B   /* Output Compare B Match Interrupt Enable: disabled */
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	         | 1 << OCIE4A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE4  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE4; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	08 95       	ret

0000085a <TIMER_1_init>:
 */
int8_t TIMER_1_init()
{

	/* Enable TC5 */
	PRR1 &= ~(1 << PRTIM5);
     85a:	e5 e6       	ldi	r30, 0x65	; 101
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	8f 7d       	andi	r24, 0xDF	; 223
     862:	80 83       	st	Z, r24

	// TCCR5A = (0 << COM5A1) | (0 << COM5A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM5B1) | (0 << COM5B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM51) | (0 << WGM50); /* TC16 Mode 0 Normal */

	TCCR5B = (0 << WGM53) | (0 << WGM52)                /* TC16 Mode 0 Normal */
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
	         | 0 << ICES5                               /* Input Capture Edge Select: disabled */
	         | (0 << CS52) | (0 << CS51) | (1 << CS50); /* No prescaling */

	// ICR5 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR5A = 16000; /* Output compare A: 16000 */
     86a:	80 e8       	ldi	r24, 0x80	; 128
     86c:	9e e3       	ldi	r25, 0x3E	; 62
     86e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     872:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

	// OCR5B = 0; /* Output compare B: 0 */

	TIMSK5 = 0 << OCIE5B   /* Output Compare B Match Interrupt Enable: disabled */
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
	         | 1 << OCIE5A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE5  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE5; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	08 95       	ret

00000880 <__vector_25>:
}

bool USART_3_is_tx_busy()
{
	return (!(UCSR3A & (1 << TXC3)));
}
     880:	1f 92       	push	r1
     882:	0f 92       	push	r0
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	0f 92       	push	r0
     888:	11 24       	eor	r1, r1
     88a:	0b b6       	in	r0, 0x3b	; 59
     88c:	0f 92       	push	r0
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
     892:	ef 93       	push	r30
     894:	ff 93       	push	r31
     896:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     89a:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <USART_0_rx_head>
     89e:	ef 5f       	subi	r30, 0xFF	; 255
     8a0:	e0 93 08 05 	sts	0x0508, r30	; 0x800508 <USART_0_rx_head>
     8a4:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <USART_0_rx_tail>
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	e7 5f       	subi	r30, 0xF7	; 247
     8ac:	fa 4f       	sbci	r31, 0xFA	; 250
     8ae:	80 83       	st	Z, r24
     8b0:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <USART_0_rx_elements>
     8b4:	8f 5f       	subi	r24, 0xFF	; 255
     8b6:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <USART_0_rx_elements>
     8ba:	ff 91       	pop	r31
     8bc:	ef 91       	pop	r30
     8be:	9f 91       	pop	r25
     8c0:	8f 91       	pop	r24
     8c2:	0f 90       	pop	r0
     8c4:	0b be       	out	0x3b, r0	; 59
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f 90       	pop	r0
     8cc:	1f 90       	pop	r1
     8ce:	18 95       	reti

000008d0 <__vector_26>:
     8d0:	1f 92       	push	r1
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	0f 92       	push	r0
     8d8:	11 24       	eor	r1, r1
     8da:	0b b6       	in	r0, 0x3b	; 59
     8dc:	0f 92       	push	r0
     8de:	8f 93       	push	r24
     8e0:	ef 93       	push	r30
     8e2:	ff 93       	push	r31
     8e4:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <USART_0_tx_elements>
     8e8:	88 23       	and	r24, r24
     8ea:	89 f0       	breq	.+34     	; 0x90e <__vector_26+0x3e>
     8ec:	e0 91 f4 04 	lds	r30, 0x04F4	; 0x8004f4 <USART_0_tx_tail>
     8f0:	ef 5f       	subi	r30, 0xFF	; 255
     8f2:	ef 70       	andi	r30, 0x0F	; 15
     8f4:	e0 93 f4 04 	sts	0x04F4, r30	; 0x8004f4 <USART_0_tx_tail>
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ea 50       	subi	r30, 0x0A	; 10
     8fc:	fb 4f       	sbci	r31, 0xFB	; 251
     8fe:	80 81       	ld	r24, Z
     900:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     904:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <USART_0_tx_elements>
     908:	81 50       	subi	r24, 0x01	; 1
     90a:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <USART_0_tx_elements>
     90e:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <USART_0_tx_elements>
     912:	81 11       	cpse	r24, r1
     914:	05 c0       	rjmp	.+10     	; 0x920 <__vector_26+0x50>
     916:	e1 ec       	ldi	r30, 0xC1	; 193
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	8f 7d       	andi	r24, 0xDF	; 223
     91e:	80 83       	st	Z, r24
     920:	ff 91       	pop	r31
     922:	ef 91       	pop	r30
     924:	8f 91       	pop	r24
     926:	0f 90       	pop	r0
     928:	0b be       	out	0x3b, r0	; 59
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <USART_0_init>:
     934:	e4 e6       	ldi	r30, 0x64	; 100
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	8d 7f       	andi	r24, 0xFD	; 253
     93c:	80 83       	st	Z, r24
     93e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     942:	87 e6       	ldi	r24, 0x67	; 103
     944:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     948:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     94c:	88 e9       	ldi	r24, 0x98	; 152
     94e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     952:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <USART_0_rx_tail>
     956:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <USART_0_rx_head>
     95a:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <USART_0_rx_elements>
     95e:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <USART_0_tx_tail>
     962:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <USART_0_tx_head>
     966:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <USART_0_tx_elements>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	08 95       	ret

0000096e <__vector_36>:
     96e:	1f 92       	push	r1
     970:	0f 92       	push	r0
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	0f 92       	push	r0
     976:	11 24       	eor	r1, r1
     978:	0b b6       	in	r0, 0x3b	; 59
     97a:	0f 92       	push	r0
     97c:	8f 93       	push	r24
     97e:	9f 93       	push	r25
     980:	ef 93       	push	r30
     982:	ff 93       	push	r31
     984:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     988:	e0 91 72 04 	lds	r30, 0x0472	; 0x800472 <USART_1_rx_head>
     98c:	ef 5f       	subi	r30, 0xFF	; 255
     98e:	ef 77       	andi	r30, 0x7F	; 127
     990:	e0 93 72 04 	sts	0x0472, r30	; 0x800472 <USART_1_rx_head>
     994:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <USART_1_rx_tail>
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	ed 58       	subi	r30, 0x8D	; 141
     99c:	fb 4f       	sbci	r31, 0xFB	; 251
     99e:	80 83       	st	Z, r24
     9a0:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USART_1_rx_elements>
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <USART_1_rx_elements>
     9aa:	ff 91       	pop	r31
     9ac:	ef 91       	pop	r30
     9ae:	9f 91       	pop	r25
     9b0:	8f 91       	pop	r24
     9b2:	0f 90       	pop	r0
     9b4:	0b be       	out	0x3b, r0	; 59
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	0f 90       	pop	r0
     9bc:	1f 90       	pop	r1
     9be:	18 95       	reti

000009c0 <__vector_37>:
     9c0:	1f 92       	push	r1
     9c2:	0f 92       	push	r0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	0f 92       	push	r0
     9c8:	11 24       	eor	r1, r1
     9ca:	0b b6       	in	r0, 0x3b	; 59
     9cc:	0f 92       	push	r0
     9ce:	8f 93       	push	r24
     9d0:	ef 93       	push	r30
     9d2:	ff 93       	push	r31
     9d4:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <USART_1_tx_elements>
     9d8:	88 23       	and	r24, r24
     9da:	89 f0       	breq	.+34     	; 0x9fe <__vector_37+0x3e>
     9dc:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <USART_1_tx_tail>
     9e0:	ef 5f       	subi	r30, 0xFF	; 255
     9e2:	ef 70       	andi	r30, 0x0F	; 15
     9e4:	e0 93 5e 04 	sts	0x045E, r30	; 0x80045e <USART_1_tx_tail>
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	e0 5a       	subi	r30, 0xA0	; 160
     9ec:	fb 4f       	sbci	r31, 0xFB	; 251
     9ee:	80 81       	ld	r24, Z
     9f0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     9f4:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <USART_1_tx_elements>
     9f8:	81 50       	subi	r24, 0x01	; 1
     9fa:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <USART_1_tx_elements>
     9fe:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <USART_1_tx_elements>
     a02:	81 11       	cpse	r24, r1
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__vector_37+0x50>
     a06:	e9 ec       	ldi	r30, 0xC9	; 201
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	8f 7d       	andi	r24, 0xDF	; 223
     a0e:	80 83       	st	Z, r24
     a10:	ff 91       	pop	r31
     a12:	ef 91       	pop	r30
     a14:	8f 91       	pop	r24
     a16:	0f 90       	pop	r0
     a18:	0b be       	out	0x3b, r0	; 59
     a1a:	0f 90       	pop	r0
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	0f 90       	pop	r0
     a20:	1f 90       	pop	r1
     a22:	18 95       	reti

00000a24 <USART_1_is_rx_ready>:
     a24:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <USART_1_rx_elements>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	91 11       	cpse	r25, r1
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <USART_1_is_rx_ready+0xc>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	08 95       	ret

00000a32 <USART_1_read>:
     a32:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USART_1_rx_elements>
     a36:	88 23       	and	r24, r24
     a38:	e1 f3       	breq	.-8      	; 0xa32 <USART_1_read>
     a3a:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <USART_1_rx_tail>
     a3e:	ef 5f       	subi	r30, 0xFF	; 255
     a40:	ef 77       	andi	r30, 0x7F	; 127
     a42:	e0 93 71 04 	sts	0x0471, r30	; 0x800471 <USART_1_rx_tail>
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	0f 92       	push	r0
     a4c:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USART_1_rx_elements>
     a50:	81 50       	subi	r24, 0x01	; 1
     a52:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <USART_1_rx_elements>
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	ed 58       	subi	r30, 0x8D	; 141
     a5e:	fb 4f       	sbci	r31, 0xFB	; 251
     a60:	80 81       	ld	r24, Z
     a62:	08 95       	ret

00000a64 <USART_1_write>:
     a64:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <USART_1_tx_head>
     a68:	2f 5f       	subi	r18, 0xFF	; 255
     a6a:	2f 70       	andi	r18, 0x0F	; 15
     a6c:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <USART_1_tx_elements>
     a70:	90 31       	cpi	r25, 0x10	; 16
     a72:	e1 f3       	breq	.-8      	; 0xa6c <USART_1_write+0x8>
     a74:	e2 2f       	mov	r30, r18
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	e0 5a       	subi	r30, 0xA0	; 160
     a7a:	fb 4f       	sbci	r31, 0xFB	; 251
     a7c:	80 83       	st	Z, r24
     a7e:	20 93 5f 04 	sts	0x045F, r18	; 0x80045f <USART_1_tx_head>
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	0f 92       	push	r0
     a88:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <USART_1_tx_elements>
     a8c:	8f 5f       	subi	r24, 0xFF	; 255
     a8e:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <USART_1_tx_elements>
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	e9 ec       	ldi	r30, 0xC9	; 201
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	80 62       	ori	r24, 0x20	; 32
     a9e:	80 83       	st	Z, r24
     aa0:	08 95       	ret

00000aa2 <USART_1_init>:
     aa2:	e5 e6       	ldi	r30, 0x65	; 101
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	8e 7f       	andi	r24, 0xFE	; 254
     aaa:	80 83       	st	Z, r24
     aac:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     ab0:	87 e6       	ldi	r24, 0x67	; 103
     ab2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     ab6:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     aba:	88 e9       	ldi	r24, 0x98	; 152
     abc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     ac0:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <USART_1_rx_tail>
     ac4:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <USART_1_rx_head>
     ac8:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <USART_1_rx_elements>
     acc:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <USART_1_tx_tail>
     ad0:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <USART_1_tx_head>
     ad4:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <USART_1_tx_elements>
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	08 95       	ret

00000adc <__vector_51>:
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	0b b6       	in	r0, 0x3b	; 59
     ae8:	0f 92       	push	r0
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
     af2:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     af6:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <USART_2_rx_head>
     afa:	ef 5f       	subi	r30, 0xFF	; 255
     afc:	ef 71       	andi	r30, 0x1F	; 31
     afe:	e0 93 3c 04 	sts	0x043C, r30	; 0x80043c <USART_2_rx_head>
     b02:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <USART_2_rx_tail>
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	e3 5c       	subi	r30, 0xC3	; 195
     b0a:	fb 4f       	sbci	r31, 0xFB	; 251
     b0c:	80 83       	st	Z, r24
     b0e:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <USART_2_rx_elements>
     b12:	8f 5f       	subi	r24, 0xFF	; 255
     b14:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <USART_2_rx_elements>
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	0f 90       	pop	r0
     b22:	0b be       	out	0x3b, r0	; 59
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_52>:
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	0b b6       	in	r0, 0x3b	; 59
     b3a:	0f 92       	push	r0
     b3c:	8f 93       	push	r24
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
     b42:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <USART_2_tx_elements>
     b46:	88 23       	and	r24, r24
     b48:	89 f0       	breq	.+34     	; 0xb6c <__vector_52+0x3e>
     b4a:	e0 91 28 04 	lds	r30, 0x0428	; 0x800428 <USART_2_tx_tail>
     b4e:	ef 5f       	subi	r30, 0xFF	; 255
     b50:	ef 70       	andi	r30, 0x0F	; 15
     b52:	e0 93 28 04 	sts	0x0428, r30	; 0x800428 <USART_2_tx_tail>
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	e6 5d       	subi	r30, 0xD6	; 214
     b5a:	fb 4f       	sbci	r31, 0xFB	; 251
     b5c:	80 81       	ld	r24, Z
     b5e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     b62:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <USART_2_tx_elements>
     b66:	81 50       	subi	r24, 0x01	; 1
     b68:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <USART_2_tx_elements>
     b6c:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <USART_2_tx_elements>
     b70:	81 11       	cpse	r24, r1
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <__vector_52+0x50>
     b74:	e1 ed       	ldi	r30, 0xD1	; 209
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	8f 7d       	andi	r24, 0xDF	; 223
     b7c:	80 83       	st	Z, r24
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	8f 91       	pop	r24
     b84:	0f 90       	pop	r0
     b86:	0b be       	out	0x3b, r0	; 59
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	0f 90       	pop	r0
     b8e:	1f 90       	pop	r1
     b90:	18 95       	reti

00000b92 <USART_2_write>:
     b92:	20 91 29 04 	lds	r18, 0x0429	; 0x800429 <USART_2_tx_head>
     b96:	2f 5f       	subi	r18, 0xFF	; 255
     b98:	2f 70       	andi	r18, 0x0F	; 15
     b9a:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <USART_2_tx_elements>
     b9e:	90 31       	cpi	r25, 0x10	; 16
     ba0:	e1 f3       	breq	.-8      	; 0xb9a <USART_2_write+0x8>
     ba2:	e2 2f       	mov	r30, r18
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	e6 5d       	subi	r30, 0xD6	; 214
     ba8:	fb 4f       	sbci	r31, 0xFB	; 251
     baa:	80 83       	st	Z, r24
     bac:	20 93 29 04 	sts	0x0429, r18	; 0x800429 <USART_2_tx_head>
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	0f 92       	push	r0
     bb6:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <USART_2_tx_elements>
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <USART_2_tx_elements>
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	e1 ed       	ldi	r30, 0xD1	; 209
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	80 62       	ori	r24, 0x20	; 32
     bcc:	80 83       	st	Z, r24
     bce:	08 95       	ret

00000bd0 <USART_2_init>:
     bd0:	e5 e6       	ldi	r30, 0x65	; 101
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8d 7f       	andi	r24, 0xFD	; 253
     bd8:	80 83       	st	Z, r24
     bda:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     bde:	87 e6       	ldi	r24, 0x67	; 103
     be0:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     be4:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     be8:	88 e9       	ldi	r24, 0x98	; 152
     bea:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     bee:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <USART_2_rx_tail>
     bf2:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <USART_2_rx_head>
     bf6:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <USART_2_rx_elements>
     bfa:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <USART_2_tx_tail>
     bfe:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <USART_2_tx_head>
     c02:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <USART_2_tx_elements>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	08 95       	ret

00000c0a <__vector_54>:
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	11 24       	eor	r1, r1
     c14:	0b b6       	in	r0, 0x3b	; 59
     c16:	0f 92       	push	r0
     c18:	8f 93       	push	r24
     c1a:	9f 93       	push	r25
     c1c:	ef 93       	push	r30
     c1e:	ff 93       	push	r31
     c20:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     c24:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <USART_3_rx_head>
     c28:	ef 5f       	subi	r30, 0xFF	; 255
     c2a:	ef 70       	andi	r30, 0x0F	; 15
     c2c:	e0 93 16 04 	sts	0x0416, r30	; 0x800416 <USART_3_rx_head>
     c30:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <USART_3_rx_tail>
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	e9 5e       	subi	r30, 0xE9	; 233
     c38:	fb 4f       	sbci	r31, 0xFB	; 251
     c3a:	80 83       	st	Z, r24
     c3c:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <USART_3_rx_elements>
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <USART_3_rx_elements>
     c46:	ff 91       	pop	r31
     c48:	ef 91       	pop	r30
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	0f 90       	pop	r0
     c50:	0b be       	out	0x3b, r0	; 59
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__vector_55>:
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	0b b6       	in	r0, 0x3b	; 59
     c68:	0f 92       	push	r0
     c6a:	8f 93       	push	r24
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
     c70:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <USART_3_tx_elements>
     c74:	88 23       	and	r24, r24
     c76:	89 f0       	breq	.+34     	; 0xc9a <__vector_55+0x3e>
     c78:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <USART_3_tx_tail>
     c7c:	ef 5f       	subi	r30, 0xFF	; 255
     c7e:	ef 70       	andi	r30, 0x0F	; 15
     c80:	e0 93 02 04 	sts	0x0402, r30	; 0x800402 <USART_3_tx_tail>
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	ec 5f       	subi	r30, 0xFC	; 252
     c88:	fb 4f       	sbci	r31, 0xFB	; 251
     c8a:	80 81       	ld	r24, Z
     c8c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     c90:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <USART_3_tx_elements>
     c94:	81 50       	subi	r24, 0x01	; 1
     c96:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <USART_3_tx_elements>
     c9a:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <USART_3_tx_elements>
     c9e:	81 11       	cpse	r24, r1
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <__vector_55+0x50>
     ca2:	e1 e3       	ldi	r30, 0x31	; 49
     ca4:	f1 e0       	ldi	r31, 0x01	; 1
     ca6:	80 81       	ld	r24, Z
     ca8:	8f 7d       	andi	r24, 0xDF	; 223
     caa:	80 83       	st	Z, r24
     cac:	ff 91       	pop	r31
     cae:	ef 91       	pop	r30
     cb0:	8f 91       	pop	r24
     cb2:	0f 90       	pop	r0
     cb4:	0b be       	out	0x3b, r0	; 59
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <USART_3_is_rx_ready>:
     cc0:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <USART_3_rx_elements>
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	91 11       	cpse	r25, r1
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <USART_3_is_rx_ready+0xc>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	08 95       	ret

00000cce <USART_3_read>:
uint8_t USART_3_read(void)
{
	uint8_t tmptail;

	/* Wait for incoming data */
	while (USART_3_rx_elements == 0)
     cce:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <USART_3_rx_elements>
     cd2:	88 23       	and	r24, r24
     cd4:	e1 f3       	breq	.-8      	; 0xcce <USART_3_read>
		;
	/* Calculate buffer index */
	tmptail = (USART_3_rx_tail + 1) & USART_3_RX_BUFFER_MASK;
     cd6:	e0 91 15 04 	lds	r30, 0x0415	; 0x800415 <USART_3_rx_tail>
     cda:	ef 5f       	subi	r30, 0xFF	; 255
     cdc:	ef 70       	andi	r30, 0x0F	; 15
	/* Store new index */
	USART_3_rx_tail = tmptail;
     cde:	e0 93 15 04 	sts	0x0415, r30	; 0x800415 <USART_3_rx_tail>
	ENTER_CRITICAL(R);
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	0f 92       	push	r0
	USART_3_rx_elements--;
     ce8:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <USART_3_rx_elements>
     cec:	81 50       	subi	r24, 0x01	; 1
     cee:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <USART_3_rx_elements>
	EXIT_CRITICAL(R);
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63

	/* Return data */
	return USART_3_rxbuf[tmptail];
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	e9 5e       	subi	r30, 0xE9	; 233
     cfa:	fb 4f       	sbci	r31, 0xFB	; 251
}
     cfc:	80 81       	ld	r24, Z
     cfe:	08 95       	ret

00000d00 <USART_3_write>:
void USART_3_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_3_tx_head + 1) & USART_3_TX_BUFFER_MASK;
     d00:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <USART_3_tx_head>
     d04:	2f 5f       	subi	r18, 0xFF	; 255
     d06:	2f 70       	andi	r18, 0x0F	; 15
	/* Wait for free space in buffer */
	while (USART_3_tx_elements == USART_3_TX_BUFFER_SIZE)
     d08:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <USART_3_tx_elements>
     d0c:	90 31       	cpi	r25, 0x10	; 16
     d0e:	e1 f3       	breq	.-8      	; 0xd08 <USART_3_write+0x8>
		;
	/* Store data in buffer */
	USART_3_txbuf[tmphead] = data;
     d10:	e2 2f       	mov	r30, r18
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	ec 5f       	subi	r30, 0xFC	; 252
     d16:	fb 4f       	sbci	r31, 0xFB	; 251
     d18:	80 83       	st	Z, r24
	/* Store new index */
	USART_3_tx_head = tmphead;
     d1a:	20 93 03 04 	sts	0x0403, r18	; 0x800403 <USART_3_tx_head>
	ENTER_CRITICAL(W);
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	0f 92       	push	r0
	USART_3_tx_elements++;
     d24:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <USART_3_tx_elements>
     d28:	8f 5f       	subi	r24, 0xFF	; 255
     d2a:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <USART_3_tx_elements>
	EXIT_CRITICAL(W);
     d2e:	0f 90       	pop	r0
     d30:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR3B |= (1 << UDRIE3);
     d32:	e1 e3       	ldi	r30, 0x31	; 49
     d34:	f1 e0       	ldi	r31, 0x01	; 1
     d36:	80 81       	ld	r24, Z
     d38:	80 62       	ori	r24, 0x20	; 32
     d3a:	80 83       	st	Z, r24
     d3c:	08 95       	ret

00000d3e <USART_3_printCHAR>:
     d3e:	e0 df       	rcall	.-64     	; 0xd00 <USART_3_write>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	08 95       	ret

00000d46 <USART_3_init>:
     d46:	e5 e6       	ldi	r30, 0x65	; 101
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8b 7f       	andi	r24, 0xFB	; 251
     d4e:	80 83       	st	Z, r24
     d50:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     d54:	87 e6       	ldi	r24, 0x67	; 103
     d56:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     d5a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     d5e:	88 e9       	ldi	r24, 0x98	; 152
     d60:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     d64:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <USART_3_rx_tail>
     d68:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <USART_3_rx_head>
     d6c:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <USART_3_rx_elements>
     d70:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <USART_3_tx_tail>
     d74:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <USART_3_tx_head>
     d78:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <USART_3_tx_elements>
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <__iob+0x3>
     d84:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <__iob+0x2>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	08 95       	ret

00000d8c <fastmsectime>:
			 {
				 return;
			 }
		 }
	 }
 }
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	0f 92       	push	r0
     d92:	80 91 13 06 	lds	r24, 0x0613	; 0x800613 <m4sectimer>
     d96:	90 91 14 06 	lds	r25, 0x0614	; 0x800614 <m4sectimer+0x1>
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	08 95       	ret

00000da0 <fastdelay_ms>:

 // Uses Hardware timer 4 which is set to 4.096mS interrupt
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	00 d0       	rcall	.+0      	; 0xda6 <fastdelay_ms+0x6>
     da6:	1f 92       	push	r1
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	0f 92       	push	r0
	 currentms = m4sectimer;
     db2:	20 91 13 06 	lds	r18, 0x0613	; 0x800613 <m4sectimer>
     db6:	30 91 14 06 	lds	r19, 0x0614	; 0x800614 <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     dba:	0f 90       	pop	r0
     dbc:	0f be       	out	0x3f, r0	; 63
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
     dbe:	3c 83       	std	Y+4, r19	; 0x04
     dc0:	2b 83       	std	Y+3, r18	; 0x03
		 k = j + (uint16_t)count;
     dc2:	2b 81       	ldd	r18, Y+3	; 0x03
     dc4:	3c 81       	ldd	r19, Y+4	; 0x04
     dc6:	82 0f       	add	r24, r18
     dc8:	93 1f       	adc	r25, r19
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	0f 92       	push	r0
	 currentms = m4sectimer;
     dd4:	80 91 13 06 	lds	r24, 0x0613	; 0x800613 <m4sectimer>
     dd8:	90 91 14 06 	lds	r25, 0x0614	; 0x800614 <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
		 k = j + (uint16_t)count;
		 while(1) {
			 j = fastmsectime();
     de0:	9c 83       	std	Y+4, r25	; 0x04
     de2:	8b 83       	std	Y+3, r24	; 0x03
			 if (j >= k)
     de4:	2b 81       	ldd	r18, Y+3	; 0x03
     de6:	3c 81       	ldd	r19, Y+4	; 0x04
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	28 17       	cp	r18, r24
     dee:	39 07       	cpc	r19, r25
     df0:	70 f3       	brcs	.-36     	; 0xdce <fastdelay_ms+0x2e>
			 {
				 return;
			 }
		 }
	 }
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <__vector_42>:
#include <compiler.h>

volatile uint16_t m4sectimer = 0;		// global 4.096mS tick count (16 bits)

ISR(TIMER4_COMPA_vect)
{
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	8f 93       	push	r24
     e0c:	9f 93       	push	r25

	/* Insert your TIMER_0 compare channel A interrupt handling code here */
	m4sectimer++;
     e0e:	80 91 13 06 	lds	r24, 0x0613	; 0x800613 <m4sectimer>
     e12:	90 91 14 06 	lds	r25, 0x0614	; 0x800614 <m4sectimer+0x1>
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	90 93 14 06 	sts	0x0614, r25	; 0x800614 <m4sectimer+0x1>
     e1c:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <m4sectimer>
}
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti

00000e2e <__vector_47>:

volatile uint64_t m1sectimer = 0;		// global 1mS tick count (64 bits)

ISR(TIMER5_COMPA_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
	/* Insert your TIMER_5 compare channel A interrupt handling code here */
	static uint16_t nextcmp = 0;

	nextcmp = nextcmp + 16000;		// 1mSec assuming 16MHz clock
     e4a:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <nextcmp.3022>
     e4e:	90 91 0a 06 	lds	r25, 0x060A	; 0x80060a <nextcmp.3022+0x1>
     e52:	80 58       	subi	r24, 0x80	; 128
     e54:	91 4c       	sbci	r25, 0xC1	; 193
     e56:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <nextcmp.3022+0x1>
     e5a:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <nextcmp.3022>
	OCR5AH = nextcmp >> 8 ;
     e5e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
	OCR5AL = nextcmp & 0xff;
     e62:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <nextcmp.3022>
     e66:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	m1sectimer++;
     e6a:	20 91 0b 06 	lds	r18, 0x060B	; 0x80060b <m1sectimer>
     e6e:	30 91 0c 06 	lds	r19, 0x060C	; 0x80060c <m1sectimer+0x1>
     e72:	40 91 0d 06 	lds	r20, 0x060D	; 0x80060d <m1sectimer+0x2>
     e76:	50 91 0e 06 	lds	r21, 0x060E	; 0x80060e <m1sectimer+0x3>
     e7a:	60 91 0f 06 	lds	r22, 0x060F	; 0x80060f <m1sectimer+0x4>
     e7e:	70 91 10 06 	lds	r23, 0x0610	; 0x800610 <m1sectimer+0x5>
     e82:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <m1sectimer+0x6>
     e86:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <m1sectimer+0x7>
     e8a:	a1 e0       	ldi	r26, 0x01	; 1
     e8c:	81 d0       	rcall	.+258    	; 0xf90 <__adddi3_s8>
     e8e:	20 93 0b 06 	sts	0x060B, r18	; 0x80060b <m1sectimer>
     e92:	30 93 0c 06 	sts	0x060C, r19	; 0x80060c <m1sectimer+0x1>
     e96:	40 93 0d 06 	sts	0x060D, r20	; 0x80060d <m1sectimer+0x2>
     e9a:	50 93 0e 06 	sts	0x060E, r21	; 0x80060e <m1sectimer+0x3>
     e9e:	60 93 0f 06 	sts	0x060F, r22	; 0x80060f <m1sectimer+0x4>
     ea2:	70 93 10 06 	sts	0x0610, r23	; 0x800610 <m1sectimer+0x5>
     ea6:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <m1sectimer+0x6>
     eaa:	90 93 12 06 	sts	0x0612, r25	; 0x800612 <m1sectimer+0x7>
}
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <main>:
	volatile unsigned char ch;

	now = fastmsectime();

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     eca:	60 df       	rcall	.-320    	; 0xd8c <fastmsectime>
     ecc:	2c d9       	rcall	.-3496   	; 0x126 <atmel_start_init>
	sei();
     ece:	78 94       	sei

	printf("Hello World\n\r");
     ed0:	88 eb       	ldi	r24, 0xB8	; 184
     ed2:	93 e0       	ldi	r25, 0x03	; 3
     ed4:	9f 93       	push	r25

	fastdelay_ms(5000/4);
     ed6:	8f 93       	push	r24
     ed8:	67 d0       	rcall	.+206    	; 0xfa8 <printf>
     eda:	82 ee       	ldi	r24, 0xE2	; 226

	setupneo();
	printf("Neo7 setup returned\n\r");
     edc:	94 e0       	ldi	r25, 0x04	; 4
     ede:	60 df       	rcall	.-320    	; 0xda0 <fastdelay_ms>
     ee0:	d1 da       	rcall	.-2654   	; 0x484 <setupneo>
     ee2:	86 ec       	ldi	r24, 0xC6	; 198
     ee4:	93 e0       	ldi	r25, 0x03	; 3

	now = fastmsectime();
     ee6:	9f 93       	push	r25
     ee8:	8f 93       	push	r24
     eea:	5e d0       	rcall	.+188    	; 0xfa8 <printf>
     eec:	4f df       	rcall	.-354    	; 0xd8c <fastmsectime>
     eee:	ec 01       	movw	r28, r24
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
		// Update RealPacket
		updategps();
		if (fastmsectime() > (now + 10000/4))		// timeout 5 secs
		{
			now = fastmsectime();
			setndig("n1",realPacket.hour/10);
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	05 e1       	ldi	r16, 0x15	; 21
	{

		//		decodelcd();		// lcd test and debug
		// Update RealPacket
		updategps();
		if (fastmsectime() > (now + 10000/4))		// timeout 5 secs
     efa:	16 e0       	ldi	r17, 0x06	; 6
	while(1)
	{

		//		decodelcd();		// lcd test and debug
		// Update RealPacket
		updategps();
     efc:	0f 2e       	mov	r0, r31
     efe:	fd ec       	ldi	r31, 0xCD	; 205
		if (fastmsectime() > (now + 10000/4))		// timeout 5 secs
     f00:	ff 2e       	mov	r15, r31
     f02:	f0 2d       	mov	r31, r0
     f04:	cc 53       	subi	r28, 0x3C	; 60
     f06:	d6 4f       	sbci	r29, 0xF6	; 246
     f08:	bb da       	rcall	.-2698   	; 0x480 <updategps>
		{
			now = fastmsectime();
     f0a:	40 df       	rcall	.-384    	; 0xd8c <fastmsectime>
     f0c:	c8 17       	cp	r28, r24
     f0e:	d9 07       	cpc	r29, r25
			setndig("n1",realPacket.hour/10);
     f10:	d8 f7       	brcc	.-10     	; 0xf08 <main+0x3e>
     f12:	3c df       	rcall	.-392    	; 0xd8c <fastmsectime>
     f14:	ec 01       	movw	r28, r24
     f16:	f8 01       	movw	r30, r16
     f18:	60 85       	ldd	r22, Z+8	; 0x08
     f1a:	6f 9d       	mul	r22, r15
     f1c:	61 2d       	mov	r22, r1
     f1e:	11 24       	eor	r1, r1
     f20:	66 95       	lsr	r22
     f22:	66 95       	lsr	r22
     f24:	66 95       	lsr	r22
     f26:	70 e0       	ldi	r23, 0x00	; 0
			setndig("n2",realPacket.hour%10);
     f28:	8c ed       	ldi	r24, 0xDC	; 220
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	d2 da       	rcall	.-2652   	; 0x4d2 <setndig>
     f2e:	f8 01       	movw	r30, r16
     f30:	60 85       	ldd	r22, Z+8	; 0x08
     f32:	6f 9d       	mul	r22, r15
     f34:	81 2d       	mov	r24, r1
     f36:	11 24       	eor	r1, r1
     f38:	86 95       	lsr	r24
     f3a:	86 95       	lsr	r24
     f3c:	86 95       	lsr	r24
     f3e:	88 0f       	add	r24, r24
     f40:	98 2f       	mov	r25, r24
     f42:	99 0f       	add	r25, r25
     f44:	99 0f       	add	r25, r25
     f46:	89 0f       	add	r24, r25
     f48:	68 1b       	sub	r22, r24
			setndig("n3",realPacket.min/10);
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	8f ed       	ldi	r24, 0xDF	; 223
     f4e:	93 e0       	ldi	r25, 0x03	; 3
     f50:	c0 da       	rcall	.-2688   	; 0x4d2 <setndig>
     f52:	f8 01       	movw	r30, r16
     f54:	61 85       	ldd	r22, Z+9	; 0x09
     f56:	6f 9d       	mul	r22, r15
     f58:	61 2d       	mov	r22, r1
     f5a:	11 24       	eor	r1, r1
     f5c:	66 95       	lsr	r22
     f5e:	66 95       	lsr	r22
     f60:	66 95       	lsr	r22
     f62:	70 e0       	ldi	r23, 0x00	; 0
			setndig("n4",realPacket.min%10);
     f64:	82 ee       	ldi	r24, 0xE2	; 226
     f66:	93 e0       	ldi	r25, 0x03	; 3
     f68:	b4 da       	rcall	.-2712   	; 0x4d2 <setndig>
     f6a:	f8 01       	movw	r30, r16
     f6c:	61 85       	ldd	r22, Z+9	; 0x09
     f6e:	6f 9d       	mul	r22, r15
     f70:	81 2d       	mov	r24, r1
     f72:	11 24       	eor	r1, r1
     f74:	86 95       	lsr	r24
     f76:	86 95       	lsr	r24
     f78:	86 95       	lsr	r24
     f7a:	88 0f       	add	r24, r24
     f7c:	98 2f       	mov	r25, r24
     f7e:	99 0f       	add	r25, r25
     f80:	99 0f       	add	r25, r25
     f82:	89 0f       	add	r24, r25
     f84:	68 1b       	sub	r22, r24
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	85 ee       	ldi	r24, 0xE5	; 229
     f8a:	93 e0       	ldi	r25, 0x03	; 3
     f8c:	a2 da       	rcall	.-2748   	; 0x4d2 <setndig>
     f8e:	ba cf       	rjmp	.-140    	; 0xf04 <main+0x3a>

00000f90 <__adddi3_s8>:
     f90:	00 24       	eor	r0, r0
     f92:	a7 fd       	sbrc	r26, 7
     f94:	00 94       	com	r0
     f96:	2a 0f       	add	r18, r26
     f98:	30 1d       	adc	r19, r0
     f9a:	40 1d       	adc	r20, r0
     f9c:	50 1d       	adc	r21, r0
     f9e:	60 1d       	adc	r22, r0
     fa0:	70 1d       	adc	r23, r0
     fa2:	80 1d       	adc	r24, r0
     fa4:	90 1d       	adc	r25, r0
     fa6:	08 95       	ret

00000fa8 <printf>:
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	ae 01       	movw	r20, r28
     fb2:	4a 5f       	subi	r20, 0xFA	; 250
     fb4:	5f 4f       	sbci	r21, 0xFF	; 255
     fb6:	fa 01       	movw	r30, r20
     fb8:	61 91       	ld	r22, Z+
     fba:	71 91       	ld	r23, Z+
     fbc:	af 01       	movw	r20, r30
     fbe:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <__iob+0x2>
     fc2:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <__iob+0x3>
     fc6:	66 d0       	rcall	.+204    	; 0x1094 <vfprintf>
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <putchar>:
     fce:	60 91 23 07 	lds	r22, 0x0723	; 0x800723 <__iob+0x2>
     fd2:	70 91 24 07 	lds	r23, 0x0724	; 0x800724 <__iob+0x3>
     fd6:	71 c2       	rjmp	.+1250   	; 0x14ba <fputc>

00000fd8 <puts>:
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <__iob+0x2>
     fe4:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <__iob+0x3>
     fe8:	23 81       	ldd	r18, Z+3	; 0x03
     fea:	21 ff       	sbrs	r18, 1
     fec:	1b c0       	rjmp	.+54     	; 0x1024 <puts+0x4c>
     fee:	8c 01       	movw	r16, r24
     ff0:	d0 e0       	ldi	r29, 0x00	; 0
     ff2:	c0 e0       	ldi	r28, 0x00	; 0
     ff4:	f8 01       	movw	r30, r16
     ff6:	81 91       	ld	r24, Z+
     ff8:	8f 01       	movw	r16, r30
     ffa:	60 91 23 07 	lds	r22, 0x0723	; 0x800723 <__iob+0x2>
     ffe:	70 91 24 07 	lds	r23, 0x0724	; 0x800724 <__iob+0x3>
    1002:	db 01       	movw	r26, r22
    1004:	18 96       	adiw	r26, 0x08	; 8
    1006:	ed 91       	ld	r30, X+
    1008:	fc 91       	ld	r31, X
    100a:	19 97       	sbiw	r26, 0x09	; 9
    100c:	88 23       	and	r24, r24
    100e:	31 f0       	breq	.+12     	; 0x101c <puts+0x44>
    1010:	19 95       	eicall
    1012:	89 2b       	or	r24, r25
    1014:	79 f3       	breq	.-34     	; 0xff4 <puts+0x1c>
    1016:	df ef       	ldi	r29, 0xFF	; 255
    1018:	cf ef       	ldi	r28, 0xFF	; 255
    101a:	ec cf       	rjmp	.-40     	; 0xff4 <puts+0x1c>
    101c:	8a e0       	ldi	r24, 0x0A	; 10
    101e:	19 95       	eicall
    1020:	89 2b       	or	r24, r25
    1022:	19 f0       	breq	.+6      	; 0x102a <puts+0x52>
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	9f ef       	ldi	r25, 0xFF	; 255
    1028:	02 c0       	rjmp	.+4      	; 0x102e <puts+0x56>
    102a:	8d 2f       	mov	r24, r29
    102c:	9c 2f       	mov	r25, r28
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	08 95       	ret

00001038 <sprintf>:
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	2e 97       	sbiw	r28, 0x0e	; 14
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	0e 89       	ldd	r16, Y+22	; 0x16
    1052:	1f 89       	ldd	r17, Y+23	; 0x17
    1054:	86 e0       	ldi	r24, 0x06	; 6
    1056:	8c 83       	std	Y+4, r24	; 0x04
    1058:	1a 83       	std	Y+2, r17	; 0x02
    105a:	09 83       	std	Y+1, r16	; 0x01
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	9f e7       	ldi	r25, 0x7F	; 127
    1060:	9e 83       	std	Y+6, r25	; 0x06
    1062:	8d 83       	std	Y+5, r24	; 0x05
    1064:	ae 01       	movw	r20, r28
    1066:	46 5e       	subi	r20, 0xE6	; 230
    1068:	5f 4f       	sbci	r21, 0xFF	; 255
    106a:	68 8d       	ldd	r22, Y+24	; 0x18
    106c:	79 8d       	ldd	r23, Y+25	; 0x19
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	10 d0       	rcall	.+32     	; 0x1094 <vfprintf>
    1074:	ef 81       	ldd	r30, Y+7	; 0x07
    1076:	f8 85       	ldd	r31, Y+8	; 0x08
    1078:	e0 0f       	add	r30, r16
    107a:	f1 1f       	adc	r31, r17
    107c:	10 82       	st	Z, r1
    107e:	2e 96       	adiw	r28, 0x0e	; 14
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	08 95       	ret

00001094 <vfprintf>:
    1094:	2f 92       	push	r2
    1096:	3f 92       	push	r3
    1098:	4f 92       	push	r4
    109a:	5f 92       	push	r5
    109c:	6f 92       	push	r6
    109e:	7f 92       	push	r7
    10a0:	8f 92       	push	r8
    10a2:	9f 92       	push	r9
    10a4:	af 92       	push	r10
    10a6:	bf 92       	push	r11
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	2b 97       	sbiw	r28, 0x0b	; 11
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	6c 01       	movw	r12, r24
    10ca:	7b 01       	movw	r14, r22
    10cc:	8a 01       	movw	r16, r20
    10ce:	fc 01       	movw	r30, r24
    10d0:	17 82       	std	Z+7, r1	; 0x07
    10d2:	16 82       	std	Z+6, r1	; 0x06
    10d4:	83 81       	ldd	r24, Z+3	; 0x03
    10d6:	81 ff       	sbrs	r24, 1
    10d8:	bf c1       	rjmp	.+894    	; 0x1458 <vfprintf+0x3c4>
    10da:	ce 01       	movw	r24, r28
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	3c 01       	movw	r6, r24
    10e0:	f6 01       	movw	r30, r12
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	f7 01       	movw	r30, r14
    10e6:	93 fd       	sbrc	r25, 3
    10e8:	85 91       	lpm	r24, Z+
    10ea:	93 ff       	sbrs	r25, 3
    10ec:	81 91       	ld	r24, Z+
    10ee:	7f 01       	movw	r14, r30
    10f0:	88 23       	and	r24, r24
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <vfprintf+0x62>
    10f4:	ad c1       	rjmp	.+858    	; 0x1450 <vfprintf+0x3bc>
    10f6:	85 32       	cpi	r24, 0x25	; 37
    10f8:	39 f4       	brne	.+14     	; 0x1108 <vfprintf+0x74>
    10fa:	93 fd       	sbrc	r25, 3
    10fc:	85 91       	lpm	r24, Z+
    10fe:	93 ff       	sbrs	r25, 3
    1100:	81 91       	ld	r24, Z+
    1102:	7f 01       	movw	r14, r30
    1104:	85 32       	cpi	r24, 0x25	; 37
    1106:	21 f4       	brne	.+8      	; 0x1110 <vfprintf+0x7c>
    1108:	b6 01       	movw	r22, r12
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	d6 d1       	rcall	.+940    	; 0x14ba <fputc>
    110e:	e8 cf       	rjmp	.-48     	; 0x10e0 <vfprintf+0x4c>
    1110:	91 2c       	mov	r9, r1
    1112:	21 2c       	mov	r2, r1
    1114:	31 2c       	mov	r3, r1
    1116:	ff e1       	ldi	r31, 0x1F	; 31
    1118:	f3 15       	cp	r31, r3
    111a:	d8 f0       	brcs	.+54     	; 0x1152 <vfprintf+0xbe>
    111c:	8b 32       	cpi	r24, 0x2B	; 43
    111e:	79 f0       	breq	.+30     	; 0x113e <vfprintf+0xaa>
    1120:	38 f4       	brcc	.+14     	; 0x1130 <vfprintf+0x9c>
    1122:	80 32       	cpi	r24, 0x20	; 32
    1124:	79 f0       	breq	.+30     	; 0x1144 <vfprintf+0xb0>
    1126:	83 32       	cpi	r24, 0x23	; 35
    1128:	a1 f4       	brne	.+40     	; 0x1152 <vfprintf+0xbe>
    112a:	23 2d       	mov	r18, r3
    112c:	20 61       	ori	r18, 0x10	; 16
    112e:	1d c0       	rjmp	.+58     	; 0x116a <vfprintf+0xd6>
    1130:	8d 32       	cpi	r24, 0x2D	; 45
    1132:	61 f0       	breq	.+24     	; 0x114c <vfprintf+0xb8>
    1134:	80 33       	cpi	r24, 0x30	; 48
    1136:	69 f4       	brne	.+26     	; 0x1152 <vfprintf+0xbe>
    1138:	23 2d       	mov	r18, r3
    113a:	21 60       	ori	r18, 0x01	; 1
    113c:	16 c0       	rjmp	.+44     	; 0x116a <vfprintf+0xd6>
    113e:	83 2d       	mov	r24, r3
    1140:	82 60       	ori	r24, 0x02	; 2
    1142:	38 2e       	mov	r3, r24
    1144:	e3 2d       	mov	r30, r3
    1146:	e4 60       	ori	r30, 0x04	; 4
    1148:	3e 2e       	mov	r3, r30
    114a:	2a c0       	rjmp	.+84     	; 0x11a0 <vfprintf+0x10c>
    114c:	f3 2d       	mov	r31, r3
    114e:	f8 60       	ori	r31, 0x08	; 8
    1150:	1d c0       	rjmp	.+58     	; 0x118c <vfprintf+0xf8>
    1152:	37 fc       	sbrc	r3, 7
    1154:	2d c0       	rjmp	.+90     	; 0x11b0 <vfprintf+0x11c>
    1156:	20 ed       	ldi	r18, 0xD0	; 208
    1158:	28 0f       	add	r18, r24
    115a:	2a 30       	cpi	r18, 0x0A	; 10
    115c:	40 f0       	brcs	.+16     	; 0x116e <vfprintf+0xda>
    115e:	8e 32       	cpi	r24, 0x2E	; 46
    1160:	b9 f4       	brne	.+46     	; 0x1190 <vfprintf+0xfc>
    1162:	36 fc       	sbrc	r3, 6
    1164:	75 c1       	rjmp	.+746    	; 0x1450 <vfprintf+0x3bc>
    1166:	23 2d       	mov	r18, r3
    1168:	20 64       	ori	r18, 0x40	; 64
    116a:	32 2e       	mov	r3, r18
    116c:	19 c0       	rjmp	.+50     	; 0x11a0 <vfprintf+0x10c>
    116e:	36 fe       	sbrs	r3, 6
    1170:	06 c0       	rjmp	.+12     	; 0x117e <vfprintf+0xea>
    1172:	8a e0       	ldi	r24, 0x0A	; 10
    1174:	98 9e       	mul	r9, r24
    1176:	20 0d       	add	r18, r0
    1178:	11 24       	eor	r1, r1
    117a:	92 2e       	mov	r9, r18
    117c:	11 c0       	rjmp	.+34     	; 0x11a0 <vfprintf+0x10c>
    117e:	ea e0       	ldi	r30, 0x0A	; 10
    1180:	2e 9e       	mul	r2, r30
    1182:	20 0d       	add	r18, r0
    1184:	11 24       	eor	r1, r1
    1186:	22 2e       	mov	r2, r18
    1188:	f3 2d       	mov	r31, r3
    118a:	f0 62       	ori	r31, 0x20	; 32
    118c:	3f 2e       	mov	r3, r31
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <vfprintf+0x10c>
    1190:	8c 36       	cpi	r24, 0x6C	; 108
    1192:	21 f4       	brne	.+8      	; 0x119c <vfprintf+0x108>
    1194:	83 2d       	mov	r24, r3
    1196:	80 68       	ori	r24, 0x80	; 128
    1198:	38 2e       	mov	r3, r24
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <vfprintf+0x10c>
    119c:	88 36       	cpi	r24, 0x68	; 104
    119e:	41 f4       	brne	.+16     	; 0x11b0 <vfprintf+0x11c>
    11a0:	f7 01       	movw	r30, r14
    11a2:	93 fd       	sbrc	r25, 3
    11a4:	85 91       	lpm	r24, Z+
    11a6:	93 ff       	sbrs	r25, 3
    11a8:	81 91       	ld	r24, Z+
    11aa:	7f 01       	movw	r14, r30
    11ac:	81 11       	cpse	r24, r1
    11ae:	b3 cf       	rjmp	.-154    	; 0x1116 <vfprintf+0x82>
    11b0:	98 2f       	mov	r25, r24
    11b2:	9f 7d       	andi	r25, 0xDF	; 223
    11b4:	95 54       	subi	r25, 0x45	; 69
    11b6:	93 30       	cpi	r25, 0x03	; 3
    11b8:	28 f4       	brcc	.+10     	; 0x11c4 <vfprintf+0x130>
    11ba:	0c 5f       	subi	r16, 0xFC	; 252
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
    11be:	9f e3       	ldi	r25, 0x3F	; 63
    11c0:	99 83       	std	Y+1, r25	; 0x01
    11c2:	0d c0       	rjmp	.+26     	; 0x11de <vfprintf+0x14a>
    11c4:	83 36       	cpi	r24, 0x63	; 99
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <vfprintf+0x140>
    11c8:	83 37       	cpi	r24, 0x73	; 115
    11ca:	71 f0       	breq	.+28     	; 0x11e8 <vfprintf+0x154>
    11cc:	83 35       	cpi	r24, 0x53	; 83
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <vfprintf+0x13e>
    11d0:	55 c0       	rjmp	.+170    	; 0x127c <vfprintf+0x1e8>
    11d2:	20 c0       	rjmp	.+64     	; 0x1214 <vfprintf+0x180>
    11d4:	f8 01       	movw	r30, r16
    11d6:	80 81       	ld	r24, Z
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	0e 5f       	subi	r16, 0xFE	; 254
    11dc:	1f 4f       	sbci	r17, 0xFF	; 255
    11de:	88 24       	eor	r8, r8
    11e0:	83 94       	inc	r8
    11e2:	91 2c       	mov	r9, r1
    11e4:	53 01       	movw	r10, r6
    11e6:	12 c0       	rjmp	.+36     	; 0x120c <vfprintf+0x178>
    11e8:	28 01       	movw	r4, r16
    11ea:	f2 e0       	ldi	r31, 0x02	; 2
    11ec:	4f 0e       	add	r4, r31
    11ee:	51 1c       	adc	r5, r1
    11f0:	f8 01       	movw	r30, r16
    11f2:	a0 80       	ld	r10, Z
    11f4:	b1 80       	ldd	r11, Z+1	; 0x01
    11f6:	36 fe       	sbrs	r3, 6
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <vfprintf+0x16c>
    11fa:	69 2d       	mov	r22, r9
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <vfprintf+0x170>
    1200:	6f ef       	ldi	r22, 0xFF	; 255
    1202:	7f ef       	ldi	r23, 0xFF	; 255
    1204:	c5 01       	movw	r24, r10
    1206:	4e d1       	rcall	.+668    	; 0x14a4 <strnlen>
    1208:	4c 01       	movw	r8, r24
    120a:	82 01       	movw	r16, r4
    120c:	f3 2d       	mov	r31, r3
    120e:	ff 77       	andi	r31, 0x7F	; 127
    1210:	3f 2e       	mov	r3, r31
    1212:	15 c0       	rjmp	.+42     	; 0x123e <vfprintf+0x1aa>
    1214:	28 01       	movw	r4, r16
    1216:	22 e0       	ldi	r18, 0x02	; 2
    1218:	42 0e       	add	r4, r18
    121a:	51 1c       	adc	r5, r1
    121c:	f8 01       	movw	r30, r16
    121e:	a0 80       	ld	r10, Z
    1220:	b1 80       	ldd	r11, Z+1	; 0x01
    1222:	36 fe       	sbrs	r3, 6
    1224:	03 c0       	rjmp	.+6      	; 0x122c <vfprintf+0x198>
    1226:	69 2d       	mov	r22, r9
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <vfprintf+0x19c>
    122c:	6f ef       	ldi	r22, 0xFF	; 255
    122e:	7f ef       	ldi	r23, 0xFF	; 255
    1230:	c5 01       	movw	r24, r10
    1232:	2d d1       	rcall	.+602    	; 0x148e <strnlen_P>
    1234:	4c 01       	movw	r8, r24
    1236:	f3 2d       	mov	r31, r3
    1238:	f0 68       	ori	r31, 0x80	; 128
    123a:	3f 2e       	mov	r3, r31
    123c:	82 01       	movw	r16, r4
    123e:	33 fc       	sbrc	r3, 3
    1240:	19 c0       	rjmp	.+50     	; 0x1274 <vfprintf+0x1e0>
    1242:	82 2d       	mov	r24, r2
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	88 16       	cp	r8, r24
    1248:	99 06       	cpc	r9, r25
    124a:	a0 f4       	brcc	.+40     	; 0x1274 <vfprintf+0x1e0>
    124c:	b6 01       	movw	r22, r12
    124e:	80 e2       	ldi	r24, 0x20	; 32
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	33 d1       	rcall	.+614    	; 0x14ba <fputc>
    1254:	2a 94       	dec	r2
    1256:	f5 cf       	rjmp	.-22     	; 0x1242 <vfprintf+0x1ae>
    1258:	f5 01       	movw	r30, r10
    125a:	37 fc       	sbrc	r3, 7
    125c:	85 91       	lpm	r24, Z+
    125e:	37 fe       	sbrs	r3, 7
    1260:	81 91       	ld	r24, Z+
    1262:	5f 01       	movw	r10, r30
    1264:	b6 01       	movw	r22, r12
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	28 d1       	rcall	.+592    	; 0x14ba <fputc>
    126a:	21 10       	cpse	r2, r1
    126c:	2a 94       	dec	r2
    126e:	21 e0       	ldi	r18, 0x01	; 1
    1270:	82 1a       	sub	r8, r18
    1272:	91 08       	sbc	r9, r1
    1274:	81 14       	cp	r8, r1
    1276:	91 04       	cpc	r9, r1
    1278:	79 f7       	brne	.-34     	; 0x1258 <vfprintf+0x1c4>
    127a:	e1 c0       	rjmp	.+450    	; 0x143e <vfprintf+0x3aa>
    127c:	84 36       	cpi	r24, 0x64	; 100
    127e:	11 f0       	breq	.+4      	; 0x1284 <vfprintf+0x1f0>
    1280:	89 36       	cpi	r24, 0x69	; 105
    1282:	39 f5       	brne	.+78     	; 0x12d2 <vfprintf+0x23e>
    1284:	f8 01       	movw	r30, r16
    1286:	37 fe       	sbrs	r3, 7
    1288:	07 c0       	rjmp	.+14     	; 0x1298 <vfprintf+0x204>
    128a:	60 81       	ld	r22, Z
    128c:	71 81       	ldd	r23, Z+1	; 0x01
    128e:	82 81       	ldd	r24, Z+2	; 0x02
    1290:	93 81       	ldd	r25, Z+3	; 0x03
    1292:	0c 5f       	subi	r16, 0xFC	; 252
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <vfprintf+0x214>
    1298:	60 81       	ld	r22, Z
    129a:	71 81       	ldd	r23, Z+1	; 0x01
    129c:	07 2e       	mov	r0, r23
    129e:	00 0c       	add	r0, r0
    12a0:	88 0b       	sbc	r24, r24
    12a2:	99 0b       	sbc	r25, r25
    12a4:	0e 5f       	subi	r16, 0xFE	; 254
    12a6:	1f 4f       	sbci	r17, 0xFF	; 255
    12a8:	f3 2d       	mov	r31, r3
    12aa:	ff 76       	andi	r31, 0x6F	; 111
    12ac:	3f 2e       	mov	r3, r31
    12ae:	97 ff       	sbrs	r25, 7
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <vfprintf+0x230>
    12b2:	90 95       	com	r25
    12b4:	80 95       	com	r24
    12b6:	70 95       	com	r23
    12b8:	61 95       	neg	r22
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	8f 4f       	sbci	r24, 0xFF	; 255
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	f0 68       	ori	r31, 0x80	; 128
    12c2:	3f 2e       	mov	r3, r31
    12c4:	2a e0       	ldi	r18, 0x0A	; 10
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	a3 01       	movw	r20, r6
    12ca:	33 d1       	rcall	.+614    	; 0x1532 <__ultoa_invert>
    12cc:	88 2e       	mov	r8, r24
    12ce:	86 18       	sub	r8, r6
    12d0:	44 c0       	rjmp	.+136    	; 0x135a <vfprintf+0x2c6>
    12d2:	85 37       	cpi	r24, 0x75	; 117
    12d4:	31 f4       	brne	.+12     	; 0x12e2 <vfprintf+0x24e>
    12d6:	23 2d       	mov	r18, r3
    12d8:	2f 7e       	andi	r18, 0xEF	; 239
    12da:	b2 2e       	mov	r11, r18
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	25 c0       	rjmp	.+74     	; 0x132c <vfprintf+0x298>
    12e2:	93 2d       	mov	r25, r3
    12e4:	99 7f       	andi	r25, 0xF9	; 249
    12e6:	b9 2e       	mov	r11, r25
    12e8:	8f 36       	cpi	r24, 0x6F	; 111
    12ea:	c1 f0       	breq	.+48     	; 0x131c <vfprintf+0x288>
    12ec:	18 f4       	brcc	.+6      	; 0x12f4 <vfprintf+0x260>
    12ee:	88 35       	cpi	r24, 0x58	; 88
    12f0:	79 f0       	breq	.+30     	; 0x1310 <vfprintf+0x27c>
    12f2:	ae c0       	rjmp	.+348    	; 0x1450 <vfprintf+0x3bc>
    12f4:	80 37       	cpi	r24, 0x70	; 112
    12f6:	19 f0       	breq	.+6      	; 0x12fe <vfprintf+0x26a>
    12f8:	88 37       	cpi	r24, 0x78	; 120
    12fa:	21 f0       	breq	.+8      	; 0x1304 <vfprintf+0x270>
    12fc:	a9 c0       	rjmp	.+338    	; 0x1450 <vfprintf+0x3bc>
    12fe:	e9 2f       	mov	r30, r25
    1300:	e0 61       	ori	r30, 0x10	; 16
    1302:	be 2e       	mov	r11, r30
    1304:	b4 fe       	sbrs	r11, 4
    1306:	0d c0       	rjmp	.+26     	; 0x1322 <vfprintf+0x28e>
    1308:	fb 2d       	mov	r31, r11
    130a:	f4 60       	ori	r31, 0x04	; 4
    130c:	bf 2e       	mov	r11, r31
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <vfprintf+0x28e>
    1310:	34 fe       	sbrs	r3, 4
    1312:	0a c0       	rjmp	.+20     	; 0x1328 <vfprintf+0x294>
    1314:	29 2f       	mov	r18, r25
    1316:	26 60       	ori	r18, 0x06	; 6
    1318:	b2 2e       	mov	r11, r18
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <vfprintf+0x294>
    131c:	28 e0       	ldi	r18, 0x08	; 8
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	05 c0       	rjmp	.+10     	; 0x132c <vfprintf+0x298>
    1322:	20 e1       	ldi	r18, 0x10	; 16
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	02 c0       	rjmp	.+4      	; 0x132c <vfprintf+0x298>
    1328:	20 e1       	ldi	r18, 0x10	; 16
    132a:	32 e0       	ldi	r19, 0x02	; 2
    132c:	f8 01       	movw	r30, r16
    132e:	b7 fe       	sbrs	r11, 7
    1330:	07 c0       	rjmp	.+14     	; 0x1340 <vfprintf+0x2ac>
    1332:	60 81       	ld	r22, Z
    1334:	71 81       	ldd	r23, Z+1	; 0x01
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	93 81       	ldd	r25, Z+3	; 0x03
    133a:	0c 5f       	subi	r16, 0xFC	; 252
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	06 c0       	rjmp	.+12     	; 0x134c <vfprintf+0x2b8>
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 5f       	subi	r16, 0xFE	; 254
    134a:	1f 4f       	sbci	r17, 0xFF	; 255
    134c:	a3 01       	movw	r20, r6
    134e:	f1 d0       	rcall	.+482    	; 0x1532 <__ultoa_invert>
    1350:	88 2e       	mov	r8, r24
    1352:	86 18       	sub	r8, r6
    1354:	fb 2d       	mov	r31, r11
    1356:	ff 77       	andi	r31, 0x7F	; 127
    1358:	3f 2e       	mov	r3, r31
    135a:	36 fe       	sbrs	r3, 6
    135c:	0d c0       	rjmp	.+26     	; 0x1378 <vfprintf+0x2e4>
    135e:	23 2d       	mov	r18, r3
    1360:	2e 7f       	andi	r18, 0xFE	; 254
    1362:	a2 2e       	mov	r10, r18
    1364:	89 14       	cp	r8, r9
    1366:	58 f4       	brcc	.+22     	; 0x137e <vfprintf+0x2ea>
    1368:	34 fe       	sbrs	r3, 4
    136a:	0b c0       	rjmp	.+22     	; 0x1382 <vfprintf+0x2ee>
    136c:	32 fc       	sbrc	r3, 2
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <vfprintf+0x2ee>
    1370:	83 2d       	mov	r24, r3
    1372:	8e 7e       	andi	r24, 0xEE	; 238
    1374:	a8 2e       	mov	r10, r24
    1376:	05 c0       	rjmp	.+10     	; 0x1382 <vfprintf+0x2ee>
    1378:	b8 2c       	mov	r11, r8
    137a:	a3 2c       	mov	r10, r3
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <vfprintf+0x2f0>
    137e:	b8 2c       	mov	r11, r8
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <vfprintf+0x2f0>
    1382:	b9 2c       	mov	r11, r9
    1384:	a4 fe       	sbrs	r10, 4
    1386:	0f c0       	rjmp	.+30     	; 0x13a6 <vfprintf+0x312>
    1388:	fe 01       	movw	r30, r28
    138a:	e8 0d       	add	r30, r8
    138c:	f1 1d       	adc	r31, r1
    138e:	80 81       	ld	r24, Z
    1390:	80 33       	cpi	r24, 0x30	; 48
    1392:	21 f4       	brne	.+8      	; 0x139c <vfprintf+0x308>
    1394:	9a 2d       	mov	r25, r10
    1396:	99 7e       	andi	r25, 0xE9	; 233
    1398:	a9 2e       	mov	r10, r25
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <vfprintf+0x31a>
    139c:	a2 fe       	sbrs	r10, 2
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <vfprintf+0x318>
    13a0:	b3 94       	inc	r11
    13a2:	b3 94       	inc	r11
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <vfprintf+0x31a>
    13a6:	8a 2d       	mov	r24, r10
    13a8:	86 78       	andi	r24, 0x86	; 134
    13aa:	09 f0       	breq	.+2      	; 0x13ae <vfprintf+0x31a>
    13ac:	b3 94       	inc	r11
    13ae:	a3 fc       	sbrc	r10, 3
    13b0:	10 c0       	rjmp	.+32     	; 0x13d2 <vfprintf+0x33e>
    13b2:	a0 fe       	sbrs	r10, 0
    13b4:	06 c0       	rjmp	.+12     	; 0x13c2 <vfprintf+0x32e>
    13b6:	b2 14       	cp	r11, r2
    13b8:	80 f4       	brcc	.+32     	; 0x13da <vfprintf+0x346>
    13ba:	28 0c       	add	r2, r8
    13bc:	92 2c       	mov	r9, r2
    13be:	9b 18       	sub	r9, r11
    13c0:	0d c0       	rjmp	.+26     	; 0x13dc <vfprintf+0x348>
    13c2:	b2 14       	cp	r11, r2
    13c4:	58 f4       	brcc	.+22     	; 0x13dc <vfprintf+0x348>
    13c6:	b6 01       	movw	r22, r12
    13c8:	80 e2       	ldi	r24, 0x20	; 32
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	76 d0       	rcall	.+236    	; 0x14ba <fputc>
    13ce:	b3 94       	inc	r11
    13d0:	f8 cf       	rjmp	.-16     	; 0x13c2 <vfprintf+0x32e>
    13d2:	b2 14       	cp	r11, r2
    13d4:	18 f4       	brcc	.+6      	; 0x13dc <vfprintf+0x348>
    13d6:	2b 18       	sub	r2, r11
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <vfprintf+0x34a>
    13da:	98 2c       	mov	r9, r8
    13dc:	21 2c       	mov	r2, r1
    13de:	a4 fe       	sbrs	r10, 4
    13e0:	0f c0       	rjmp	.+30     	; 0x1400 <vfprintf+0x36c>
    13e2:	b6 01       	movw	r22, r12
    13e4:	80 e3       	ldi	r24, 0x30	; 48
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	68 d0       	rcall	.+208    	; 0x14ba <fputc>
    13ea:	a2 fe       	sbrs	r10, 2
    13ec:	16 c0       	rjmp	.+44     	; 0x141a <vfprintf+0x386>
    13ee:	a1 fc       	sbrc	r10, 1
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <vfprintf+0x364>
    13f2:	88 e7       	ldi	r24, 0x78	; 120
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <vfprintf+0x368>
    13f8:	88 e5       	ldi	r24, 0x58	; 88
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	b6 01       	movw	r22, r12
    13fe:	0c c0       	rjmp	.+24     	; 0x1418 <vfprintf+0x384>
    1400:	8a 2d       	mov	r24, r10
    1402:	86 78       	andi	r24, 0x86	; 134
    1404:	51 f0       	breq	.+20     	; 0x141a <vfprintf+0x386>
    1406:	a1 fe       	sbrs	r10, 1
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0x37a>
    140a:	8b e2       	ldi	r24, 0x2B	; 43
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <vfprintf+0x37c>
    140e:	80 e2       	ldi	r24, 0x20	; 32
    1410:	a7 fc       	sbrc	r10, 7
    1412:	8d e2       	ldi	r24, 0x2D	; 45
    1414:	b6 01       	movw	r22, r12
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	50 d0       	rcall	.+160    	; 0x14ba <fputc>
    141a:	89 14       	cp	r8, r9
    141c:	30 f4       	brcc	.+12     	; 0x142a <vfprintf+0x396>
    141e:	b6 01       	movw	r22, r12
    1420:	80 e3       	ldi	r24, 0x30	; 48
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	4a d0       	rcall	.+148    	; 0x14ba <fputc>
    1426:	9a 94       	dec	r9
    1428:	f8 cf       	rjmp	.-16     	; 0x141a <vfprintf+0x386>
    142a:	8a 94       	dec	r8
    142c:	f3 01       	movw	r30, r6
    142e:	e8 0d       	add	r30, r8
    1430:	f1 1d       	adc	r31, r1
    1432:	80 81       	ld	r24, Z
    1434:	b6 01       	movw	r22, r12
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	40 d0       	rcall	.+128    	; 0x14ba <fputc>
    143a:	81 10       	cpse	r8, r1
    143c:	f6 cf       	rjmp	.-20     	; 0x142a <vfprintf+0x396>
    143e:	22 20       	and	r2, r2
    1440:	09 f4       	brne	.+2      	; 0x1444 <vfprintf+0x3b0>
    1442:	4e ce       	rjmp	.-868    	; 0x10e0 <vfprintf+0x4c>
    1444:	b6 01       	movw	r22, r12
    1446:	80 e2       	ldi	r24, 0x20	; 32
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	37 d0       	rcall	.+110    	; 0x14ba <fputc>
    144c:	2a 94       	dec	r2
    144e:	f7 cf       	rjmp	.-18     	; 0x143e <vfprintf+0x3aa>
    1450:	f6 01       	movw	r30, r12
    1452:	86 81       	ldd	r24, Z+6	; 0x06
    1454:	97 81       	ldd	r25, Z+7	; 0x07
    1456:	02 c0       	rjmp	.+4      	; 0x145c <vfprintf+0x3c8>
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	9f ef       	ldi	r25, 0xFF	; 255
    145c:	2b 96       	adiw	r28, 0x0b	; 11
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	df 90       	pop	r13
    1476:	cf 90       	pop	r12
    1478:	bf 90       	pop	r11
    147a:	af 90       	pop	r10
    147c:	9f 90       	pop	r9
    147e:	8f 90       	pop	r8
    1480:	7f 90       	pop	r7
    1482:	6f 90       	pop	r6
    1484:	5f 90       	pop	r5
    1486:	4f 90       	pop	r4
    1488:	3f 90       	pop	r3
    148a:	2f 90       	pop	r2
    148c:	08 95       	ret

0000148e <strnlen_P>:
    148e:	fc 01       	movw	r30, r24
    1490:	05 90       	lpm	r0, Z+
    1492:	61 50       	subi	r22, 0x01	; 1
    1494:	70 40       	sbci	r23, 0x00	; 0
    1496:	01 10       	cpse	r0, r1
    1498:	d8 f7       	brcc	.-10     	; 0x1490 <strnlen_P+0x2>
    149a:	80 95       	com	r24
    149c:	90 95       	com	r25
    149e:	8e 0f       	add	r24, r30
    14a0:	9f 1f       	adc	r25, r31
    14a2:	08 95       	ret

000014a4 <strnlen>:
    14a4:	fc 01       	movw	r30, r24
    14a6:	61 50       	subi	r22, 0x01	; 1
    14a8:	70 40       	sbci	r23, 0x00	; 0
    14aa:	01 90       	ld	r0, Z+
    14ac:	01 10       	cpse	r0, r1
    14ae:	d8 f7       	brcc	.-10     	; 0x14a6 <strnlen+0x2>
    14b0:	80 95       	com	r24
    14b2:	90 95       	com	r25
    14b4:	8e 0f       	add	r24, r30
    14b6:	9f 1f       	adc	r25, r31
    14b8:	08 95       	ret

000014ba <fputc>:
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	fb 01       	movw	r30, r22
    14c4:	23 81       	ldd	r18, Z+3	; 0x03
    14c6:	21 fd       	sbrc	r18, 1
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <fputc+0x16>
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	9f ef       	ldi	r25, 0xFF	; 255
    14ce:	2c c0       	rjmp	.+88     	; 0x1528 <fputc+0x6e>
    14d0:	22 ff       	sbrs	r18, 2
    14d2:	16 c0       	rjmp	.+44     	; 0x1500 <fputc+0x46>
    14d4:	46 81       	ldd	r20, Z+6	; 0x06
    14d6:	57 81       	ldd	r21, Z+7	; 0x07
    14d8:	24 81       	ldd	r18, Z+4	; 0x04
    14da:	35 81       	ldd	r19, Z+5	; 0x05
    14dc:	42 17       	cp	r20, r18
    14de:	53 07       	cpc	r21, r19
    14e0:	44 f4       	brge	.+16     	; 0x14f2 <fputc+0x38>
    14e2:	a0 81       	ld	r26, Z
    14e4:	b1 81       	ldd	r27, Z+1	; 0x01
    14e6:	9d 01       	movw	r18, r26
    14e8:	2f 5f       	subi	r18, 0xFF	; 255
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	31 83       	std	Z+1, r19	; 0x01
    14ee:	20 83       	st	Z, r18
    14f0:	8c 93       	st	X, r24
    14f2:	26 81       	ldd	r18, Z+6	; 0x06
    14f4:	37 81       	ldd	r19, Z+7	; 0x07
    14f6:	2f 5f       	subi	r18, 0xFF	; 255
    14f8:	3f 4f       	sbci	r19, 0xFF	; 255
    14fa:	37 83       	std	Z+7, r19	; 0x07
    14fc:	26 83       	std	Z+6, r18	; 0x06
    14fe:	14 c0       	rjmp	.+40     	; 0x1528 <fputc+0x6e>
    1500:	8b 01       	movw	r16, r22
    1502:	ec 01       	movw	r28, r24
    1504:	fb 01       	movw	r30, r22
    1506:	00 84       	ldd	r0, Z+8	; 0x08
    1508:	f1 85       	ldd	r31, Z+9	; 0x09
    150a:	e0 2d       	mov	r30, r0
    150c:	19 95       	eicall
    150e:	89 2b       	or	r24, r25
    1510:	e1 f6       	brne	.-72     	; 0x14ca <fputc+0x10>
    1512:	d8 01       	movw	r26, r16
    1514:	16 96       	adiw	r26, 0x06	; 6
    1516:	8d 91       	ld	r24, X+
    1518:	9c 91       	ld	r25, X
    151a:	17 97       	sbiw	r26, 0x07	; 7
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	17 96       	adiw	r26, 0x07	; 7
    1520:	9c 93       	st	X, r25
    1522:	8e 93       	st	-X, r24
    1524:	16 97       	sbiw	r26, 0x06	; 6
    1526:	ce 01       	movw	r24, r28
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	08 95       	ret

00001532 <__ultoa_invert>:
    1532:	fa 01       	movw	r30, r20
    1534:	aa 27       	eor	r26, r26
    1536:	28 30       	cpi	r18, 0x08	; 8
    1538:	51 f1       	breq	.+84     	; 0x158e <__ultoa_invert+0x5c>
    153a:	20 31       	cpi	r18, 0x10	; 16
    153c:	81 f1       	breq	.+96     	; 0x159e <__ultoa_invert+0x6c>
    153e:	e8 94       	clt
    1540:	6f 93       	push	r22
    1542:	6e 7f       	andi	r22, 0xFE	; 254
    1544:	6e 5f       	subi	r22, 0xFE	; 254
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	8f 4f       	sbci	r24, 0xFF	; 255
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	af 4f       	sbci	r26, 0xFF	; 255
    154e:	b1 e0       	ldi	r27, 0x01	; 1
    1550:	3e d0       	rcall	.+124    	; 0x15ce <__ultoa_invert+0x9c>
    1552:	b4 e0       	ldi	r27, 0x04	; 4
    1554:	3c d0       	rcall	.+120    	; 0x15ce <__ultoa_invert+0x9c>
    1556:	67 0f       	add	r22, r23
    1558:	78 1f       	adc	r23, r24
    155a:	89 1f       	adc	r24, r25
    155c:	9a 1f       	adc	r25, r26
    155e:	a1 1d       	adc	r26, r1
    1560:	68 0f       	add	r22, r24
    1562:	79 1f       	adc	r23, r25
    1564:	8a 1f       	adc	r24, r26
    1566:	91 1d       	adc	r25, r1
    1568:	a1 1d       	adc	r26, r1
    156a:	6a 0f       	add	r22, r26
    156c:	71 1d       	adc	r23, r1
    156e:	81 1d       	adc	r24, r1
    1570:	91 1d       	adc	r25, r1
    1572:	a1 1d       	adc	r26, r1
    1574:	20 d0       	rcall	.+64     	; 0x15b6 <__ultoa_invert+0x84>
    1576:	09 f4       	brne	.+2      	; 0x157a <__ultoa_invert+0x48>
    1578:	68 94       	set
    157a:	3f 91       	pop	r19
    157c:	2a e0       	ldi	r18, 0x0A	; 10
    157e:	26 9f       	mul	r18, r22
    1580:	11 24       	eor	r1, r1
    1582:	30 19       	sub	r19, r0
    1584:	30 5d       	subi	r19, 0xD0	; 208
    1586:	31 93       	st	Z+, r19
    1588:	de f6       	brtc	.-74     	; 0x1540 <__ultoa_invert+0xe>
    158a:	cf 01       	movw	r24, r30
    158c:	08 95       	ret
    158e:	46 2f       	mov	r20, r22
    1590:	47 70       	andi	r20, 0x07	; 7
    1592:	40 5d       	subi	r20, 0xD0	; 208
    1594:	41 93       	st	Z+, r20
    1596:	b3 e0       	ldi	r27, 0x03	; 3
    1598:	0f d0       	rcall	.+30     	; 0x15b8 <__ultoa_invert+0x86>
    159a:	c9 f7       	brne	.-14     	; 0x158e <__ultoa_invert+0x5c>
    159c:	f6 cf       	rjmp	.-20     	; 0x158a <__ultoa_invert+0x58>
    159e:	46 2f       	mov	r20, r22
    15a0:	4f 70       	andi	r20, 0x0F	; 15
    15a2:	40 5d       	subi	r20, 0xD0	; 208
    15a4:	4a 33       	cpi	r20, 0x3A	; 58
    15a6:	18 f0       	brcs	.+6      	; 0x15ae <__ultoa_invert+0x7c>
    15a8:	49 5d       	subi	r20, 0xD9	; 217
    15aa:	31 fd       	sbrc	r19, 1
    15ac:	40 52       	subi	r20, 0x20	; 32
    15ae:	41 93       	st	Z+, r20
    15b0:	02 d0       	rcall	.+4      	; 0x15b6 <__ultoa_invert+0x84>
    15b2:	a9 f7       	brne	.-22     	; 0x159e <__ultoa_invert+0x6c>
    15b4:	ea cf       	rjmp	.-44     	; 0x158a <__ultoa_invert+0x58>
    15b6:	b4 e0       	ldi	r27, 0x04	; 4
    15b8:	a6 95       	lsr	r26
    15ba:	97 95       	ror	r25
    15bc:	87 95       	ror	r24
    15be:	77 95       	ror	r23
    15c0:	67 95       	ror	r22
    15c2:	ba 95       	dec	r27
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <__ultoa_invert+0x86>
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	61 05       	cpc	r22, r1
    15ca:	71 05       	cpc	r23, r1
    15cc:	08 95       	ret
    15ce:	9b 01       	movw	r18, r22
    15d0:	ac 01       	movw	r20, r24
    15d2:	0a 2e       	mov	r0, r26
    15d4:	06 94       	lsr	r0
    15d6:	57 95       	ror	r21
    15d8:	47 95       	ror	r20
    15da:	37 95       	ror	r19
    15dc:	27 95       	ror	r18
    15de:	ba 95       	dec	r27
    15e0:	c9 f7       	brne	.-14     	; 0x15d4 <__ultoa_invert+0xa2>
    15e2:	62 0f       	add	r22, r18
    15e4:	73 1f       	adc	r23, r19
    15e6:	84 1f       	adc	r24, r20
    15e8:	95 1f       	adc	r25, r21
    15ea:	a0 1d       	adc	r26, r0
    15ec:	08 95       	ret

000015ee <_exit>:
    15ee:	f8 94       	cli

000015f0 <__stop_program>:
    15f0:	ff cf       	rjmp	.-2      	; 0x15f0 <__stop_program>
