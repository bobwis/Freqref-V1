
Freqref.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  00001138  000011cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001138  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b9  00800242  00800242  0000120e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000120e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  000012b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000485a  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017fa  00000000  00000000  00005f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d63  00000000  00000000  00007714  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000998  00000000  00000000  00009478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001843  00000000  00000000  00009e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef1  00000000  00000000  0000b653  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000d544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4e c2       	rjmp	.+1180   	; 0x4fe <__vector_24>
      62:	00 00       	nop
      64:	c6 c2       	rjmp	.+1420   	; 0x5f2 <__vector_25>
      66:	00 00       	nop
      68:	ec c2       	rjmp	.+1496   	; 0x642 <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	d7 c1       	rjmp	.+942    	; 0x428 <__vector_30>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c3       	rjmp	.+1614   	; 0x6e0 <__vector_36>
      92:	00 00       	nop
      94:	4e c3       	rjmp	.+1692   	; 0x732 <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	06 c5       	rjmp	.+2572   	; 0xab6 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c5       	rjmp	.+2598   	; 0xae4 <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	81 c3       	rjmp	.+1794   	; 0x7d0 <__vector_51>
      ce:	00 00       	nop
      d0:	a8 c3       	rjmp	.+1872   	; 0x822 <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	13 c4       	rjmp	.+2086   	; 0x900 <__vector_54>
      da:	00 00       	nop
      dc:	3a c4       	rjmp	.+2164   	; 0x952 <__vector_55>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e3       	ldi	r30, 0x38	; 56
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 34       	cpi	r26, 0x42	; 66
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a2 e4       	ldi	r26, 0x42	; 66
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 3f       	cpi	r26, 0xFB	; 251
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	30 d5       	rcall	.+2656   	; 0xb80 <main>
     120:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     126:	fd c0       	rjmp	.+506    	; 0x322 <system_init>
     128:	08 95       	ret

0000012a <getlcdpkt>:

#include "timeutils.h"
#include <stdio.h>

int getlcdpkt(unsigned char buffer[])
{
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	00 d0       	rcall	.+0      	; 0x138 <getlcdpkt+0xe>
     138:	1f 92       	push	r1
     13a:	1f 92       	push	r1
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
	volatile int termcnt, i;
	unsigned int now;
	volatile unsigned char ch;

	now = fastmsectime();
     140:	7c 01       	movw	r14, r24
     142:	7f d4       	rcall	.+2302   	; 0xa42 <fastmsectime>
	termcnt = 0;
     144:	8c 01       	movw	r16, r24
     146:	1a 82       	std	Y+2, r1	; 0x02
	i = 0;
     148:	19 82       	std	Y+1, r1	; 0x01
	while(termcnt < 3)
	{
		if (USART_2_is_rx_ready())
     14a:	1c 82       	std	Y+4, r1	; 0x04
     14c:	1b 82       	std	Y+3, r1	; 0x03
		{
			now = fastmsectime();
     14e:	25 c0       	rjmp	.+74     	; 0x19a <getlcdpkt+0x70>
     150:	9a d3       	rcall	.+1844   	; 0x886 <USART_2_is_rx_ready>
			ch = USART_2_read();
     152:	88 23       	and	r24, r24
     154:	d9 f0       	breq	.+54     	; 0x18c <getlcdpkt+0x62>
     156:	75 d4       	rcall	.+2282   	; 0xa42 <fastmsectime>
			buffer[i++] = ch;
     158:	8c 01       	movw	r16, r24
     15a:	9c d3       	rcall	.+1848   	; 0x894 <USART_2_read>
     15c:	8d 83       	std	Y+5, r24	; 0x05
     15e:	8b 81       	ldd	r24, Y+3	; 0x03
     160:	9c 81       	ldd	r25, Y+4	; 0x04
     162:	9c 01       	movw	r18, r24
     164:	2f 5f       	subi	r18, 0xFF	; 255
     166:	3f 4f       	sbci	r19, 0xFF	; 255
     168:	3c 83       	std	Y+4, r19	; 0x04
     16a:	2b 83       	std	Y+3, r18	; 0x03
     16c:	2d 81       	ldd	r18, Y+5	; 0x05
     16e:	f7 01       	movw	r30, r14
			if (ch == 0xff)
     170:	e8 0f       	add	r30, r24
     172:	f9 1f       	adc	r31, r25
     174:	20 83       	st	Z, r18
			{
				termcnt++;
     176:	8d 81       	ldd	r24, Y+5	; 0x05
     178:	8f 3f       	cpi	r24, 0xFF	; 255
     17a:	31 f4       	brne	.+12     	; 0x188 <getlcdpkt+0x5e>
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	9a 81       	ldd	r25, Y+2	; 0x02
			}
			else
			{
				termcnt=0;
     180:	01 96       	adiw	r24, 0x01	; 1
     182:	9a 83       	std	Y+2, r25	; 0x02
			}
		}
		if (fastmsectime() > (now + 5000/4))		// timeout 5 secs
     184:	89 83       	std	Y+1, r24	; 0x01
     186:	02 c0       	rjmp	.+4      	; 0x18c <getlcdpkt+0x62>
     188:	1a 82       	std	Y+2, r1	; 0x02
     18a:	19 82       	std	Y+1, r1	; 0x01
     18c:	5a d4       	rcall	.+2228   	; 0xa42 <fastmsectime>
     18e:	98 01       	movw	r18, r16
     190:	2e 51       	subi	r18, 0x1E	; 30
     192:	3b 4f       	sbci	r19, 0xFB	; 251
	volatile unsigned char ch;

	now = fastmsectime();
	termcnt = 0;
	i = 0;
	while(termcnt < 3)
     194:	28 17       	cp	r18, r24
     196:	39 07       	cpc	r19, r25
     198:	38 f0       	brcs	.+14     	; 0x1a8 <getlcdpkt+0x7e>
     19a:	89 81       	ldd	r24, Y+1	; 0x01
			}
		}
		if (fastmsectime() > (now + 5000/4))		// timeout 5 secs
		return(-1);
	}
	return(i);
     19c:	9a 81       	ldd	r25, Y+2	; 0x02
     19e:	03 97       	sbiw	r24, 0x03	; 3
     1a0:	bc f2       	brlt	.-82     	; 0x150 <getlcdpkt+0x26>
			{
				termcnt=0;
			}
		}
		if (fastmsectime() > (now + 5000/4))		// timeout 5 secs
		return(-1);
     1a2:	8b 81       	ldd	r24, Y+3	; 0x03
     1a4:	9c 81       	ldd	r25, Y+4	; 0x04
	}
	return(i);
}
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <getlcdpkt+0x82>
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	9f ef       	ldi	r25, 0xFF	; 255
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	08 95       	ret

000001c4 <decodelcd>:

void decodelcd()
{
     1c4:	cf 92       	push	r12
     1c6:	df 92       	push	r13
     1c8:	ef 92       	push	r14
     1ca:	ff 92       	push	r15
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	c4 54       	subi	r28, 0x44	; 68
     1da:	d1 09       	sbc	r29, r1
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
	volatile int i, j;
	unsigned char buffer[64];

	j = -1;
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	9f ef       	ldi	r25, 0xFF	; 255
     1ea:	9c 83       	std	Y+4, r25	; 0x04
     1ec:	8b 83       	std	Y+3, r24	; 0x03
			}
			printf("\n\r");
		}
		else
		{
			printf("Still waiting for LCD press\n\r");
     1ee:	0f 2e       	mov	r0, r31
     1f0:	f6 e1       	ldi	r31, 0x16	; 22
     1f2:	cf 2e       	mov	r12, r31
     1f4:	f2 e0       	ldi	r31, 0x02	; 2
     1f6:	df 2e       	mov	r13, r31
     1f8:	f0 2d       	mov	r31, r0
		j = getlcdpkt(buffer);
		if (j > 0)				// we got something valid
		{
			for(i=0; i<j; i++)
			{
				printf("0x%02x ",buffer[i]);
     1fa:	0e e0       	ldi	r16, 0x0E	; 14
     1fc:	12 e0       	ldi	r17, 0x02	; 2
			}
			printf("\n\r");
     1fe:	0f 2e       	mov	r0, r31
     200:	ff e3       	ldi	r31, 0x3F	; 63
     202:	ef 2e       	mov	r14, r31
     204:	f2 e0       	ldi	r31, 0x02	; 2
     206:	ff 2e       	mov	r15, r31
     208:	f0 2d       	mov	r31, r0
{
	volatile int i, j;
	unsigned char buffer[64];

	j = -1;
	while (j)
     20a:	3c c0       	rjmp	.+120    	; 0x284 <decodelcd+0xc0>
	{
		j = getlcdpkt(buffer);
     20c:	ce 01       	movw	r24, r28
     20e:	05 96       	adiw	r24, 0x05	; 5
     210:	8c df       	rcall	.-232    	; 0x12a <getlcdpkt>
     212:	9c 83       	std	Y+4, r25	; 0x04
     214:	8b 83       	std	Y+3, r24	; 0x03
		if (j > 0)				// we got something valid
     216:	8b 81       	ldd	r24, Y+3	; 0x03
     218:	9c 81       	ldd	r25, Y+4	; 0x04
     21a:	18 16       	cp	r1, r24
     21c:	19 06       	cpc	r1, r25
     21e:	6c f5       	brge	.+90     	; 0x27a <decodelcd+0xb6>
		{
			for(i=0; i<j; i++)
     220:	1a 82       	std	Y+2, r1	; 0x02
     222:	19 82       	std	Y+1, r1	; 0x01
     224:	29 81       	ldd	r18, Y+1	; 0x01
     226:	3a 81       	ldd	r19, Y+2	; 0x02
     228:	8b 81       	ldd	r24, Y+3	; 0x03
     22a:	9c 81       	ldd	r25, Y+4	; 0x04
     22c:	28 17       	cp	r18, r24
     22e:	39 07       	cpc	r19, r25
     230:	f4 f4       	brge	.+60     	; 0x26e <decodelcd+0xaa>
			{
				printf("0x%02x ",buffer[i]);
     232:	e9 81       	ldd	r30, Y+1	; 0x01
     234:	fa 81       	ldd	r31, Y+2	; 0x02
     236:	85 e0       	ldi	r24, 0x05	; 5
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	8c 0f       	add	r24, r28
     23c:	9d 1f       	adc	r25, r29
     23e:	e8 0f       	add	r30, r24
     240:	f9 1f       	adc	r31, r25
     242:	80 81       	ld	r24, Z
     244:	1f 92       	push	r1
     246:	8f 93       	push	r24
     248:	1f 93       	push	r17
     24a:	0f 93       	push	r16
     24c:	b3 d4       	rcall	.+2406   	; 0xbb4 <printf>
	while (j)
	{
		j = getlcdpkt(buffer);
		if (j > 0)				// we got something valid
		{
			for(i=0; i<j; i++)
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	9a 83       	std	Y+2, r25	; 0x02
     256:	89 83       	std	Y+1, r24	; 0x01
     258:	29 81       	ldd	r18, Y+1	; 0x01
     25a:	3a 81       	ldd	r19, Y+2	; 0x02
     25c:	8b 81       	ldd	r24, Y+3	; 0x03
     25e:	9c 81       	ldd	r25, Y+4	; 0x04
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	28 17       	cp	r18, r24
     26a:	39 07       	cpc	r19, r25
			{
				printf("0x%02x ",buffer[i]);
			}
			printf("\n\r");
     26c:	14 f3       	brlt	.-60     	; 0x232 <decodelcd+0x6e>
     26e:	ff 92       	push	r15
     270:	ef 92       	push	r14
     272:	a0 d4       	rcall	.+2368   	; 0xbb4 <printf>
     274:	0f 90       	pop	r0
		}
		else
		{
			printf("Still waiting for LCD press\n\r");
     276:	0f 90       	pop	r0
     278:	05 c0       	rjmp	.+10     	; 0x284 <decodelcd+0xc0>
     27a:	df 92       	push	r13
     27c:	cf 92       	push	r12
     27e:	9a d4       	rcall	.+2356   	; 0xbb4 <printf>
     280:	0f 90       	pop	r0
{
	volatile int i, j;
	unsigned char buffer[64];

	j = -1;
	while (j)
     282:	0f 90       	pop	r0
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	9c 81       	ldd	r25, Y+4	; 0x04
     288:	89 2b       	or	r24, r25
     28a:	09 f0       	breq	.+2      	; 0x28e <decodelcd+0xca>
		else
		{
			printf("Still waiting for LCD press\n\r");
		}
	}
     28c:	bf cf       	rjmp	.-130    	; 0x20c <decodelcd+0x48>
     28e:	cc 5b       	subi	r28, 0xBC	; 188
     290:	df 4f       	sbci	r29, 0xFF	; 255
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	df 90       	pop	r13
     2aa:	cf 90       	pop	r12
     2ac:	08 95       	ret

000002ae <SPI_0_initialization>:
}

void TIMER_1_initialization(void)
{

	TIMER_1_init();
     2ae:	23 98       	cbi	0x04, 3	; 4
     2b0:	2b 98       	cbi	0x05, 3	; 5
     2b2:	22 9a       	sbi	0x04, 2	; 4
     2b4:	2a 98       	cbi	0x05, 2	; 5
     2b6:	21 9a       	sbi	0x04, 1	; 4
     2b8:	29 98       	cbi	0x05, 1	; 5
     2ba:	20 9a       	sbi	0x04, 0	; 4
     2bc:	28 98       	cbi	0x05, 0	; 5
     2be:	12 c1       	rjmp	.+548    	; 0x4e4 <SPI_0_init>
     2c0:	08 95       	ret

000002c2 <USART_0_initialization>:
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
     2c2:	68 98       	cbi	0x0d, 0	; 13
		DDRE &= ~(1 << pin);

		PORTE |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTE &= ~(1 << pin);
     2c4:	70 98       	cbi	0x0e, 0	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
     2c6:	69 9a       	sbi	0x0d, 1	; 13
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     2c8:	71 98       	cbi	0x0e, 1	; 14
     2ca:	ed c1       	rjmp	.+986    	; 0x6a6 <USART_0_init>
     2cc:	08 95       	ret

000002ce <USART_1_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     2ce:	52 98       	cbi	0x0a, 2	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     2d0:	5a 98       	cbi	0x0b, 2	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     2d2:	53 9a       	sbi	0x0a, 3	; 10
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_1_init();
     2d4:	5b 98       	cbi	0x0b, 3	; 11
     2d6:	5f c2       	rjmp	.+1214   	; 0x796 <USART_1_init>
     2d8:	08 95       	ret

000002da <USART_2_initialization>:
 */
static inline void PORTH_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
     2da:	a1 e0       	ldi	r26, 0x01	; 1
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	8c 91       	ld	r24, X
     2e0:	8e 7f       	andi	r24, 0xFE	; 254
     2e2:	8c 93       	st	X, r24
		DDRH &= ~(1 << pin);

		PORTH |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTH &= ~(1 << pin);
     2e4:	e2 e0       	ldi	r30, 0x02	; 2
     2e6:	f1 e0       	ldi	r31, 0x01	; 1
     2e8:	80 81       	ld	r24, Z
     2ea:	8e 7f       	andi	r24, 0xFE	; 254
     2ec:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRH |= 1 << pin;
     2ee:	8c 91       	ld	r24, X
     2f0:	82 60       	ori	r24, 0x02	; 2
     2f2:	8c 93       	st	X, r24
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
     2f4:	80 81       	ld	r24, Z
     2f6:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_2_init();
     2f8:	80 83       	st	Z, r24
     2fa:	e5 c2       	rjmp	.+1482   	; 0x8c6 <USART_2_init>
     2fc:	08 95       	ret

000002fe <USART_3_initialization>:
 */
static inline void PORTJ_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
     2fe:	a4 e0       	ldi	r26, 0x04	; 4
     300:	b1 e0       	ldi	r27, 0x01	; 1
     302:	8c 91       	ld	r24, X
     304:	8e 7f       	andi	r24, 0xFE	; 254
     306:	8c 93       	st	X, r24
		DDRJ &= ~(1 << pin);

		PORTJ |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTJ &= ~(1 << pin);
     308:	e5 e0       	ldi	r30, 0x05	; 5
     30a:	f1 e0       	ldi	r31, 0x01	; 1
     30c:	80 81       	ld	r24, Z
     30e:	8e 7f       	andi	r24, 0xFE	; 254
     310:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRJ |= 1 << pin;
     312:	8c 91       	ld	r24, X
     314:	82 60       	ori	r24, 0x02	; 2
     316:	8c 93       	st	X, r24
static inline void PORTJ_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTJ |= 1 << pin;
	} else {
		PORTJ &= ~(1 << pin);
     318:	80 81       	ld	r24, Z
     31a:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_3_init();
     31c:	80 83       	st	Z, r24
     31e:	6e c3       	rjmp	.+1756   	; 0x9fc <USART_3_init>
     320:	08 95       	ret

00000322 <system_init>:
     322:	8f e3       	ldi	r24, 0x3F	; 63
     324:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
     328:	8f ee       	ldi	r24, 0xEF	; 239
     32a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     32e:	81 b1       	in	r24, 0x01	; 1
     330:	11 b8       	out	0x01, r1	; 1
     332:	82 b1       	in	r24, 0x02	; 2
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	82 b9       	out	0x02, r24	; 2
     338:	94 b1       	in	r25, 0x04	; 4
     33a:	14 b8       	out	0x04, r1	; 4
     33c:	95 b1       	in	r25, 0x05	; 5
     33e:	85 b9       	out	0x05, r24	; 5
     340:	97 b1       	in	r25, 0x07	; 7
     342:	17 b8       	out	0x07, r1	; 7
     344:	98 b1       	in	r25, 0x08	; 8
     346:	88 b9       	out	0x08, r24	; 8
     348:	9a b1       	in	r25, 0x0a	; 10
     34a:	1a b8       	out	0x0a, r1	; 10
     34c:	9b b1       	in	r25, 0x0b	; 11
     34e:	8b b9       	out	0x0b, r24	; 11
     350:	9d b1       	in	r25, 0x0d	; 13
     352:	1d b8       	out	0x0d, r1	; 13
     354:	9e b1       	in	r25, 0x0e	; 14
     356:	8e b9       	out	0x0e, r24	; 14
     358:	90 b3       	in	r25, 0x10	; 16
     35a:	10 ba       	out	0x10, r1	; 16
     35c:	91 b3       	in	r25, 0x11	; 17
     35e:	81 bb       	out	0x11, r24	; 17
     360:	93 b3       	in	r25, 0x13	; 19
     362:	90 7c       	andi	r25, 0xC0	; 192
     364:	93 bb       	out	0x13, r25	; 19
     366:	94 b3       	in	r25, 0x14	; 20
     368:	9f 63       	ori	r25, 0x3F	; 63
     36a:	94 bb       	out	0x14, r25	; 20
     36c:	e1 e0       	ldi	r30, 0x01	; 1
     36e:	f1 e0       	ldi	r31, 0x01	; 1
     370:	90 81       	ld	r25, Z
     372:	10 82       	st	Z, r1
     374:	e2 e0       	ldi	r30, 0x02	; 2
     376:	f1 e0       	ldi	r31, 0x01	; 1
     378:	90 81       	ld	r25, Z
     37a:	80 83       	st	Z, r24
     37c:	e4 e0       	ldi	r30, 0x04	; 4
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	90 81       	ld	r25, Z
     382:	10 82       	st	Z, r1
     384:	e5 e0       	ldi	r30, 0x05	; 5
     386:	f1 e0       	ldi	r31, 0x01	; 1
     388:	90 81       	ld	r25, Z
     38a:	80 83       	st	Z, r24
     38c:	e7 e0       	ldi	r30, 0x07	; 7
     38e:	f1 e0       	ldi	r31, 0x01	; 1
     390:	90 81       	ld	r25, Z
     392:	10 82       	st	Z, r1
     394:	e8 e0       	ldi	r30, 0x08	; 8
     396:	f1 e0       	ldi	r31, 0x01	; 1
     398:	90 81       	ld	r25, Z
     39a:	80 83       	st	Z, r24
     39c:	aa e0       	ldi	r26, 0x0A	; 10
     39e:	b1 e0       	ldi	r27, 0x01	; 1
     3a0:	9c 91       	ld	r25, X
     3a2:	1c 92       	st	X, r1
     3a4:	eb e0       	ldi	r30, 0x0B	; 11
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	90 81       	ld	r25, Z
     3aa:	80 83       	st	Z, r24
     3ac:	0a 9a       	sbi	0x01, 2	; 1
     3ae:	12 98       	cbi	0x02, 2	; 2
     3b0:	0b 9a       	sbi	0x01, 3	; 1
     3b2:	13 98       	cbi	0x02, 3	; 2
     3b4:	0c 9a       	sbi	0x01, 4	; 1
     3b6:	14 98       	cbi	0x02, 4	; 2
     3b8:	0d 9a       	sbi	0x01, 5	; 1
     3ba:	15 98       	cbi	0x02, 5	; 2
     3bc:	0e 9a       	sbi	0x01, 6	; 1
     3be:	16 98       	cbi	0x02, 6	; 2
     3c0:	0f 9a       	sbi	0x01, 7	; 1
     3c2:	17 98       	cbi	0x02, 7	; 2
     3c4:	38 98       	cbi	0x07, 0	; 7
     3c6:	40 98       	cbi	0x08, 0	; 8
     3c8:	39 98       	cbi	0x07, 1	; 7
     3ca:	41 98       	cbi	0x08, 1	; 8
     3cc:	3a 98       	cbi	0x07, 2	; 7
     3ce:	42 98       	cbi	0x08, 2	; 8
     3d0:	3b 98       	cbi	0x07, 3	; 7
     3d2:	43 98       	cbi	0x08, 3	; 8
     3d4:	3c 98       	cbi	0x07, 4	; 7
     3d6:	44 98       	cbi	0x08, 4	; 8
     3d8:	3d 98       	cbi	0x07, 5	; 7
     3da:	45 98       	cbi	0x08, 5	; 8
     3dc:	3e 98       	cbi	0x07, 6	; 7
     3de:	46 98       	cbi	0x08, 6	; 8
     3e0:	3f 98       	cbi	0x07, 7	; 7
     3e2:	47 98       	cbi	0x08, 7	; 8
     3e4:	8c 91       	ld	r24, X
     3e6:	81 60       	ori	r24, 0x01	; 1
     3e8:	8c 93       	st	X, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	8e 7f       	andi	r24, 0xFE	; 254
     3ee:	80 83       	st	Z, r24
     3f0:	8c 91       	ld	r24, X
     3f2:	82 60       	ori	r24, 0x02	; 2
     3f4:	8c 93       	st	X, r24
     3f6:	80 81       	ld	r24, Z
     3f8:	82 60       	ori	r24, 0x02	; 2
     3fa:	80 83       	st	Z, r24
     3fc:	8c 91       	ld	r24, X
     3fe:	84 60       	ori	r24, 0x04	; 4
     400:	8c 93       	st	X, r24
     402:	80 81       	ld	r24, Z
     404:	84 60       	ori	r24, 0x04	; 4
     406:	80 83       	st	Z, r24
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	60 e8       	ldi	r22, 0x80	; 128
     40c:	81 e6       	ldi	r24, 0x61	; 97
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	61 d0       	rcall	.+194    	; 0x4d4 <protected_write_io>
     412:	13 be       	out	0x33, r1	; 51
     414:	15 be       	out	0x35, r1	; 53
     416:	58 d0       	rcall	.+176    	; 0x4c8 <FLASH_0_init>
     418:	4a df       	rcall	.-364    	; 0x2ae <SPI_0_initialization>
     41a:	cb d0       	rcall	.+406    	; 0x5b2 <TIMER_0_init>
     41c:	d7 d0       	rcall	.+430    	; 0x5cc <TIMER_1_init>
     41e:	51 df       	rcall	.-350    	; 0x2c2 <USART_0_initialization>
     420:	56 df       	rcall	.-340    	; 0x2ce <USART_1_initialization>
     422:	5b df       	rcall	.-330    	; 0x2da <USART_2_initialization>
     424:	6c cf       	rjmp	.-296    	; 0x2fe <USART_3_initialization>
     426:	08 95       	ret

00000428 <__vector_30>:
 *
 * \return Nothing.
 */
void FLASH_0_register_callback(eeprom_write_done_cb_t f)
{
	FLASH_0_desc.cb = f;
     428:	1f 92       	push	r1
     42a:	0f 92       	push	r0
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	0f 92       	push	r0
     430:	11 24       	eor	r1, r1
     432:	0b b6       	in	r0, 0x3b	; 59
     434:	0f 92       	push	r0
     436:	2f 93       	push	r18
     438:	3f 93       	push	r19
     43a:	4f 93       	push	r20
     43c:	5f 93       	push	r21
     43e:	6f 93       	push	r22
     440:	7f 93       	push	r23
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	af 93       	push	r26
     448:	bf 93       	push	r27
     44a:	ef 93       	push	r30
     44c:	ff 93       	push	r31
     44e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <__data_end+0x5>
     452:	81 11       	cpse	r24, r1
     454:	0e c0       	rjmp	.+28     	; 0x472 <__vector_30+0x4a>
     456:	e2 e4       	ldi	r30, 0x42	; 66
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	10 82       	st	Z, r1
     45c:	fb 98       	cbi	0x1f, 3	; 31
     45e:	86 81       	ldd	r24, Z+6	; 0x06
     460:	97 81       	ldd	r25, Z+7	; 0x07
     462:	89 2b       	or	r24, r25
     464:	f1 f0       	breq	.+60     	; 0x4a2 <__vector_30+0x7a>
     466:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <__data_end+0x6>
     46a:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <__data_end+0x7>
     46e:	19 95       	eicall
     470:	18 c0       	rjmp	.+48     	; 0x4a2 <__vector_30+0x7a>
     472:	e2 e4       	ldi	r30, 0x42	; 66
     474:	f2 e0       	ldi	r31, 0x02	; 2
     476:	81 81       	ldd	r24, Z+1	; 0x01
     478:	92 81       	ldd	r25, Z+2	; 0x02
     47a:	9c 01       	movw	r18, r24
     47c:	2f 5f       	subi	r18, 0xFF	; 255
     47e:	3f 4f       	sbci	r19, 0xFF	; 255
     480:	32 83       	std	Z+2, r19	; 0x02
     482:	21 83       	std	Z+1, r18	; 0x01
     484:	92 bd       	out	0x22, r25	; 34
     486:	81 bd       	out	0x21, r24	; 33
     488:	a3 81       	ldd	r26, Z+3	; 0x03
     48a:	b4 81       	ldd	r27, Z+4	; 0x04
     48c:	cd 01       	movw	r24, r26
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	94 83       	std	Z+4, r25	; 0x04
     492:	83 83       	std	Z+3, r24	; 0x03
     494:	8c 91       	ld	r24, X
     496:	80 bd       	out	0x20, r24	; 32
     498:	85 81       	ldd	r24, Z+5	; 0x05
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	85 83       	std	Z+5, r24	; 0x05
     49e:	fa 9a       	sbi	0x1f, 2	; 31
     4a0:	f9 9a       	sbi	0x1f, 1	; 31
     4a2:	ff 91       	pop	r31
     4a4:	ef 91       	pop	r30
     4a6:	bf 91       	pop	r27
     4a8:	af 91       	pop	r26
     4aa:	9f 91       	pop	r25
     4ac:	8f 91       	pop	r24
     4ae:	7f 91       	pop	r23
     4b0:	6f 91       	pop	r22
     4b2:	5f 91       	pop	r21
     4b4:	4f 91       	pop	r20
     4b6:	3f 91       	pop	r19
     4b8:	2f 91       	pop	r18
     4ba:	0f 90       	pop	r0
     4bc:	0b be       	out	0x3b, r0	; 59
     4be:	0f 90       	pop	r0
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	18 95       	reti

000004c8 <FLASH_0_init>:
	//		 | 0 << RWWSRE /* Read-While-Write Section Enable: disabled */
	//		 | 0 << SIGRD /* Signature Row Read: disabled */
	//		 | 0 << RWWSB /* Read-While-Write Busy: disabled */
	//		 | 0 << SPMIE; /* SPM Interrupt Enable: disabled */

	FLASH_0_desc.cb = NULL;
     4c8:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <__data_end+0x7>
     4cc:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <__data_end+0x6>
	return 0;
}
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	08 95       	ret

000004d4 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     4d4:	2f b7       	in	r18, 0x3f	; 63
	cli
     4d6:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     4d8:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     4da:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     4dc:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     4de:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     4e0:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     4e2:	08 95       	ret

000004e4 <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
     4e4:	e4 e6       	ldi	r30, 0x64	; 100
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	8b 7f       	andi	r24, 0xFB	; 251
     4ec:	80 83       	st	Z, r24
     4ee:	81 e5       	ldi	r24, 0x51	; 81
     4f0:	8c bd       	out	0x2c, r24	; 44
     4f2:	ea e4       	ldi	r30, 0x4A	; 74
     4f4:	f2 e0       	ldi	r31, 0x02	; 2
     4f6:	10 82       	st	Z, r1
     4f8:	16 82       	std	Z+6, r1	; 0x06
     4fa:	15 82       	std	Z+5, r1	; 0x05
     4fc:	08 95       	ret

000004fe <__vector_24>:
}

ISR(SPI_STC_vect)
{
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	0f 92       	push	r0
     506:	11 24       	eor	r1, r1
     508:	0b b6       	in	r0, 0x3b	; 59
     50a:	0f 92       	push	r0
     50c:	2f 93       	push	r18
     50e:	3f 93       	push	r19
     510:	4f 93       	push	r20
     512:	5f 93       	push	r21
     514:	6f 93       	push	r22
     516:	7f 93       	push	r23
     518:	8f 93       	push	r24
     51a:	9f 93       	push	r25
     51c:	af 93       	push	r26
     51e:	bf 93       	push	r27
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	ef 93       	push	r30
     526:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
     528:	9e b5       	in	r25, 0x2e	; 46
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
     52a:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <SPI_0_desc+0x4>
     52e:	82 30       	cpi	r24, 0x02	; 2
     530:	11 f1       	breq	.+68     	; 0x576 <__vector_24+0x78>
		*SPI_0_desc.data = rdata;
     532:	ca e4       	ldi	r28, 0x4A	; 74
     534:	d2 e0       	ldi	r29, 0x02	; 2
     536:	a9 81       	ldd	r26, Y+1	; 0x01
     538:	ba 81       	ldd	r27, Y+2	; 0x02
     53a:	fd 01       	movw	r30, r26
     53c:	91 93       	st	Z+, r25
	}

	SPI_0_desc.data++;
     53e:	fa 83       	std	Y+2, r31	; 0x02
     540:	e9 83       	std	Y+1, r30	; 0x01

	if (SPI_0_desc.type != SPI_READ)
     542:	81 30       	cpi	r24, 0x01	; 1
     544:	19 f0       	breq	.+6      	; 0x54c <__vector_24+0x4e>
		wdata = *SPI_0_desc.data;
     546:	11 96       	adiw	r26, 0x01	; 1
     548:	9c 91       	ld	r25, X
     54a:	01 c0       	rjmp	.+2      	; 0x54e <__vector_24+0x50>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
	uint8_t wdata = 0;
     54c:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
     54e:	ea e4       	ldi	r30, 0x4A	; 74
     550:	f2 e0       	ldi	r31, 0x02	; 2
     552:	83 81       	ldd	r24, Z+3	; 0x03
     554:	81 50       	subi	r24, 0x01	; 1
     556:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
     558:	88 23       	and	r24, r24
     55a:	11 f0       	breq	.+4      	; 0x560 <__vector_24+0x62>
		// more data to send, send a byte
		SPDR = wdata;
     55c:	9e bd       	out	0x2e, r25	; 46
     55e:	14 c0       	rjmp	.+40     	; 0x588 <__vector_24+0x8a>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
     560:	ea e4       	ldi	r30, 0x4A	; 74
     562:	f2 e0       	ldi	r31, 0x02	; 2
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
     568:	05 80       	ldd	r0, Z+5	; 0x05
     56a:	f6 81       	ldd	r31, Z+6	; 0x06
     56c:	e0 2d       	mov	r30, r0
     56e:	30 97       	sbiw	r30, 0x00	; 0
     570:	59 f0       	breq	.+22     	; 0x588 <__vector_24+0x8a>
			SPI_0_desc.cb();
     572:	19 95       	eicall
		}
	}
}
     574:	09 c0       	rjmp	.+18     	; 0x588 <__vector_24+0x8a>
	uint8_t wdata = 0;
	if (SPI_0_desc.type != SPI_WRITE) {
		*SPI_0_desc.data = rdata;
	}

	SPI_0_desc.data++;
     576:	ea e4       	ldi	r30, 0x4A	; 74
     578:	f2 e0       	ldi	r31, 0x02	; 2
     57a:	a1 81       	ldd	r26, Z+1	; 0x01
     57c:	b2 81       	ldd	r27, Z+2	; 0x02
     57e:	cd 01       	movw	r24, r26
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	92 83       	std	Z+2, r25	; 0x02
     584:	81 83       	std	Z+1, r24	; 0x01
     586:	df cf       	rjmp	.-66     	; 0x546 <__vector_24+0x48>
		SPI_0_desc.status = SPI_DONE;
		if (SPI_0_desc.cb != NULL) {
			SPI_0_desc.cb();
		}
	}
}
     588:	ff 91       	pop	r31
     58a:	ef 91       	pop	r30
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	bf 91       	pop	r27
     592:	af 91       	pop	r26
     594:	9f 91       	pop	r25
     596:	8f 91       	pop	r24
     598:	7f 91       	pop	r23
     59a:	6f 91       	pop	r22
     59c:	5f 91       	pop	r21
     59e:	4f 91       	pop	r20
     5a0:	3f 91       	pop	r19
     5a2:	2f 91       	pop	r18
     5a4:	0f 90       	pop	r0
     5a6:	0b be       	out	0x3b, r0	; 59
     5a8:	0f 90       	pop	r0
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	0f 90       	pop	r0
     5ae:	1f 90       	pop	r1
     5b0:	18 95       	reti

000005b2 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC4 */
	PRR1 &= ~(1 << PRTIM4);
     5b2:	e5 e6       	ldi	r30, 0x65	; 101
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	8f 7e       	andi	r24, 0xEF	; 239
     5ba:	80 83       	st	Z, r24

	// TCCR4A = (0 << COM4A1) | (0 << COM4A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM4B1) | (0 << COM4B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM41) | (0 << WGM40); /* TC16 Mode 0 Normal */

	TCCR4B = (0 << WGM43) | (0 << WGM42)                /* TC16 Mode 0 Normal */
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

	// OCR4A = 0; /* Output compare A: 0 */

	// OCR4B = 0; /* Output compare B: 0 */

	TIMSK4 = 0 << OCIE4B   /* Output Compare B Match Interrupt Enable: disabled */
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	         | 1 << OCIE4A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE4  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE4; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	08 95       	ret

000005cc <TIMER_1_init>:
 */
int8_t TIMER_1_init()
{

	/* Enable TC5 */
	PRR1 &= ~(1 << PRTIM5);
     5cc:	e5 e6       	ldi	r30, 0x65	; 101
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	8f 7d       	andi	r24, 0xDF	; 223
     5d4:	80 83       	st	Z, r24

	// TCCR5A = (0 << COM5A1) | (0 << COM5A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM5B1) | (0 << COM5B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM51) | (0 << WGM50); /* TC16 Mode 0 Normal */

	TCCR5B = (0 << WGM53) | (0 << WGM52)                /* TC16 Mode 0 Normal */
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
	         | 0 << ICES5                               /* Input Capture Edge Select: disabled */
	         | (0 << CS52) | (0 << CS51) | (1 << CS50); /* No prescaling */

	// ICR5 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR5A = 16000; /* Output compare A: 16000 */
     5dc:	80 e8       	ldi	r24, 0x80	; 128
     5de:	9e e3       	ldi	r25, 0x3E	; 62
     5e0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     5e4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

	// OCR5B = 0; /* Output compare B: 0 */

	TIMSK5 = 0 << OCIE5B   /* Output Compare B Match Interrupt Enable: disabled */
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
	         | 1 << OCIE5A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE5  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE5; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	08 95       	ret

000005f2 <__vector_25>:
	USART_3_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_3_rxbuf[tmptail];
}
     5f2:	1f 92       	push	r1
     5f4:	0f 92       	push	r0
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	0f 92       	push	r0
     5fa:	11 24       	eor	r1, r1
     5fc:	0b b6       	in	r0, 0x3b	; 59
     5fe:	0f 92       	push	r0
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	ef 93       	push	r30
     606:	ff 93       	push	r31
     608:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     60c:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <USART_0_rx_head>
     610:	ef 5f       	subi	r30, 0xFF	; 255
     612:	e0 93 e8 02 	sts	0x02E8, r30	; 0x8002e8 <USART_0_rx_head>
     616:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <USART_0_rx_tail>
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	e7 51       	subi	r30, 0x17	; 23
     61e:	fd 4f       	sbci	r31, 0xFD	; 253
     620:	80 83       	st	Z, r24
     622:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <USART_0_rx_elements>
     626:	8f 5f       	subi	r24, 0xFF	; 255
     628:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <USART_0_rx_elements>
     62c:	ff 91       	pop	r31
     62e:	ef 91       	pop	r30
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	0f 90       	pop	r0
     636:	0b be       	out	0x3b, r0	; 59
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <__vector_26>:
     642:	1f 92       	push	r1
     644:	0f 92       	push	r0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	0f 92       	push	r0
     64a:	11 24       	eor	r1, r1
     64c:	0b b6       	in	r0, 0x3b	; 59
     64e:	0f 92       	push	r0
     650:	8f 93       	push	r24
     652:	ef 93       	push	r30
     654:	ff 93       	push	r31
     656:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <USART_0_tx_elements>
     65a:	88 23       	and	r24, r24
     65c:	89 f0       	breq	.+34     	; 0x680 <__vector_26+0x3e>
     65e:	e0 91 d4 02 	lds	r30, 0x02D4	; 0x8002d4 <USART_0_tx_tail>
     662:	ef 5f       	subi	r30, 0xFF	; 255
     664:	ef 70       	andi	r30, 0x0F	; 15
     666:	e0 93 d4 02 	sts	0x02D4, r30	; 0x8002d4 <USART_0_tx_tail>
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	ea 52       	subi	r30, 0x2A	; 42
     66e:	fd 4f       	sbci	r31, 0xFD	; 253
     670:	80 81       	ld	r24, Z
     672:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     676:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <USART_0_tx_elements>
     67a:	81 50       	subi	r24, 0x01	; 1
     67c:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <USART_0_tx_elements>
     680:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <USART_0_tx_elements>
     684:	81 11       	cpse	r24, r1
     686:	05 c0       	rjmp	.+10     	; 0x692 <__vector_26+0x50>
     688:	e1 ec       	ldi	r30, 0xC1	; 193
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	8f 7d       	andi	r24, 0xDF	; 223
     690:	80 83       	st	Z, r24
     692:	ff 91       	pop	r31
     694:	ef 91       	pop	r30
     696:	8f 91       	pop	r24
     698:	0f 90       	pop	r0
     69a:	0b be       	out	0x3b, r0	; 59
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <USART_0_init>:
     6a6:	e4 e6       	ldi	r30, 0x64	; 100
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	8d 7f       	andi	r24, 0xFD	; 253
     6ae:	80 83       	st	Z, r24
     6b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     6b4:	87 e6       	ldi	r24, 0x67	; 103
     6b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     6ba:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     6be:	88 e9       	ldi	r24, 0x98	; 152
     6c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     6c4:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <USART_0_rx_tail>
     6c8:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <USART_0_rx_head>
     6cc:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <USART_0_rx_elements>
     6d0:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <USART_0_tx_tail>
     6d4:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <USART_0_tx_head>
     6d8:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <USART_0_tx_elements>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	08 95       	ret

000006e0 <__vector_36>:
     6e0:	1f 92       	push	r1
     6e2:	0f 92       	push	r0
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	0f 92       	push	r0
     6e8:	11 24       	eor	r1, r1
     6ea:	0b b6       	in	r0, 0x3b	; 59
     6ec:	0f 92       	push	r0
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31
     6f6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     6fa:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <USART_1_rx_head>
     6fe:	ef 5f       	subi	r30, 0xFF	; 255
     700:	ef 70       	andi	r30, 0x0F	; 15
     702:	e0 93 c2 02 	sts	0x02C2, r30	; 0x8002c2 <USART_1_rx_head>
     706:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <USART_1_rx_tail>
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	ed 53       	subi	r30, 0x3D	; 61
     70e:	fd 4f       	sbci	r31, 0xFD	; 253
     710:	80 83       	st	Z, r24
     712:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <USART_1_rx_elements>
     716:	8f 5f       	subi	r24, 0xFF	; 255
     718:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <USART_1_rx_elements>
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	9f 91       	pop	r25
     722:	8f 91       	pop	r24
     724:	0f 90       	pop	r0
     726:	0b be       	out	0x3b, r0	; 59
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <__vector_37>:
     732:	1f 92       	push	r1
     734:	0f 92       	push	r0
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	0f 92       	push	r0
     73a:	11 24       	eor	r1, r1
     73c:	0b b6       	in	r0, 0x3b	; 59
     73e:	0f 92       	push	r0
     740:	8f 93       	push	r24
     742:	ef 93       	push	r30
     744:	ff 93       	push	r31
     746:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <USART_1_tx_elements>
     74a:	88 23       	and	r24, r24
     74c:	89 f0       	breq	.+34     	; 0x770 <__vector_37+0x3e>
     74e:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <USART_1_tx_tail>
     752:	ef 5f       	subi	r30, 0xFF	; 255
     754:	ef 70       	andi	r30, 0x0F	; 15
     756:	e0 93 ae 02 	sts	0x02AE, r30	; 0x8002ae <USART_1_tx_tail>
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	e0 55       	subi	r30, 0x50	; 80
     75e:	fd 4f       	sbci	r31, 0xFD	; 253
     760:	80 81       	ld	r24, Z
     762:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     766:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <USART_1_tx_elements>
     76a:	81 50       	subi	r24, 0x01	; 1
     76c:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <USART_1_tx_elements>
     770:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <USART_1_tx_elements>
     774:	81 11       	cpse	r24, r1
     776:	05 c0       	rjmp	.+10     	; 0x782 <__vector_37+0x50>
     778:	e9 ec       	ldi	r30, 0xC9	; 201
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	8f 7d       	andi	r24, 0xDF	; 223
     780:	80 83       	st	Z, r24
     782:	ff 91       	pop	r31
     784:	ef 91       	pop	r30
     786:	8f 91       	pop	r24
     788:	0f 90       	pop	r0
     78a:	0b be       	out	0x3b, r0	; 59
     78c:	0f 90       	pop	r0
     78e:	0f be       	out	0x3f, r0	; 63
     790:	0f 90       	pop	r0
     792:	1f 90       	pop	r1
     794:	18 95       	reti

00000796 <USART_1_init>:
     796:	e5 e6       	ldi	r30, 0x65	; 101
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	8e 7f       	andi	r24, 0xFE	; 254
     79e:	80 83       	st	Z, r24
     7a0:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     7a4:	87 e6       	ldi	r24, 0x67	; 103
     7a6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     7aa:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     7ae:	88 e9       	ldi	r24, 0x98	; 152
     7b0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     7b4:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <USART_1_rx_tail>
     7b8:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <USART_1_rx_head>
     7bc:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <USART_1_rx_elements>
     7c0:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <USART_1_tx_tail>
     7c4:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <USART_1_tx_head>
     7c8:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <USART_1_tx_elements>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	08 95       	ret

000007d0 <__vector_51>:
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	0b b6       	in	r0, 0x3b	; 59
     7dc:	0f 92       	push	r0
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	ef 93       	push	r30
     7e4:	ff 93       	push	r31
     7e6:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     7ea:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <USART_2_rx_head>
     7ee:	ef 5f       	subi	r30, 0xFF	; 255
     7f0:	ef 71       	andi	r30, 0x1F	; 31
     7f2:	e0 93 8c 02 	sts	0x028C, r30	; 0x80028c <USART_2_rx_head>
     7f6:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <USART_2_rx_tail>
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	e3 57       	subi	r30, 0x73	; 115
     7fe:	fd 4f       	sbci	r31, 0xFD	; 253
     800:	80 83       	st	Z, r24
     802:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <USART_2_rx_elements>
     806:	8f 5f       	subi	r24, 0xFF	; 255
     808:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <USART_2_rx_elements>
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	0f 90       	pop	r0
     816:	0b be       	out	0x3b, r0	; 59
     818:	0f 90       	pop	r0
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	0f 90       	pop	r0
     81e:	1f 90       	pop	r1
     820:	18 95       	reti

00000822 <__vector_52>:
     822:	1f 92       	push	r1
     824:	0f 92       	push	r0
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	0f 92       	push	r0
     82a:	11 24       	eor	r1, r1
     82c:	0b b6       	in	r0, 0x3b	; 59
     82e:	0f 92       	push	r0
     830:	8f 93       	push	r24
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
     836:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <USART_2_tx_elements>
     83a:	88 23       	and	r24, r24
     83c:	89 f0       	breq	.+34     	; 0x860 <__vector_52+0x3e>
     83e:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <USART_2_tx_tail>
     842:	ef 5f       	subi	r30, 0xFF	; 255
     844:	ef 70       	andi	r30, 0x0F	; 15
     846:	e0 93 78 02 	sts	0x0278, r30	; 0x800278 <USART_2_tx_tail>
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	e6 58       	subi	r30, 0x86	; 134
     84e:	fd 4f       	sbci	r31, 0xFD	; 253
     850:	80 81       	ld	r24, Z
     852:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     856:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <USART_2_tx_elements>
     85a:	81 50       	subi	r24, 0x01	; 1
     85c:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <USART_2_tx_elements>
     860:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <USART_2_tx_elements>
     864:	81 11       	cpse	r24, r1
     866:	05 c0       	rjmp	.+10     	; 0x872 <__vector_52+0x50>
     868:	e1 ed       	ldi	r30, 0xD1	; 209
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	8f 7d       	andi	r24, 0xDF	; 223
     870:	80 83       	st	Z, r24
     872:	ff 91       	pop	r31
     874:	ef 91       	pop	r30
     876:	8f 91       	pop	r24
     878:	0f 90       	pop	r0
     87a:	0b be       	out	0x3b, r0	; 59
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0f 90       	pop	r0
     882:	1f 90       	pop	r1
     884:	18 95       	reti

00000886 <USART_2_is_rx_ready>:
     886:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <USART_2_rx_elements>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	91 11       	cpse	r25, r1
     88e:	01 c0       	rjmp	.+2      	; 0x892 <USART_2_is_rx_ready+0xc>
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	08 95       	ret

00000894 <USART_2_read>:
     894:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <USART_2_rx_elements>
     898:	88 23       	and	r24, r24
     89a:	e1 f3       	breq	.-8      	; 0x894 <USART_2_read>
     89c:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <USART_2_rx_tail>
     8a0:	ef 5f       	subi	r30, 0xFF	; 255
     8a2:	ef 71       	andi	r30, 0x1F	; 31
     8a4:	e0 93 8b 02 	sts	0x028B, r30	; 0x80028b <USART_2_rx_tail>
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	0f 92       	push	r0
     8ae:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <USART_2_rx_elements>
     8b2:	81 50       	subi	r24, 0x01	; 1
     8b4:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <USART_2_rx_elements>
     8b8:	0f 90       	pop	r0
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	e3 57       	subi	r30, 0x73	; 115
     8c0:	fd 4f       	sbci	r31, 0xFD	; 253
     8c2:	80 81       	ld	r24, Z
     8c4:	08 95       	ret

000008c6 <USART_2_init>:
     8c6:	e5 e6       	ldi	r30, 0x65	; 101
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	8d 7f       	andi	r24, 0xFD	; 253
     8ce:	80 83       	st	Z, r24
     8d0:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     8d4:	87 e6       	ldi	r24, 0x67	; 103
     8d6:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     8da:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     8de:	88 e9       	ldi	r24, 0x98	; 152
     8e0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     8e4:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <USART_2_rx_tail>
     8e8:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <USART_2_rx_head>
     8ec:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <USART_2_rx_elements>
     8f0:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <USART_2_tx_tail>
     8f4:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <USART_2_tx_head>
     8f8:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <USART_2_tx_elements>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	08 95       	ret

00000900 <__vector_54>:
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	0b b6       	in	r0, 0x3b	; 59
     90c:	0f 92       	push	r0
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	ef 93       	push	r30
     914:	ff 93       	push	r31
     916:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     91a:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <USART_3_rx_head>
     91e:	ef 5f       	subi	r30, 0xFF	; 255
     920:	ef 70       	andi	r30, 0x0F	; 15
     922:	e0 93 66 02 	sts	0x0266, r30	; 0x800266 <USART_3_rx_head>
     926:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <USART_3_rx_tail>
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	e9 59       	subi	r30, 0x99	; 153
     92e:	fd 4f       	sbci	r31, 0xFD	; 253
     930:	80 83       	st	Z, r24
     932:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USART_3_rx_elements>
     936:	8f 5f       	subi	r24, 0xFF	; 255
     938:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <USART_3_rx_elements>
     93c:	ff 91       	pop	r31
     93e:	ef 91       	pop	r30
     940:	9f 91       	pop	r25
     942:	8f 91       	pop	r24
     944:	0f 90       	pop	r0
     946:	0b be       	out	0x3b, r0	; 59
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	0f 90       	pop	r0
     94e:	1f 90       	pop	r1
     950:	18 95       	reti

00000952 <__vector_55>:
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	0b b6       	in	r0, 0x3b	; 59
     95e:	0f 92       	push	r0
     960:	8f 93       	push	r24
     962:	ef 93       	push	r30
     964:	ff 93       	push	r31
     966:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <USART_3_tx_elements>
     96a:	88 23       	and	r24, r24
     96c:	89 f0       	breq	.+34     	; 0x990 <__vector_55+0x3e>
     96e:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <USART_3_tx_tail>
     972:	ef 5f       	subi	r30, 0xFF	; 255
     974:	ef 70       	andi	r30, 0x0F	; 15
     976:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <USART_3_tx_tail>
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	ec 5a       	subi	r30, 0xAC	; 172
     97e:	fd 4f       	sbci	r31, 0xFD	; 253
     980:	80 81       	ld	r24, Z
     982:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     986:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <USART_3_tx_elements>
     98a:	81 50       	subi	r24, 0x01	; 1
     98c:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <USART_3_tx_elements>
     990:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <USART_3_tx_elements>
     994:	81 11       	cpse	r24, r1
     996:	05 c0       	rjmp	.+10     	; 0x9a2 <__vector_55+0x50>
     998:	e1 e3       	ldi	r30, 0x31	; 49
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	80 81       	ld	r24, Z
     99e:	8f 7d       	andi	r24, 0xDF	; 223
     9a0:	80 83       	st	Z, r24
     9a2:	ff 91       	pop	r31
     9a4:	ef 91       	pop	r30
     9a6:	8f 91       	pop	r24
     9a8:	0f 90       	pop	r0
     9aa:	0b be       	out	0x3b, r0	; 59
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <USART_3_write>:
void USART_3_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_3_tx_head + 1) & USART_3_TX_BUFFER_MASK;
     9b6:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <USART_3_tx_head>
     9ba:	2f 5f       	subi	r18, 0xFF	; 255
     9bc:	2f 70       	andi	r18, 0x0F	; 15
	/* Wait for free space in buffer */
	while (USART_3_tx_elements == USART_3_TX_BUFFER_SIZE)
     9be:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <USART_3_tx_elements>
     9c2:	90 31       	cpi	r25, 0x10	; 16
     9c4:	e1 f3       	breq	.-8      	; 0x9be <USART_3_write+0x8>
		;
	/* Store data in buffer */
	USART_3_txbuf[tmphead] = data;
     9c6:	e2 2f       	mov	r30, r18
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	ec 5a       	subi	r30, 0xAC	; 172
     9cc:	fd 4f       	sbci	r31, 0xFD	; 253
     9ce:	80 83       	st	Z, r24
	/* Store new index */
	USART_3_tx_head = tmphead;
     9d0:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <USART_3_tx_head>
	ENTER_CRITICAL(W);
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	0f 92       	push	r0
	USART_3_tx_elements++;
     9da:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <USART_3_tx_elements>
     9de:	8f 5f       	subi	r24, 0xFF	; 255
     9e0:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <USART_3_tx_elements>
	EXIT_CRITICAL(W);
     9e4:	0f 90       	pop	r0
     9e6:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR3B |= (1 << UDRIE3);
     9e8:	e1 e3       	ldi	r30, 0x31	; 49
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	80 81       	ld	r24, Z
     9ee:	80 62       	ori	r24, 0x20	; 32
     9f0:	80 83       	st	Z, r24
     9f2:	08 95       	ret

000009f4 <USART_3_printCHAR>:
     9f4:	e0 df       	rcall	.-64     	; 0x9b6 <USART_3_write>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	08 95       	ret

000009fc <USART_3_init>:
     9fc:	e5 e6       	ldi	r30, 0x65	; 101
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	8b 7f       	andi	r24, 0xFB	; 251
     a04:	80 83       	st	Z, r24
     a06:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     a0a:	87 e6       	ldi	r24, 0x67	; 103
     a0c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     a10:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     a14:	88 e9       	ldi	r24, 0x98	; 152
     a16:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     a1a:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <USART_3_rx_tail>
     a1e:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <USART_3_rx_head>
     a22:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <USART_3_rx_elements>
     a26:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <USART_3_tx_tail>
     a2a:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <USART_3_tx_head>
     a2e:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <USART_3_tx_elements>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <__iob+0x3>
     a3a:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <__iob+0x2>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	08 95       	ret

00000a42 <fastmsectime>:
			 {
				 return;
			 }
		 }
	 }
 }
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	0f 92       	push	r0
     a48:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <m4sectimer>
     a4c:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <m4sectimer+0x1>
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	08 95       	ret

00000a56 <fastdelay_ms>:

 // Uses Hardware timer 4 which is set to 4.096mS interrupt
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	00 d0       	rcall	.+0      	; 0xa5c <fastdelay_ms+0x6>
     a5c:	1f 92       	push	r1
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	0f 92       	push	r0
	 currentms = m4sectimer;
     a68:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <m4sectimer>
     a6c:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
 // delay will be 0 < 4.096mS for parameter of 1
 void fastdelay_ms(uint16_t count)
 {
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
     a74:	3c 83       	std	Y+4, r19	; 0x04
     a76:	2b 83       	std	Y+3, r18	; 0x03
		 k = j + (uint16_t)count;
     a78:	2b 81       	ldd	r18, Y+3	; 0x03
     a7a:	3c 81       	ldd	r19, Y+4	; 0x04
     a7c:	82 0f       	add	r24, r18
     a7e:	93 1f       	adc	r25, r19
     a80:	9a 83       	std	Y+2, r25	; 0x02
     a82:	89 83       	std	Y+1, r24	; 0x01

 // read the 16 bit 4mSec counter
 inline uint16_t fastmsectime(void)
 {
	 uint16_t currentms;
	 ENTER_CRITICAL(W);
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	0f 92       	push	r0
	 currentms = m4sectimer;
     a8a:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <m4sectimer>
     a8e:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <m4sectimer+0x1>
	 EXIT_CRITICAL(W);
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
	 volatile uint16_t k,j;
	 while(1) {
		 j = fastmsectime();
		 k = j + (uint16_t)count;
		 while(1) {
			 j = fastmsectime();
     a96:	9c 83       	std	Y+4, r25	; 0x04
     a98:	8b 83       	std	Y+3, r24	; 0x03
			 if (j >= k)
     a9a:	2b 81       	ldd	r18, Y+3	; 0x03
     a9c:	3c 81       	ldd	r19, Y+4	; 0x04
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	9a 81       	ldd	r25, Y+2	; 0x02
     aa2:	28 17       	cp	r18, r24
     aa4:	39 07       	cpc	r19, r25
     aa6:	70 f3       	brcs	.-36     	; 0xa84 <fastdelay_ms+0x2e>
			 {
				 return;
			 }
		 }
	 }
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <__vector_42>:
#include <compiler.h>

volatile uint16_t m4sectimer = 0;		// global 4.096mS tick count (16 bits)

ISR(TIMER4_COMPA_vect)
{
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25

	/* Insert your TIMER_0 compare channel A interrupt handling code here */
	m4sectimer++;
     ac4:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <m4sectimer>
     ac8:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <m4sectimer+0x1>
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <m4sectimer+0x1>
     ad2:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <m4sectimer>
}
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <__vector_47>:

volatile uint64_t m1sectimer = 0;		// global 1mS tick count (64 bits)

ISR(TIMER5_COMPA_vect)
{
     ae4:	1f 92       	push	r1
     ae6:	0f 92       	push	r0
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	0f 92       	push	r0
     aec:	11 24       	eor	r1, r1
     aee:	2f 93       	push	r18
     af0:	3f 93       	push	r19
     af2:	4f 93       	push	r20
     af4:	5f 93       	push	r21
     af6:	6f 93       	push	r22
     af8:	7f 93       	push	r23
     afa:	8f 93       	push	r24
     afc:	9f 93       	push	r25
     afe:	af 93       	push	r26
	/* Insert your TIMER_5 compare channel A interrupt handling code here */
	static uint16_t nextcmp = 0;

	nextcmp = nextcmp + 16000;		// 1mSec assuming 16MHz clock
     b00:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <nextcmp.3022>
     b04:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <nextcmp.3022+0x1>
     b08:	80 58       	subi	r24, 0x80	; 128
     b0a:	91 4c       	sbci	r25, 0xC1	; 193
     b0c:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <nextcmp.3022+0x1>
     b10:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <nextcmp.3022>
	OCR5AH = nextcmp >> 8 ;
     b14:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
	OCR5AL = nextcmp & 0xff;
     b18:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <nextcmp.3022>
     b1c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	m1sectimer++;
     b20:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <m1sectimer>
     b24:	30 91 ec 03 	lds	r19, 0x03EC	; 0x8003ec <m1sectimer+0x1>
     b28:	40 91 ed 03 	lds	r20, 0x03ED	; 0x8003ed <m1sectimer+0x2>
     b2c:	50 91 ee 03 	lds	r21, 0x03EE	; 0x8003ee <m1sectimer+0x3>
     b30:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <m1sectimer+0x4>
     b34:	70 91 f0 03 	lds	r23, 0x03F0	; 0x8003f0 <m1sectimer+0x5>
     b38:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <m1sectimer+0x6>
     b3c:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <m1sectimer+0x7>
     b40:	a1 e0       	ldi	r26, 0x01	; 1
     b42:	2c d0       	rcall	.+88     	; 0xb9c <__adddi3_s8>
     b44:	20 93 eb 03 	sts	0x03EB, r18	; 0x8003eb <m1sectimer>
     b48:	30 93 ec 03 	sts	0x03EC, r19	; 0x8003ec <m1sectimer+0x1>
     b4c:	40 93 ed 03 	sts	0x03ED, r20	; 0x8003ed <m1sectimer+0x2>
     b50:	50 93 ee 03 	sts	0x03EE, r21	; 0x8003ee <m1sectimer+0x3>
     b54:	60 93 ef 03 	sts	0x03EF, r22	; 0x8003ef <m1sectimer+0x4>
     b58:	70 93 f0 03 	sts	0x03F0, r23	; 0x8003f0 <m1sectimer+0x5>
     b5c:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <m1sectimer+0x6>
     b60:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <m1sectimer+0x7>
}
     b64:	af 91       	pop	r26
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	7f 91       	pop	r23
     b6c:	6f 91       	pop	r22
     b6e:	5f 91       	pop	r21
     b70:	4f 91       	pop	r20
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti

00000b80 <main>:
     b80:	d2 da       	rcall	.-2652   	; 0x126 <atmel_start_init>
     b82:	78 94       	sei
     b84:	84 e3       	ldi	r24, 0x34	; 52
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	9f 93       	push	r25
     b8a:	8f 93       	push	r24
     b8c:	13 d0       	rcall	.+38     	; 0xbb4 <printf>
     b8e:	82 ee       	ldi	r24, 0xE2	; 226
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	61 df       	rcall	.-318    	; 0xa56 <fastdelay_ms>
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	15 db       	rcall	.-2518   	; 0x1c4 <decodelcd>
     b9a:	fe cf       	rjmp	.-4      	; 0xb98 <main+0x18>

00000b9c <__adddi3_s8>:
     b9c:	00 24       	eor	r0, r0
     b9e:	a7 fd       	sbrc	r26, 7
     ba0:	00 94       	com	r0
     ba2:	2a 0f       	add	r18, r26
     ba4:	30 1d       	adc	r19, r0
     ba6:	40 1d       	adc	r20, r0
     ba8:	50 1d       	adc	r21, r0
     baa:	60 1d       	adc	r22, r0
     bac:	70 1d       	adc	r23, r0
     bae:	80 1d       	adc	r24, r0
     bb0:	90 1d       	adc	r25, r0
     bb2:	08 95       	ret

00000bb4 <printf>:
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	ae 01       	movw	r20, r28
     bbe:	4a 5f       	subi	r20, 0xFA	; 250
     bc0:	5f 4f       	sbci	r21, 0xFF	; 255
     bc2:	fa 01       	movw	r30, r20
     bc4:	61 91       	ld	r22, Z+
     bc6:	71 91       	ld	r23, Z+
     bc8:	af 01       	movw	r20, r30
     bca:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <__iob+0x2>
     bce:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <__iob+0x3>
     bd2:	03 d0       	rcall	.+6      	; 0xbda <vfprintf>
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <vfprintf>:
     bda:	2f 92       	push	r2
     bdc:	3f 92       	push	r3
     bde:	4f 92       	push	r4
     be0:	5f 92       	push	r5
     be2:	6f 92       	push	r6
     be4:	7f 92       	push	r7
     be6:	8f 92       	push	r8
     be8:	9f 92       	push	r9
     bea:	af 92       	push	r10
     bec:	bf 92       	push	r11
     bee:	cf 92       	push	r12
     bf0:	df 92       	push	r13
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	2b 97       	sbiw	r28, 0x0b	; 11
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	6c 01       	movw	r12, r24
     c10:	7b 01       	movw	r14, r22
     c12:	8a 01       	movw	r16, r20
     c14:	fc 01       	movw	r30, r24
     c16:	17 82       	std	Z+7, r1	; 0x07
     c18:	16 82       	std	Z+6, r1	; 0x06
     c1a:	83 81       	ldd	r24, Z+3	; 0x03
     c1c:	81 ff       	sbrs	r24, 1
     c1e:	bf c1       	rjmp	.+894    	; 0xf9e <vfprintf+0x3c4>
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	3c 01       	movw	r6, r24
     c26:	f6 01       	movw	r30, r12
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	f7 01       	movw	r30, r14
     c2c:	93 fd       	sbrc	r25, 3
     c2e:	85 91       	lpm	r24, Z+
     c30:	93 ff       	sbrs	r25, 3
     c32:	81 91       	ld	r24, Z+
     c34:	7f 01       	movw	r14, r30
     c36:	88 23       	and	r24, r24
     c38:	09 f4       	brne	.+2      	; 0xc3c <vfprintf+0x62>
     c3a:	ad c1       	rjmp	.+858    	; 0xf96 <vfprintf+0x3bc>
     c3c:	85 32       	cpi	r24, 0x25	; 37
     c3e:	39 f4       	brne	.+14     	; 0xc4e <vfprintf+0x74>
     c40:	93 fd       	sbrc	r25, 3
     c42:	85 91       	lpm	r24, Z+
     c44:	93 ff       	sbrs	r25, 3
     c46:	81 91       	ld	r24, Z+
     c48:	7f 01       	movw	r14, r30
     c4a:	85 32       	cpi	r24, 0x25	; 37
     c4c:	21 f4       	brne	.+8      	; 0xc56 <vfprintf+0x7c>
     c4e:	b6 01       	movw	r22, r12
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	d6 d1       	rcall	.+940    	; 0x1000 <fputc>
     c54:	e8 cf       	rjmp	.-48     	; 0xc26 <vfprintf+0x4c>
     c56:	91 2c       	mov	r9, r1
     c58:	21 2c       	mov	r2, r1
     c5a:	31 2c       	mov	r3, r1
     c5c:	ff e1       	ldi	r31, 0x1F	; 31
     c5e:	f3 15       	cp	r31, r3
     c60:	d8 f0       	brcs	.+54     	; 0xc98 <vfprintf+0xbe>
     c62:	8b 32       	cpi	r24, 0x2B	; 43
     c64:	79 f0       	breq	.+30     	; 0xc84 <vfprintf+0xaa>
     c66:	38 f4       	brcc	.+14     	; 0xc76 <vfprintf+0x9c>
     c68:	80 32       	cpi	r24, 0x20	; 32
     c6a:	79 f0       	breq	.+30     	; 0xc8a <vfprintf+0xb0>
     c6c:	83 32       	cpi	r24, 0x23	; 35
     c6e:	a1 f4       	brne	.+40     	; 0xc98 <vfprintf+0xbe>
     c70:	23 2d       	mov	r18, r3
     c72:	20 61       	ori	r18, 0x10	; 16
     c74:	1d c0       	rjmp	.+58     	; 0xcb0 <vfprintf+0xd6>
     c76:	8d 32       	cpi	r24, 0x2D	; 45
     c78:	61 f0       	breq	.+24     	; 0xc92 <vfprintf+0xb8>
     c7a:	80 33       	cpi	r24, 0x30	; 48
     c7c:	69 f4       	brne	.+26     	; 0xc98 <vfprintf+0xbe>
     c7e:	23 2d       	mov	r18, r3
     c80:	21 60       	ori	r18, 0x01	; 1
     c82:	16 c0       	rjmp	.+44     	; 0xcb0 <vfprintf+0xd6>
     c84:	83 2d       	mov	r24, r3
     c86:	82 60       	ori	r24, 0x02	; 2
     c88:	38 2e       	mov	r3, r24
     c8a:	e3 2d       	mov	r30, r3
     c8c:	e4 60       	ori	r30, 0x04	; 4
     c8e:	3e 2e       	mov	r3, r30
     c90:	2a c0       	rjmp	.+84     	; 0xce6 <vfprintf+0x10c>
     c92:	f3 2d       	mov	r31, r3
     c94:	f8 60       	ori	r31, 0x08	; 8
     c96:	1d c0       	rjmp	.+58     	; 0xcd2 <vfprintf+0xf8>
     c98:	37 fc       	sbrc	r3, 7
     c9a:	2d c0       	rjmp	.+90     	; 0xcf6 <vfprintf+0x11c>
     c9c:	20 ed       	ldi	r18, 0xD0	; 208
     c9e:	28 0f       	add	r18, r24
     ca0:	2a 30       	cpi	r18, 0x0A	; 10
     ca2:	40 f0       	brcs	.+16     	; 0xcb4 <vfprintf+0xda>
     ca4:	8e 32       	cpi	r24, 0x2E	; 46
     ca6:	b9 f4       	brne	.+46     	; 0xcd6 <vfprintf+0xfc>
     ca8:	36 fc       	sbrc	r3, 6
     caa:	75 c1       	rjmp	.+746    	; 0xf96 <vfprintf+0x3bc>
     cac:	23 2d       	mov	r18, r3
     cae:	20 64       	ori	r18, 0x40	; 64
     cb0:	32 2e       	mov	r3, r18
     cb2:	19 c0       	rjmp	.+50     	; 0xce6 <vfprintf+0x10c>
     cb4:	36 fe       	sbrs	r3, 6
     cb6:	06 c0       	rjmp	.+12     	; 0xcc4 <vfprintf+0xea>
     cb8:	8a e0       	ldi	r24, 0x0A	; 10
     cba:	98 9e       	mul	r9, r24
     cbc:	20 0d       	add	r18, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	92 2e       	mov	r9, r18
     cc2:	11 c0       	rjmp	.+34     	; 0xce6 <vfprintf+0x10c>
     cc4:	ea e0       	ldi	r30, 0x0A	; 10
     cc6:	2e 9e       	mul	r2, r30
     cc8:	20 0d       	add	r18, r0
     cca:	11 24       	eor	r1, r1
     ccc:	22 2e       	mov	r2, r18
     cce:	f3 2d       	mov	r31, r3
     cd0:	f0 62       	ori	r31, 0x20	; 32
     cd2:	3f 2e       	mov	r3, r31
     cd4:	08 c0       	rjmp	.+16     	; 0xce6 <vfprintf+0x10c>
     cd6:	8c 36       	cpi	r24, 0x6C	; 108
     cd8:	21 f4       	brne	.+8      	; 0xce2 <vfprintf+0x108>
     cda:	83 2d       	mov	r24, r3
     cdc:	80 68       	ori	r24, 0x80	; 128
     cde:	38 2e       	mov	r3, r24
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <vfprintf+0x10c>
     ce2:	88 36       	cpi	r24, 0x68	; 104
     ce4:	41 f4       	brne	.+16     	; 0xcf6 <vfprintf+0x11c>
     ce6:	f7 01       	movw	r30, r14
     ce8:	93 fd       	sbrc	r25, 3
     cea:	85 91       	lpm	r24, Z+
     cec:	93 ff       	sbrs	r25, 3
     cee:	81 91       	ld	r24, Z+
     cf0:	7f 01       	movw	r14, r30
     cf2:	81 11       	cpse	r24, r1
     cf4:	b3 cf       	rjmp	.-154    	; 0xc5c <vfprintf+0x82>
     cf6:	98 2f       	mov	r25, r24
     cf8:	9f 7d       	andi	r25, 0xDF	; 223
     cfa:	95 54       	subi	r25, 0x45	; 69
     cfc:	93 30       	cpi	r25, 0x03	; 3
     cfe:	28 f4       	brcc	.+10     	; 0xd0a <vfprintf+0x130>
     d00:	0c 5f       	subi	r16, 0xFC	; 252
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	9f e3       	ldi	r25, 0x3F	; 63
     d06:	99 83       	std	Y+1, r25	; 0x01
     d08:	0d c0       	rjmp	.+26     	; 0xd24 <vfprintf+0x14a>
     d0a:	83 36       	cpi	r24, 0x63	; 99
     d0c:	31 f0       	breq	.+12     	; 0xd1a <vfprintf+0x140>
     d0e:	83 37       	cpi	r24, 0x73	; 115
     d10:	71 f0       	breq	.+28     	; 0xd2e <vfprintf+0x154>
     d12:	83 35       	cpi	r24, 0x53	; 83
     d14:	09 f0       	breq	.+2      	; 0xd18 <vfprintf+0x13e>
     d16:	55 c0       	rjmp	.+170    	; 0xdc2 <vfprintf+0x1e8>
     d18:	20 c0       	rjmp	.+64     	; 0xd5a <vfprintf+0x180>
     d1a:	f8 01       	movw	r30, r16
     d1c:	80 81       	ld	r24, Z
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	0e 5f       	subi	r16, 0xFE	; 254
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	88 24       	eor	r8, r8
     d26:	83 94       	inc	r8
     d28:	91 2c       	mov	r9, r1
     d2a:	53 01       	movw	r10, r6
     d2c:	12 c0       	rjmp	.+36     	; 0xd52 <vfprintf+0x178>
     d2e:	28 01       	movw	r4, r16
     d30:	f2 e0       	ldi	r31, 0x02	; 2
     d32:	4f 0e       	add	r4, r31
     d34:	51 1c       	adc	r5, r1
     d36:	f8 01       	movw	r30, r16
     d38:	a0 80       	ld	r10, Z
     d3a:	b1 80       	ldd	r11, Z+1	; 0x01
     d3c:	36 fe       	sbrs	r3, 6
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <vfprintf+0x16c>
     d40:	69 2d       	mov	r22, r9
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <vfprintf+0x170>
     d46:	6f ef       	ldi	r22, 0xFF	; 255
     d48:	7f ef       	ldi	r23, 0xFF	; 255
     d4a:	c5 01       	movw	r24, r10
     d4c:	4e d1       	rcall	.+668    	; 0xfea <strnlen>
     d4e:	4c 01       	movw	r8, r24
     d50:	82 01       	movw	r16, r4
     d52:	f3 2d       	mov	r31, r3
     d54:	ff 77       	andi	r31, 0x7F	; 127
     d56:	3f 2e       	mov	r3, r31
     d58:	15 c0       	rjmp	.+42     	; 0xd84 <vfprintf+0x1aa>
     d5a:	28 01       	movw	r4, r16
     d5c:	22 e0       	ldi	r18, 0x02	; 2
     d5e:	42 0e       	add	r4, r18
     d60:	51 1c       	adc	r5, r1
     d62:	f8 01       	movw	r30, r16
     d64:	a0 80       	ld	r10, Z
     d66:	b1 80       	ldd	r11, Z+1	; 0x01
     d68:	36 fe       	sbrs	r3, 6
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <vfprintf+0x198>
     d6c:	69 2d       	mov	r22, r9
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <vfprintf+0x19c>
     d72:	6f ef       	ldi	r22, 0xFF	; 255
     d74:	7f ef       	ldi	r23, 0xFF	; 255
     d76:	c5 01       	movw	r24, r10
     d78:	2d d1       	rcall	.+602    	; 0xfd4 <strnlen_P>
     d7a:	4c 01       	movw	r8, r24
     d7c:	f3 2d       	mov	r31, r3
     d7e:	f0 68       	ori	r31, 0x80	; 128
     d80:	3f 2e       	mov	r3, r31
     d82:	82 01       	movw	r16, r4
     d84:	33 fc       	sbrc	r3, 3
     d86:	19 c0       	rjmp	.+50     	; 0xdba <vfprintf+0x1e0>
     d88:	82 2d       	mov	r24, r2
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	88 16       	cp	r8, r24
     d8e:	99 06       	cpc	r9, r25
     d90:	a0 f4       	brcc	.+40     	; 0xdba <vfprintf+0x1e0>
     d92:	b6 01       	movw	r22, r12
     d94:	80 e2       	ldi	r24, 0x20	; 32
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	33 d1       	rcall	.+614    	; 0x1000 <fputc>
     d9a:	2a 94       	dec	r2
     d9c:	f5 cf       	rjmp	.-22     	; 0xd88 <vfprintf+0x1ae>
     d9e:	f5 01       	movw	r30, r10
     da0:	37 fc       	sbrc	r3, 7
     da2:	85 91       	lpm	r24, Z+
     da4:	37 fe       	sbrs	r3, 7
     da6:	81 91       	ld	r24, Z+
     da8:	5f 01       	movw	r10, r30
     daa:	b6 01       	movw	r22, r12
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	28 d1       	rcall	.+592    	; 0x1000 <fputc>
     db0:	21 10       	cpse	r2, r1
     db2:	2a 94       	dec	r2
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	82 1a       	sub	r8, r18
     db8:	91 08       	sbc	r9, r1
     dba:	81 14       	cp	r8, r1
     dbc:	91 04       	cpc	r9, r1
     dbe:	79 f7       	brne	.-34     	; 0xd9e <vfprintf+0x1c4>
     dc0:	e1 c0       	rjmp	.+450    	; 0xf84 <vfprintf+0x3aa>
     dc2:	84 36       	cpi	r24, 0x64	; 100
     dc4:	11 f0       	breq	.+4      	; 0xdca <vfprintf+0x1f0>
     dc6:	89 36       	cpi	r24, 0x69	; 105
     dc8:	39 f5       	brne	.+78     	; 0xe18 <vfprintf+0x23e>
     dca:	f8 01       	movw	r30, r16
     dcc:	37 fe       	sbrs	r3, 7
     dce:	07 c0       	rjmp	.+14     	; 0xdde <vfprintf+0x204>
     dd0:	60 81       	ld	r22, Z
     dd2:	71 81       	ldd	r23, Z+1	; 0x01
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	0c 5f       	subi	r16, 0xFC	; 252
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	08 c0       	rjmp	.+16     	; 0xdee <vfprintf+0x214>
     dde:	60 81       	ld	r22, Z
     de0:	71 81       	ldd	r23, Z+1	; 0x01
     de2:	07 2e       	mov	r0, r23
     de4:	00 0c       	add	r0, r0
     de6:	88 0b       	sbc	r24, r24
     de8:	99 0b       	sbc	r25, r25
     dea:	0e 5f       	subi	r16, 0xFE	; 254
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	f3 2d       	mov	r31, r3
     df0:	ff 76       	andi	r31, 0x6F	; 111
     df2:	3f 2e       	mov	r3, r31
     df4:	97 ff       	sbrs	r25, 7
     df6:	09 c0       	rjmp	.+18     	; 0xe0a <vfprintf+0x230>
     df8:	90 95       	com	r25
     dfa:	80 95       	com	r24
     dfc:	70 95       	com	r23
     dfe:	61 95       	neg	r22
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	8f 4f       	sbci	r24, 0xFF	; 255
     e04:	9f 4f       	sbci	r25, 0xFF	; 255
     e06:	f0 68       	ori	r31, 0x80	; 128
     e08:	3f 2e       	mov	r3, r31
     e0a:	2a e0       	ldi	r18, 0x0A	; 10
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	a3 01       	movw	r20, r6
     e10:	33 d1       	rcall	.+614    	; 0x1078 <__ultoa_invert>
     e12:	88 2e       	mov	r8, r24
     e14:	86 18       	sub	r8, r6
     e16:	44 c0       	rjmp	.+136    	; 0xea0 <vfprintf+0x2c6>
     e18:	85 37       	cpi	r24, 0x75	; 117
     e1a:	31 f4       	brne	.+12     	; 0xe28 <vfprintf+0x24e>
     e1c:	23 2d       	mov	r18, r3
     e1e:	2f 7e       	andi	r18, 0xEF	; 239
     e20:	b2 2e       	mov	r11, r18
     e22:	2a e0       	ldi	r18, 0x0A	; 10
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	25 c0       	rjmp	.+74     	; 0xe72 <vfprintf+0x298>
     e28:	93 2d       	mov	r25, r3
     e2a:	99 7f       	andi	r25, 0xF9	; 249
     e2c:	b9 2e       	mov	r11, r25
     e2e:	8f 36       	cpi	r24, 0x6F	; 111
     e30:	c1 f0       	breq	.+48     	; 0xe62 <vfprintf+0x288>
     e32:	18 f4       	brcc	.+6      	; 0xe3a <vfprintf+0x260>
     e34:	88 35       	cpi	r24, 0x58	; 88
     e36:	79 f0       	breq	.+30     	; 0xe56 <vfprintf+0x27c>
     e38:	ae c0       	rjmp	.+348    	; 0xf96 <vfprintf+0x3bc>
     e3a:	80 37       	cpi	r24, 0x70	; 112
     e3c:	19 f0       	breq	.+6      	; 0xe44 <vfprintf+0x26a>
     e3e:	88 37       	cpi	r24, 0x78	; 120
     e40:	21 f0       	breq	.+8      	; 0xe4a <vfprintf+0x270>
     e42:	a9 c0       	rjmp	.+338    	; 0xf96 <vfprintf+0x3bc>
     e44:	e9 2f       	mov	r30, r25
     e46:	e0 61       	ori	r30, 0x10	; 16
     e48:	be 2e       	mov	r11, r30
     e4a:	b4 fe       	sbrs	r11, 4
     e4c:	0d c0       	rjmp	.+26     	; 0xe68 <vfprintf+0x28e>
     e4e:	fb 2d       	mov	r31, r11
     e50:	f4 60       	ori	r31, 0x04	; 4
     e52:	bf 2e       	mov	r11, r31
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <vfprintf+0x28e>
     e56:	34 fe       	sbrs	r3, 4
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <vfprintf+0x294>
     e5a:	29 2f       	mov	r18, r25
     e5c:	26 60       	ori	r18, 0x06	; 6
     e5e:	b2 2e       	mov	r11, r18
     e60:	06 c0       	rjmp	.+12     	; 0xe6e <vfprintf+0x294>
     e62:	28 e0       	ldi	r18, 0x08	; 8
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	05 c0       	rjmp	.+10     	; 0xe72 <vfprintf+0x298>
     e68:	20 e1       	ldi	r18, 0x10	; 16
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <vfprintf+0x298>
     e6e:	20 e1       	ldi	r18, 0x10	; 16
     e70:	32 e0       	ldi	r19, 0x02	; 2
     e72:	f8 01       	movw	r30, r16
     e74:	b7 fe       	sbrs	r11, 7
     e76:	07 c0       	rjmp	.+14     	; 0xe86 <vfprintf+0x2ac>
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	82 81       	ldd	r24, Z+2	; 0x02
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	0c 5f       	subi	r16, 0xFC	; 252
     e82:	1f 4f       	sbci	r17, 0xFF	; 255
     e84:	06 c0       	rjmp	.+12     	; 0xe92 <vfprintf+0x2b8>
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 5f       	subi	r16, 0xFE	; 254
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	a3 01       	movw	r20, r6
     e94:	f1 d0       	rcall	.+482    	; 0x1078 <__ultoa_invert>
     e96:	88 2e       	mov	r8, r24
     e98:	86 18       	sub	r8, r6
     e9a:	fb 2d       	mov	r31, r11
     e9c:	ff 77       	andi	r31, 0x7F	; 127
     e9e:	3f 2e       	mov	r3, r31
     ea0:	36 fe       	sbrs	r3, 6
     ea2:	0d c0       	rjmp	.+26     	; 0xebe <vfprintf+0x2e4>
     ea4:	23 2d       	mov	r18, r3
     ea6:	2e 7f       	andi	r18, 0xFE	; 254
     ea8:	a2 2e       	mov	r10, r18
     eaa:	89 14       	cp	r8, r9
     eac:	58 f4       	brcc	.+22     	; 0xec4 <vfprintf+0x2ea>
     eae:	34 fe       	sbrs	r3, 4
     eb0:	0b c0       	rjmp	.+22     	; 0xec8 <vfprintf+0x2ee>
     eb2:	32 fc       	sbrc	r3, 2
     eb4:	09 c0       	rjmp	.+18     	; 0xec8 <vfprintf+0x2ee>
     eb6:	83 2d       	mov	r24, r3
     eb8:	8e 7e       	andi	r24, 0xEE	; 238
     eba:	a8 2e       	mov	r10, r24
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <vfprintf+0x2ee>
     ebe:	b8 2c       	mov	r11, r8
     ec0:	a3 2c       	mov	r10, r3
     ec2:	03 c0       	rjmp	.+6      	; 0xeca <vfprintf+0x2f0>
     ec4:	b8 2c       	mov	r11, r8
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <vfprintf+0x2f0>
     ec8:	b9 2c       	mov	r11, r9
     eca:	a4 fe       	sbrs	r10, 4
     ecc:	0f c0       	rjmp	.+30     	; 0xeec <vfprintf+0x312>
     ece:	fe 01       	movw	r30, r28
     ed0:	e8 0d       	add	r30, r8
     ed2:	f1 1d       	adc	r31, r1
     ed4:	80 81       	ld	r24, Z
     ed6:	80 33       	cpi	r24, 0x30	; 48
     ed8:	21 f4       	brne	.+8      	; 0xee2 <vfprintf+0x308>
     eda:	9a 2d       	mov	r25, r10
     edc:	99 7e       	andi	r25, 0xE9	; 233
     ede:	a9 2e       	mov	r10, r25
     ee0:	09 c0       	rjmp	.+18     	; 0xef4 <vfprintf+0x31a>
     ee2:	a2 fe       	sbrs	r10, 2
     ee4:	06 c0       	rjmp	.+12     	; 0xef2 <vfprintf+0x318>
     ee6:	b3 94       	inc	r11
     ee8:	b3 94       	inc	r11
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <vfprintf+0x31a>
     eec:	8a 2d       	mov	r24, r10
     eee:	86 78       	andi	r24, 0x86	; 134
     ef0:	09 f0       	breq	.+2      	; 0xef4 <vfprintf+0x31a>
     ef2:	b3 94       	inc	r11
     ef4:	a3 fc       	sbrc	r10, 3
     ef6:	10 c0       	rjmp	.+32     	; 0xf18 <vfprintf+0x33e>
     ef8:	a0 fe       	sbrs	r10, 0
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <vfprintf+0x32e>
     efc:	b2 14       	cp	r11, r2
     efe:	80 f4       	brcc	.+32     	; 0xf20 <vfprintf+0x346>
     f00:	28 0c       	add	r2, r8
     f02:	92 2c       	mov	r9, r2
     f04:	9b 18       	sub	r9, r11
     f06:	0d c0       	rjmp	.+26     	; 0xf22 <vfprintf+0x348>
     f08:	b2 14       	cp	r11, r2
     f0a:	58 f4       	brcc	.+22     	; 0xf22 <vfprintf+0x348>
     f0c:	b6 01       	movw	r22, r12
     f0e:	80 e2       	ldi	r24, 0x20	; 32
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	76 d0       	rcall	.+236    	; 0x1000 <fputc>
     f14:	b3 94       	inc	r11
     f16:	f8 cf       	rjmp	.-16     	; 0xf08 <vfprintf+0x32e>
     f18:	b2 14       	cp	r11, r2
     f1a:	18 f4       	brcc	.+6      	; 0xf22 <vfprintf+0x348>
     f1c:	2b 18       	sub	r2, r11
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <vfprintf+0x34a>
     f20:	98 2c       	mov	r9, r8
     f22:	21 2c       	mov	r2, r1
     f24:	a4 fe       	sbrs	r10, 4
     f26:	0f c0       	rjmp	.+30     	; 0xf46 <vfprintf+0x36c>
     f28:	b6 01       	movw	r22, r12
     f2a:	80 e3       	ldi	r24, 0x30	; 48
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	68 d0       	rcall	.+208    	; 0x1000 <fputc>
     f30:	a2 fe       	sbrs	r10, 2
     f32:	16 c0       	rjmp	.+44     	; 0xf60 <vfprintf+0x386>
     f34:	a1 fc       	sbrc	r10, 1
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <vfprintf+0x364>
     f38:	88 e7       	ldi	r24, 0x78	; 120
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <vfprintf+0x368>
     f3e:	88 e5       	ldi	r24, 0x58	; 88
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	b6 01       	movw	r22, r12
     f44:	0c c0       	rjmp	.+24     	; 0xf5e <vfprintf+0x384>
     f46:	8a 2d       	mov	r24, r10
     f48:	86 78       	andi	r24, 0x86	; 134
     f4a:	51 f0       	breq	.+20     	; 0xf60 <vfprintf+0x386>
     f4c:	a1 fe       	sbrs	r10, 1
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <vfprintf+0x37a>
     f50:	8b e2       	ldi	r24, 0x2B	; 43
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <vfprintf+0x37c>
     f54:	80 e2       	ldi	r24, 0x20	; 32
     f56:	a7 fc       	sbrc	r10, 7
     f58:	8d e2       	ldi	r24, 0x2D	; 45
     f5a:	b6 01       	movw	r22, r12
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	50 d0       	rcall	.+160    	; 0x1000 <fputc>
     f60:	89 14       	cp	r8, r9
     f62:	30 f4       	brcc	.+12     	; 0xf70 <vfprintf+0x396>
     f64:	b6 01       	movw	r22, r12
     f66:	80 e3       	ldi	r24, 0x30	; 48
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	4a d0       	rcall	.+148    	; 0x1000 <fputc>
     f6c:	9a 94       	dec	r9
     f6e:	f8 cf       	rjmp	.-16     	; 0xf60 <vfprintf+0x386>
     f70:	8a 94       	dec	r8
     f72:	f3 01       	movw	r30, r6
     f74:	e8 0d       	add	r30, r8
     f76:	f1 1d       	adc	r31, r1
     f78:	80 81       	ld	r24, Z
     f7a:	b6 01       	movw	r22, r12
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	40 d0       	rcall	.+128    	; 0x1000 <fputc>
     f80:	81 10       	cpse	r8, r1
     f82:	f6 cf       	rjmp	.-20     	; 0xf70 <vfprintf+0x396>
     f84:	22 20       	and	r2, r2
     f86:	09 f4       	brne	.+2      	; 0xf8a <vfprintf+0x3b0>
     f88:	4e ce       	rjmp	.-868    	; 0xc26 <vfprintf+0x4c>
     f8a:	b6 01       	movw	r22, r12
     f8c:	80 e2       	ldi	r24, 0x20	; 32
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	37 d0       	rcall	.+110    	; 0x1000 <fputc>
     f92:	2a 94       	dec	r2
     f94:	f7 cf       	rjmp	.-18     	; 0xf84 <vfprintf+0x3aa>
     f96:	f6 01       	movw	r30, r12
     f98:	86 81       	ldd	r24, Z+6	; 0x06
     f9a:	97 81       	ldd	r25, Z+7	; 0x07
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <vfprintf+0x3c8>
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	9f ef       	ldi	r25, 0xFF	; 255
     fa2:	2b 96       	adiw	r28, 0x0b	; 11
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	bf 90       	pop	r11
     fc0:	af 90       	pop	r10
     fc2:	9f 90       	pop	r9
     fc4:	8f 90       	pop	r8
     fc6:	7f 90       	pop	r7
     fc8:	6f 90       	pop	r6
     fca:	5f 90       	pop	r5
     fcc:	4f 90       	pop	r4
     fce:	3f 90       	pop	r3
     fd0:	2f 90       	pop	r2
     fd2:	08 95       	ret

00000fd4 <strnlen_P>:
     fd4:	fc 01       	movw	r30, r24
     fd6:	05 90       	lpm	r0, Z+
     fd8:	61 50       	subi	r22, 0x01	; 1
     fda:	70 40       	sbci	r23, 0x00	; 0
     fdc:	01 10       	cpse	r0, r1
     fde:	d8 f7       	brcc	.-10     	; 0xfd6 <strnlen_P+0x2>
     fe0:	80 95       	com	r24
     fe2:	90 95       	com	r25
     fe4:	8e 0f       	add	r24, r30
     fe6:	9f 1f       	adc	r25, r31
     fe8:	08 95       	ret

00000fea <strnlen>:
     fea:	fc 01       	movw	r30, r24
     fec:	61 50       	subi	r22, 0x01	; 1
     fee:	70 40       	sbci	r23, 0x00	; 0
     ff0:	01 90       	ld	r0, Z+
     ff2:	01 10       	cpse	r0, r1
     ff4:	d8 f7       	brcc	.-10     	; 0xfec <strnlen+0x2>
     ff6:	80 95       	com	r24
     ff8:	90 95       	com	r25
     ffa:	8e 0f       	add	r24, r30
     ffc:	9f 1f       	adc	r25, r31
     ffe:	08 95       	ret

00001000 <fputc>:
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	fb 01       	movw	r30, r22
    100a:	23 81       	ldd	r18, Z+3	; 0x03
    100c:	21 fd       	sbrc	r18, 1
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <fputc+0x16>
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	9f ef       	ldi	r25, 0xFF	; 255
    1014:	2c c0       	rjmp	.+88     	; 0x106e <fputc+0x6e>
    1016:	22 ff       	sbrs	r18, 2
    1018:	16 c0       	rjmp	.+44     	; 0x1046 <fputc+0x46>
    101a:	46 81       	ldd	r20, Z+6	; 0x06
    101c:	57 81       	ldd	r21, Z+7	; 0x07
    101e:	24 81       	ldd	r18, Z+4	; 0x04
    1020:	35 81       	ldd	r19, Z+5	; 0x05
    1022:	42 17       	cp	r20, r18
    1024:	53 07       	cpc	r21, r19
    1026:	44 f4       	brge	.+16     	; 0x1038 <fputc+0x38>
    1028:	a0 81       	ld	r26, Z
    102a:	b1 81       	ldd	r27, Z+1	; 0x01
    102c:	9d 01       	movw	r18, r26
    102e:	2f 5f       	subi	r18, 0xFF	; 255
    1030:	3f 4f       	sbci	r19, 0xFF	; 255
    1032:	31 83       	std	Z+1, r19	; 0x01
    1034:	20 83       	st	Z, r18
    1036:	8c 93       	st	X, r24
    1038:	26 81       	ldd	r18, Z+6	; 0x06
    103a:	37 81       	ldd	r19, Z+7	; 0x07
    103c:	2f 5f       	subi	r18, 0xFF	; 255
    103e:	3f 4f       	sbci	r19, 0xFF	; 255
    1040:	37 83       	std	Z+7, r19	; 0x07
    1042:	26 83       	std	Z+6, r18	; 0x06
    1044:	14 c0       	rjmp	.+40     	; 0x106e <fputc+0x6e>
    1046:	8b 01       	movw	r16, r22
    1048:	ec 01       	movw	r28, r24
    104a:	fb 01       	movw	r30, r22
    104c:	00 84       	ldd	r0, Z+8	; 0x08
    104e:	f1 85       	ldd	r31, Z+9	; 0x09
    1050:	e0 2d       	mov	r30, r0
    1052:	19 95       	eicall
    1054:	89 2b       	or	r24, r25
    1056:	e1 f6       	brne	.-72     	; 0x1010 <fputc+0x10>
    1058:	d8 01       	movw	r26, r16
    105a:	16 96       	adiw	r26, 0x06	; 6
    105c:	8d 91       	ld	r24, X+
    105e:	9c 91       	ld	r25, X
    1060:	17 97       	sbiw	r26, 0x07	; 7
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	17 96       	adiw	r26, 0x07	; 7
    1066:	9c 93       	st	X, r25
    1068:	8e 93       	st	-X, r24
    106a:	16 97       	sbiw	r26, 0x06	; 6
    106c:	ce 01       	movw	r24, r28
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	08 95       	ret

00001078 <__ultoa_invert>:
    1078:	fa 01       	movw	r30, r20
    107a:	aa 27       	eor	r26, r26
    107c:	28 30       	cpi	r18, 0x08	; 8
    107e:	51 f1       	breq	.+84     	; 0x10d4 <__ultoa_invert+0x5c>
    1080:	20 31       	cpi	r18, 0x10	; 16
    1082:	81 f1       	breq	.+96     	; 0x10e4 <__ultoa_invert+0x6c>
    1084:	e8 94       	clt
    1086:	6f 93       	push	r22
    1088:	6e 7f       	andi	r22, 0xFE	; 254
    108a:	6e 5f       	subi	r22, 0xFE	; 254
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	8f 4f       	sbci	r24, 0xFF	; 255
    1090:	9f 4f       	sbci	r25, 0xFF	; 255
    1092:	af 4f       	sbci	r26, 0xFF	; 255
    1094:	b1 e0       	ldi	r27, 0x01	; 1
    1096:	3e d0       	rcall	.+124    	; 0x1114 <__ultoa_invert+0x9c>
    1098:	b4 e0       	ldi	r27, 0x04	; 4
    109a:	3c d0       	rcall	.+120    	; 0x1114 <__ultoa_invert+0x9c>
    109c:	67 0f       	add	r22, r23
    109e:	78 1f       	adc	r23, r24
    10a0:	89 1f       	adc	r24, r25
    10a2:	9a 1f       	adc	r25, r26
    10a4:	a1 1d       	adc	r26, r1
    10a6:	68 0f       	add	r22, r24
    10a8:	79 1f       	adc	r23, r25
    10aa:	8a 1f       	adc	r24, r26
    10ac:	91 1d       	adc	r25, r1
    10ae:	a1 1d       	adc	r26, r1
    10b0:	6a 0f       	add	r22, r26
    10b2:	71 1d       	adc	r23, r1
    10b4:	81 1d       	adc	r24, r1
    10b6:	91 1d       	adc	r25, r1
    10b8:	a1 1d       	adc	r26, r1
    10ba:	20 d0       	rcall	.+64     	; 0x10fc <__ultoa_invert+0x84>
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <__ultoa_invert+0x48>
    10be:	68 94       	set
    10c0:	3f 91       	pop	r19
    10c2:	2a e0       	ldi	r18, 0x0A	; 10
    10c4:	26 9f       	mul	r18, r22
    10c6:	11 24       	eor	r1, r1
    10c8:	30 19       	sub	r19, r0
    10ca:	30 5d       	subi	r19, 0xD0	; 208
    10cc:	31 93       	st	Z+, r19
    10ce:	de f6       	brtc	.-74     	; 0x1086 <__ultoa_invert+0xe>
    10d0:	cf 01       	movw	r24, r30
    10d2:	08 95       	ret
    10d4:	46 2f       	mov	r20, r22
    10d6:	47 70       	andi	r20, 0x07	; 7
    10d8:	40 5d       	subi	r20, 0xD0	; 208
    10da:	41 93       	st	Z+, r20
    10dc:	b3 e0       	ldi	r27, 0x03	; 3
    10de:	0f d0       	rcall	.+30     	; 0x10fe <__ultoa_invert+0x86>
    10e0:	c9 f7       	brne	.-14     	; 0x10d4 <__ultoa_invert+0x5c>
    10e2:	f6 cf       	rjmp	.-20     	; 0x10d0 <__ultoa_invert+0x58>
    10e4:	46 2f       	mov	r20, r22
    10e6:	4f 70       	andi	r20, 0x0F	; 15
    10e8:	40 5d       	subi	r20, 0xD0	; 208
    10ea:	4a 33       	cpi	r20, 0x3A	; 58
    10ec:	18 f0       	brcs	.+6      	; 0x10f4 <__ultoa_invert+0x7c>
    10ee:	49 5d       	subi	r20, 0xD9	; 217
    10f0:	31 fd       	sbrc	r19, 1
    10f2:	40 52       	subi	r20, 0x20	; 32
    10f4:	41 93       	st	Z+, r20
    10f6:	02 d0       	rcall	.+4      	; 0x10fc <__ultoa_invert+0x84>
    10f8:	a9 f7       	brne	.-22     	; 0x10e4 <__ultoa_invert+0x6c>
    10fa:	ea cf       	rjmp	.-44     	; 0x10d0 <__ultoa_invert+0x58>
    10fc:	b4 e0       	ldi	r27, 0x04	; 4
    10fe:	a6 95       	lsr	r26
    1100:	97 95       	ror	r25
    1102:	87 95       	ror	r24
    1104:	77 95       	ror	r23
    1106:	67 95       	ror	r22
    1108:	ba 95       	dec	r27
    110a:	c9 f7       	brne	.-14     	; 0x10fe <__ultoa_invert+0x86>
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	61 05       	cpc	r22, r1
    1110:	71 05       	cpc	r23, r1
    1112:	08 95       	ret
    1114:	9b 01       	movw	r18, r22
    1116:	ac 01       	movw	r20, r24
    1118:	0a 2e       	mov	r0, r26
    111a:	06 94       	lsr	r0
    111c:	57 95       	ror	r21
    111e:	47 95       	ror	r20
    1120:	37 95       	ror	r19
    1122:	27 95       	ror	r18
    1124:	ba 95       	dec	r27
    1126:	c9 f7       	brne	.-14     	; 0x111a <__ultoa_invert+0xa2>
    1128:	62 0f       	add	r22, r18
    112a:	73 1f       	adc	r23, r19
    112c:	84 1f       	adc	r24, r20
    112e:	95 1f       	adc	r25, r21
    1130:	a0 1d       	adc	r26, r0
    1132:	08 95       	ret

00001134 <_exit>:
    1134:	f8 94       	cli

00001136 <__stop_program>:
    1136:	ff cf       	rjmp	.-2      	; 0x1136 <__stop_program>
